2022-09-06 AndyP
EEG Clock variants




<defaults>
/ canvasaspectratio = (4,4)
/ minimumversion = "6.0.0.0"
/ inputdevice = mouse
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 0)
/ txbgcolor = white
/ txcolor = (0, 0, 0)
</defaults>


<expressions>
/ centerx = 0.5*display.canvaswidth
/ centery = 0.5*display.canvasheight
/ radius_px = parameters.circleproportion * display.canvasheight
/ radians_angle6 = rad(6)
/ radians_angle12 = rad(12)
/ radians_angle18 = rad(18)
/ radians_angle24 = rad(24)
/ radians_angle30 = rad(30)
/ radians_angle36 = rad(36)
/ radians_angle42 = rad(42)
/ radians_angle48 = rad(48)
/ radians_angle54 = rad(54)
/ radians_angle60 = rad(60)
/ radians_angle66 = rad(66)
/ radians_angle72 = rad(72)
/ radians_angle78 = rad(78)
/ radians_angle84 = rad(84)
/ radians_angle90 = rad(90)
/ radians_angle96 = rad(96)
/ radians_angle102 = rad(102)
/ radians_angle108 = rad(108)
/ radians_angle114 = rad(114)
/ radians_angle120 = rad(120)
/ radians_angle126 = rad(126)
/ radians_angle132 = rad(132)
/ radians_angle138 = rad(138)
/ radians_angle144 = rad(144)
/ radians_angle150 = rad(150)
/ radians_angle156 = rad(156)
/ radians_angle162 = rad(162)
/ radians_angle168 = rad(168)
/ radians_angle174 = rad(174)
/ radians_angle180 = rad(180)
/ radians_angle186 = rad(186)
/ radians_angle192 = rad(192)
/ radians_angle198 = rad(198)
/ radians_angle204 = rad(204)
/ radians_angle210 = rad(210)
/ radians_angle216 = rad(216)
/ radians_angle222 = rad(222)
/ radians_angle228 = rad(228)
/ radians_angle234 = rad(234)
/ radians_angle240 = rad(240)
/ radians_angle246 = rad(246)
/ radians_angle252 = rad(252)
/ radians_angle258 = rad(258)
/ radians_angle264 = rad(264)
/ radians_angle270 = rad(270)
/ radians_angle276 = rad(276)
/ radians_angle282 = rad(282)
/ radians_angle288 = rad(288)
/ radians_angle294 = rad(294)
/ radians_angle300 = rad(300)
/ radians_angle306 = rad(306)
/ radians_angle312 = rad(312)
/ radians_angle318 = rad(318)
/ radians_angle324 = rad(324)
/ radians_angle330 = rad(330)
/ radians_angle336 = rad(336)
/ radians_angle342 = rad(342)
/ radians_angle348 = rad(348)
/ radians_angle354 = rad(354)
/ heightchange_angle6 = sin(expressions.Radians_angle6) * expressions.radius_px
/ widthchange_angle6 = cos(expressions.Radians_angle6) * expressions.radius_px
/ heightchange_angle12 = sin(expressions.Radians_angle12) * expressions.radius_px
/ widthchange_angle12 = cos(expressions.Radians_angle12) * expressions.radius_px
/ heightchange_angle18 = sin(expressions.Radians_angle18) * expressions.radius_px
/ widthchange_angle18 = cos(expressions.Radians_angle18) * expressions.radius_px
/ heightchange_angle24 = sin(expressions.Radians_angle24) * expressions.radius_px
/ widthchange_angle24 = cos(expressions.Radians_angle24) * expressions.radius_px
/ heightchange_angle30 = sin(expressions.Radians_angle30) * expressions.radius_px
/ widthchange_angle30 = cos(expressions.Radians_angle30) * expressions.radius_px
/ heightchange_angle36 = sin(expressions.Radians_angle36) * expressions.radius_px
/ widthchange_angle36 = cos(expressions.Radians_angle36) * expressions.radius_px
/ heightchange_angle42 = sin(expressions.Radians_angle42) * expressions.radius_px
/ widthchange_angle42 = cos(expressions.Radians_angle42) * expressions.radius_px
/ heightchange_angle48 = sin(expressions.Radians_angle48) * expressions.radius_px
/ widthchange_angle48 = cos(expressions.Radians_angle48) * expressions.radius_px
/ heightchange_angle54 = sin(expressions.Radians_angle54) * expressions.radius_px
/ widthchange_angle54 = cos(expressions.Radians_angle54) * expressions.radius_px
/ heightchange_angle60 = sin(expressions.Radians_angle60) * expressions.radius_px
/ widthchange_angle60 = cos(expressions.Radians_angle60) * expressions.radius_px
/ heightchange_angle66 = sin(expressions.Radians_angle66) * expressions.radius_px
/ widthchange_angle66 = cos(expressions.Radians_angle66) * expressions.radius_px
/ heightchange_angle72 = sin(expressions.Radians_angle72) * expressions.radius_px
/ widthchange_angle72 = cos(expressions.Radians_angle72) * expressions.radius_px
/ heightchange_angle78 = sin(expressions.Radians_angle78) * expressions.radius_px
/ widthchange_angle78 = cos(expressions.Radians_angle78) * expressions.radius_px
/ heightchange_angle84 = sin(expressions.Radians_angle84) * expressions.radius_px
/ widthchange_angle84 = cos(expressions.Radians_angle84) * expressions.radius_px
/ heightchange_angle90 = sin(expressions.Radians_angle90) * expressions.radius_px
/ widthchange_angle90 = cos(expressions.Radians_angle90) * expressions.radius_px
/ heightchange_angle96 = sin(expressions.Radians_angle96) * expressions.radius_px
/ widthchange_angle96 = cos(expressions.Radians_angle96) * expressions.radius_px
/ heightchange_angle102 = sin(expressions.Radians_angle102) * expressions.radius_px
/ widthchange_angle102 = cos(expressions.Radians_angle102) * expressions.radius_px
/ heightchange_angle108 = sin(expressions.Radians_angle108) * expressions.radius_px
/ widthchange_angle108 = cos(expressions.Radians_angle108) * expressions.radius_px
/ heightchange_angle114 = sin(expressions.Radians_angle114) * expressions.radius_px
/ widthchange_angle114 = cos(expressions.Radians_angle114) * expressions.radius_px
/ heightchange_angle120 = sin(expressions.Radians_angle120) * expressions.radius_px
/ widthchange_angle120 = cos(expressions.Radians_angle120) * expressions.radius_px
/ heightchange_angle126 = sin(expressions.Radians_angle126) * expressions.radius_px
/ widthchange_angle126 = cos(expressions.Radians_angle126) * expressions.radius_px
/ heightchange_angle132 = sin(expressions.Radians_angle132) * expressions.radius_px
/ widthchange_angle132 = cos(expressions.Radians_angle132) * expressions.radius_px
/ heightchange_angle138 = sin(expressions.Radians_angle138) * expressions.radius_px
/ widthchange_angle138 = cos(expressions.Radians_angle138) * expressions.radius_px
/ heightchange_angle144 = sin(expressions.Radians_angle144) * expressions.radius_px
/ widthchange_angle144 = cos(expressions.Radians_angle144) * expressions.radius_px
/ heightchange_angle150 = sin(expressions.Radians_angle150) * expressions.radius_px
/ widthchange_angle150 = cos(expressions.Radians_angle150) * expressions.radius_px
/ heightchange_angle156 = sin(expressions.Radians_angle156) * expressions.radius_px
/ widthchange_angle156 = cos(expressions.Radians_angle156) * expressions.radius_px
/ heightchange_angle162 = sin(expressions.Radians_angle162) * expressions.radius_px
/ widthchange_angle162 = cos(expressions.Radians_angle162) * expressions.radius_px
/ heightchange_angle168 = sin(expressions.Radians_angle168) * expressions.radius_px
/ widthchange_angle168 = cos(expressions.Radians_angle168) * expressions.radius_px
/ heightchange_angle174 = sin(expressions.Radians_angle174) * expressions.radius_px
/ widthchange_angle174 = cos(expressions.Radians_angle174) * expressions.radius_px
/ heightchange_angle180 = sin(expressions.Radians_angle180) * expressions.radius_px
/ widthchange_angle180 = cos(expressions.Radians_angle180) * expressions.radius_px
/ heightchange_angle186 = sin(expressions.Radians_angle186) * expressions.radius_px
/ widthchange_angle186 = cos(expressions.Radians_angle186) * expressions.radius_px
/ heightchange_angle192 = sin(expressions.Radians_angle192) * expressions.radius_px
/ widthchange_angle192 = cos(expressions.Radians_angle192) * expressions.radius_px
/ heightchange_angle198 = sin(expressions.Radians_angle198) * expressions.radius_px
/ widthchange_angle198 = cos(expressions.Radians_angle198) * expressions.radius_px
/ heightchange_angle204 = sin(expressions.Radians_angle204) * expressions.radius_px
/ widthchange_angle204 = cos(expressions.Radians_angle204) * expressions.radius_px
/ heightchange_angle210 = sin(expressions.Radians_angle210) * expressions.radius_px
/ widthchange_angle210 = cos(expressions.Radians_angle210) * expressions.radius_px
/ heightchange_angle216 = sin(expressions.Radians_angle216) * expressions.radius_px
/ widthchange_angle216 = cos(expressions.Radians_angle216) * expressions.radius_px
/ heightchange_angle222 = sin(expressions.Radians_angle222) * expressions.radius_px
/ widthchange_angle222 = cos(expressions.Radians_angle222) * expressions.radius_px
/ heightchange_angle228 = sin(expressions.Radians_angle228) * expressions.radius_px
/ widthchange_angle228 = cos(expressions.Radians_angle228) * expressions.radius_px
/ heightchange_angle234 = sin(expressions.Radians_angle234) * expressions.radius_px
/ widthchange_angle234 = cos(expressions.Radians_angle234) * expressions.radius_px
/ heightchange_angle240 = sin(expressions.Radians_angle240) * expressions.radius_px
/ widthchange_angle240 = cos(expressions.Radians_angle240) * expressions.radius_px
/ heightchange_angle246 = sin(expressions.Radians_angle246) * expressions.radius_px
/ widthchange_angle246 = cos(expressions.Radians_angle246) * expressions.radius_px
/ heightchange_angle252 = sin(expressions.Radians_angle252) * expressions.radius_px
/ widthchange_angle252 = cos(expressions.Radians_angle252) * expressions.radius_px
/ heightchange_angle258 = sin(expressions.Radians_angle258) * expressions.radius_px
/ widthchange_angle258 = cos(expressions.Radians_angle258) * expressions.radius_px
/ heightchange_angle264 = sin(expressions.Radians_angle264) * expressions.radius_px
/ widthchange_angle264 = cos(expressions.Radians_angle264) * expressions.radius_px
/ heightchange_angle270 = sin(expressions.Radians_angle270) * expressions.radius_px
/ widthchange_angle270 = cos(expressions.Radians_angle270) * expressions.radius_px
/ heightchange_angle276 = sin(expressions.Radians_angle276) * expressions.radius_px
/ widthchange_angle276 = cos(expressions.Radians_angle276) * expressions.radius_px
/ heightchange_angle282 = sin(expressions.Radians_angle282) * expressions.radius_px
/ widthchange_angle282 = cos(expressions.Radians_angle282) * expressions.radius_px
/ heightchange_angle288 = sin(expressions.Radians_angle288) * expressions.radius_px
/ widthchange_angle288 = cos(expressions.Radians_angle288) * expressions.radius_px
/ heightchange_angle294 = sin(expressions.Radians_angle294) * expressions.radius_px
/ widthchange_angle294 = cos(expressions.Radians_angle294) * expressions.radius_px
/ heightchange_angle300 = sin(expressions.Radians_angle300) * expressions.radius_px
/ widthchange_angle300 = cos(expressions.Radians_angle300) * expressions.radius_px
/ heightchange_angle306 = sin(expressions.Radians_angle306) * expressions.radius_px
/ widthchange_angle306 = cos(expressions.Radians_angle306) * expressions.radius_px
/ heightchange_angle312 = sin(expressions.Radians_angle312) * expressions.radius_px
/ widthchange_angle312 = cos(expressions.Radians_angle312) * expressions.radius_px
/ heightchange_angle318 = sin(expressions.Radians_angle318) * expressions.radius_px
/ widthchange_angle318 = cos(expressions.Radians_angle318) * expressions.radius_px
/ heightchange_angle324 = sin(expressions.Radians_angle324) * expressions.radius_px
/ widthchange_angle324 = cos(expressions.Radians_angle324) * expressions.radius_px
/ heightchange_angle330 = sin(expressions.Radians_angle330) * expressions.radius_px
/ widthchange_angle330 = cos(expressions.Radians_angle330) * expressions.radius_px
/ heightchange_angle336 = sin(expressions.Radians_angle336) * expressions.radius_px
/ widthchange_angle336 = cos(expressions.Radians_angle336) * expressions.radius_px
/ heightchange_angle342 = sin(expressions.Radians_angle342) * expressions.radius_px
/ widthchange_angle342 = cos(expressions.Radians_angle342) * expressions.radius_px
/ heightchange_angle348 = sin(expressions.Radians_angle348) * expressions.radius_px
/ widthchange_angle348 = cos(expressions.Radians_angle348) * expressions.radius_px
/ heightchange_angle354 = sin(expressions.Radians_angle354) * expressions.radius_px
/ widthchange_angle354 = cos(expressions.Radians_angle354) * expressions.radius_px
/ heightchange_angle0 = 0
/ widthchange_angle0 = expressions.radius_px

</expressions>

<values>
/ k = 37;
/ Shift = 700;
/ rt_extended = 7000;
/ DEV_factor = 10;
/ DEV_factor2 = 1;
/ sin_factor = 0.25;
/ mag = NULL;
/ freq = NULL;
/ CEV_x = NULL;
/ IEV_x = NULL;
/ CEV_x2 = NULL;
/ DEV_x = NULL;
/ a = -5;
/ b = 5;
/ r = NULL;
/ ev = NULL;
/ inc = NULL;
/ temp = NULL;
/ rng = NULL;
/ startPos = 75;
/ totalPoints = 0;
/ angDisp = 0;
/ circle_x = 0%;
/ circle_y = 0%;
/ n_revolutions = 0;
/ rt_shifted = NULL;
/ time_per_revolution = 5000;
/ gamma = values.time_per_revolution/100;
/ scrfunc = "IEV";
/ totalEarnings = 0;
/ Earnings = NULL;
/ trialCount = 0;
/ trialCountTotal = 0;
/ blockCount = 0;
/ uncertaintyStart1 = 0;
/ uncertaintyStart2 = 0;
/ nUncertainty1 = 0;
/ nUncertainty2 = 0;
/ fogPos1 = 0;
/ fogPos2 = 0;
/ chooseFog1 = 0;
/ chooseFog2 = 0;
/ chooseUncertainty1 = 0;
/ chooseUncertainty2 = 0;
/ uncertaintyCount1 = 0;
/ uncertaintyCount2 = 0;
/ uncertainty_block = 0;
</values>

<parameters>
/ rtvspos = "POS" // if POS, the clock position in space matters, if RT, the time from the starting position matters
/ mushrooms = TRUE;
/ randStart = TRUE;
/ circleproportion = 0.33
/ clockdotSize = 2%
/ handDotSize = 3%
/ ntrials = 10;
</parameters>

<data>
/ columns = (build, computer.platform, computer.touch, date, time, subject, group, script.sessionid, blockcode, blocknum, 
trialcode,latency,parameters.randStart, values.startPos,values.scrfunc, parameters.rtvspos, parameters.randStart, 
values.mag, values.freq, values.ev, values.inc, values.rng values.startPos, values.fogPos1,values.fogPos2,
values.chooseUncertainty1, values.chooseUncertainty2, values.uncertaintyCount1, values.uncertaintyCount2,
values.blockCount,parameters.ntrials, values.trialCount, 
values.uncertaintyStart1, values.uncertaintyStart2, values.uncertainty_block,
values.rt_shifted,values.totalPoints, values.totalEarnings, values.Earnings)
</data>

<summarydata>
/ columns = (computer.platform,computer.touch,script.sessionid,values.k,values.Shift,values.rt_extended,
values.DEV_factor,values.DEV_factor2,values.sin_factor,values.time_per_revolution,expressions.radius_px, values.gamma)
</summarydata>



<picture fixationCross>
/ items = ("fixationCross.png")
/ position = (50%, 50%)
/ size = (7%, 7%)
/ erase = true(white)
</picture>


<picture mushroom1>
/ items = ("mushrooms1.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture mushroom2>
/ items = ("mushrooms2.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture mushroom3>
/ items = ("mushrooms3.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture mushroom4>
/ items = ("mushrooms4.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture mushroom5>
/ items = ("mushrooms5.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture mushroom6>
/ items = ("mushrooms6.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture mushroom7>
/ items = ("mushrooms7.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture mushroom8>
/ items = ("mushrooms8.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture mushroom9>
/ items = ("mushrooms9.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture mushroom10>
/ items = ("mushrooms10.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture no_mushrooms>
/ items = ("no_mushrooms.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture sampleMushroomL>
/ items = ("mushrooms1.png")
/ position = (20%, 80%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture sampleMushroomR>
/ items = ("mushrooms1.png")
/ position = (80%, 80%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture timeout>
/ items = ("timeout.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture feedback>
/ items = ("blank.png") //default
/ position = (50%, 50%)
/ size = (25%, 25%)
/ erase = true(white)
</picture>

<picture fog0>
/ items = ("fog0.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle0
/ vposition = expressions.centery + expressions.heightchange_angle0
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture fog5>
/ items = ("fog5.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle330
/ vposition = expressions.centery + expressions.heightchange_angle330
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture fog10>
/ items = ("fog10.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle300
/ vposition = expressions.centery + expressions.heightchange_angle300
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture fog15>
/ items = ("fog15.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle270
/ vposition = expressions.centery + expressions.heightchange_angle270
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture fog20>
/ items = ("fog20.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle240
/ vposition = expressions.centery + expressions.heightchange_angle240
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture fog25>
/ items = ("fog25.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle180
/ vposition = expressions.centery + expressions.heightchange_angle180
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture fog30>
/ items = ("fog30.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle150
/ vposition = expressions.centery + expressions.heightchange_angle150
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture fog35>
/ items = ("fog35.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle120
/ vposition = expressions.centery + expressions.heightchange_angle120
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture fog40>
/ items = ("fog40.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle90
/ vposition = expressions.centery + expressions.heightchange_angle90
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture fog45>
/ items = ("fog45.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle60
/ vposition = expressions.centery + expressions.heightchange_angle60
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture fog50>
/ items = ("fog50.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle30
/ vposition = expressions.centery + expressions.heightchange_angle30
/ size = (30%, 30%)
/ erase = true(white)
</picture>


// items = ("00000001")
// port = COM4
//</port>


// items = ("00000000")
// port = COM4
//</port>

<list fog_hpos>
/ items = (
expressions.centerx + expressions.widthchange_angle0,
expressions.centerx + expressions.widthchange_angle30,
expressions.centerx + expressions.widthchange_angle60,
expressions.centerx + expressions.widthchange_angle90,
expressions.centerx + expressions.widthchange_angle120,
expressions.centerx + expressions.widthchange_angle150,
expressions.centerx + expressions.widthchange_angle180,
expressions.centerx + expressions.widthchange_angle210,
expressions.centerx + expressions.widthchange_angle240,
expressions.centerx + expressions.widthchange_angle270,
expressions.centerx + expressions.widthchange_angle300,
expressions.centerx + expressions.widthchange_angle330
)
/ selectionmode = list.fog_hpos.currentindex
/ selectionrate = always
</list>

<list fog_vpos>
/ items = (
expressions.centery + expressions.heightchange_angle0,
expressions.centery + expressions.heightchange_angle30,
expressions.centery + expressions.heightchange_angle60,
expressions.centery + expressions.heightchange_angle90,
expressions.centery + expressions.heightchange_angle120,
expressions.centery + expressions.heightchange_angle150,
expressions.centery + expressions.heightchange_angle180,
expressions.centery + expressions.heightchange_angle210,
expressions.centery + expressions.heightchange_angle240,
expressions.centery + expressions.heightchange_angle270,
expressions.centery + expressions.heightchange_angle300,
expressions.centery + expressions.heightchange_angle330
)
/ selectionmode = list.fog_vpos.currentindex
/ selectionrate = always
</list>


<picture uncertainty>
/ items = ("fog0.png") //default
/ hposition = list.fog_hpos.nextvalue
/ vposition = list.fog_vpos.nextvalue
/ size = (30%, 30%)
/ erase = true(white)
</picture>


<picture planet>
/ items = ("planet-1138237_1280.png")
/ position = (50%, 50%)
/ size = (35%,35%)
/ erase = true(white)
</picture>


<item instructions1>
/ 1 = "In this game, you are picking mushrooms on a far away planet.
      
On each of your 320 trials you can decide where to land your spacecraft.  Your spacecraft will orbit the planet, and you can land it at any point by pressing the spacebar.
      
If you stop in a good location, you will find 1-10 mushrooms. Every mushroom is worth 0.5 cents.
      
The goal of this game is to get the most mushrooms.

The game takes about 30-35 minutes."
</item>

<text instructions2>
/ items = ("Press the spacebar to land the spacecraft.
This is just for practice.")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<text instructions3>
/ items = ("Sometimes a cloud will appear.
If you land the spacecraft on the cloud,
the number of mushrooms you get will change
from what you experienced before.")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<text instructions4>
/ items = ("Try to land the spacecraft
on the cloud.")
</text>

<text instructions5>
/ items = ("Now you will play for real mushrooms 
(ahem...money!). 
Get ready!")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<text next>
/ items = ("Next")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 0)
/ position = (50%, 75%)
/ size = (25%, 15%)
/ vjustify = center
/ txbgcolor = gainsboro
/ txcolor = black
</text>

<text payment>
/ items = ("You won a total of $ <%values.totalEarnings/200%> dollars.  
The average score is $10.  Thank you for playing!")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<text feedback1>
/ items = ("You got <% values.Earnings*2 %> mushrooms")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 60%)
/ vjustify = center
/ hjustify = left
</text>

<picture animatedCircle>
/ items = ("challenger-5631958_1280.png")
/ size = (12%, 0.1px*display.canvaswidth)
/ animation = circle(values.time_per_revolution,-1,values.startPos,50%,50%,expressions.radius_px)
/ erase = false
</picture>

****************************************************************
Clock Face with 60 equally spaced dots that are 6degrees apart
360degress/60 = 6degrees
****************************************************************

<shape dot1>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle276)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle276)
/ erase = false
</shape>
 
<shape dot2>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*3,255/61*3,255/61*3)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle282)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle282)
/ erase = false
</shape>
 
<shape dot3>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*4,255/61*4,255/61*4)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle288)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle288)
/ erase = false
</shape>
 
<shape dot4>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*5,255/61*5,255/61*5)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle294)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle294)
/ erase = false
</shape>
 
<shape dot5>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*6,255/61*6,255/61*6)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle300)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle300)
/ erase = false
</shape>
 
<shape dot6>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*7,255/61*7,255/61*7)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle306)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle306)
/ erase = false
</shape>
 
<shape dot7>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*8,255/61*8,255/61*8)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle312)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle312)
/ erase = false
</shape>
 
<shape dot8>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*9,255/61*9,255/61*9)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle318)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle318)
/ erase = false
</shape>
 
<shape dot9>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*10,255/61*10,255/61*10)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle324)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle324)
/ erase = false
</shape>
 
<shape dot10>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*11,255/61*11,255/61*11)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle330)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle330)
/ erase = false
</shape>
 
<shape dot11>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*12,255/61*12,255/61*12)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle336)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle336)
/ erase = false
</shape>
 
<shape dot12>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*13,255/61*13,255/61*13)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle342)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle342)
/ erase = false
</shape>
 
<shape dot13>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*14,255/61*14,255/61*14)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle348)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle348)
/ erase = false
</shape>
 
<shape dot14>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*15,255/61*15,255/61*15)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle354)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle354)
/ erase = false
</shape>
 
<shape dot15>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*16,255/61*16,255/61*16)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle0)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle0)
/ erase = false
</shape>

<shape dot16>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*17,255/61*17,255/61*17)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle6)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle6)
/ erase = false
</shape>
 
<shape dot17>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*18,255/61*18,255/61*18)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle12)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle12)
/ erase = false
</shape>
 
<shape dot18>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*19,255/61*19,255/61*19)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle18)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle18)
/ erase = false
</shape>
 
<shape dot19>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*19,255/61*19,255/61*19)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle24)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle24)
/ erase = false
</shape>
 
<shape dot20>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*20,255/61*20,255/61*20)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle30)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle30)
/ erase = false
</shape>
 
<shape dot21>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*21,255/61*21,255/61*21)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle36)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle36)
/ erase = false
</shape>
 
<shape dot22>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*22,255/61*22,255/61*22)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle42)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle42)
/ erase = false
</shape>
 
<shape dot23>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*23,255/61*23,255/61*23)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle48)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle48)
/ erase = false
</shape>
 
<shape dot24>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*24,255/61*24,255/61*24)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle54)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle54)
/ erase = false
</shape>
 
<shape dot25>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*25,255/61*25,255/61*25)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle60)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle60)
/ erase = false
</shape>
 
<shape dot26>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*26,255/61*26,255/61*26)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle66)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle66)
/ erase = false
</shape>
 
<shape dot27>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*27,255/61*27,255/61*27)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle72)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle72)
/ erase = false
</shape>
 
<shape dot28>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*28,255/61*28,255/61*28)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle78)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle78)
/ erase = false
</shape>
 
<shape dot29>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*29,255/61*29,255/61*29)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle84)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle84)
/ erase = false
</shape>
 
<shape dot30>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*30,255/61*30,255/61*30)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle90)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle90)
/ erase = false
</shape>
 
<shape dot31>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*31,255/61*31,255/61*31)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle96)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle96)
/ erase = false
</shape>
 
<shape dot32>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*32,255/61*32,255/61*32)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle102)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle102)
/ erase = false
</shape>
 
<shape dot33>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*33,255/61*33,255/61*33)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle108)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle108)
/ erase = false
</shape>
 
<shape dot34>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*34,255/61*34,255/61*34)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle114)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle114)
/ erase = false
</shape>
 
<shape dot35>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*35,255/61*35,255/61*35)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle120)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle120)
/ erase = false
</shape>
 
<shape dot36>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*36,255/61*36,255/61*36)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle126)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle126)
/ erase = false
</shape>
 
<shape dot37>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*37,255/61*37,255/61*37)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle132)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle132)
/ erase = false
</shape>
 
<shape dot38>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*38,255/61*38,255/61*38)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle138)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle138)
/ erase = false
</shape>
 
<shape dot39>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*39,255/61*39,255/61*39)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle144)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle144)
/ erase = false
</shape>
 
<shape dot40>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*40,255/61*40,255/61*40)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle150)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle150)
/ erase = false
</shape>
 
<shape dot41>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*41,255/61*41,255/61*41)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle156)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle156)
/ erase = false
</shape>
 
<shape dot42>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*42,255/61*42,255/61*42)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle162)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle162)
/ erase = false
</shape>
 
<shape dot43>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*43,255/61*43,255/61*43)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle168)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle168)
/ erase = false
</shape>
 
<shape dot44>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*44,255/61*44,255/61*44)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle174)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle174)
/ erase = false
</shape>
 
<shape dot45>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*45,255/61*45,255/61*45)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle180)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle180)
/ erase = false
</shape>
 
<shape dot46>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*46,255/61*46,255/61*46)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle186)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle186)
/ erase = false
</shape>
 
<shape dot47>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*47,255/61*47,255/61*47)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle192)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle192)
/ erase = false
</shape>
 
<shape dot48>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*48,255/61*48,255/61*48)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle198)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle198)
/ erase = false
</shape>
 
<shape dot49>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*49,255/61*49,255/61*49)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle204)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle204)
/ erase = false
</shape>
 
<shape dot50>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*50,255/61*50,255/61*50)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle210)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle210)
/ erase = false
</shape>
 
<shape dot51>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*51,255/61*51,255/61*51)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle216)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle216)
/ erase = false
</shape>
 
<shape dot52>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*52,255/61*52,255/61*52)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle222)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle222)
/ erase = false
</shape>
 
<shape dot53>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*53,255/61*53,255/61*53)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle228)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle228)
/ erase = false
</shape>
 
<shape dot54>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*54,255/61*54,255/61*54)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle234)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle234)
/ erase = false
</shape>
 
<shape dot55>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*55,255/61*55,255/61*55)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle240)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle240)
/ erase = false
</shape>
 
<shape dot56>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*56,255/61*56,255/61*56)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle246)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle246)
/ erase = false
</shape>
 
<shape dot57>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*57,255/61*57,255/61*57)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle252)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle252)
/ erase = false
</shape>
 
<shape dot58>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*58,255/61*58,255/61*58)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle258)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle258)
/ erase = false
</shape>
 
<shape dot59>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*59,255/61*59,255/61*59)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle264)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle264)
/ erase = false
</shape>
 
<shape dot60>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*60,255/61*60,255/61*60)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle270)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle270)
/ erase = false
</shape>

<shape blacksquare>
/ shape = rectangle
/ size = (25%,25%)
/ color = (0,0,0)
/ position = (0%, 0%)
/ erase = false
</shape>

<shape whitesquare>
/ shape = rectangle
/ size = (25%,25%)
/ color = (255,255,255)
/ position = (0%, 0%)
/ erase = false
</shape>

<text pos>
/ items = ("<%values.circle_x%>, <%values.circle_y%>")
/ erase = false
/ position = (50%,50%)
</text>

<text rt_shifted>
/ items = ("<%values.rt_shifted%>")
/ erase = false
/ position = (50%,50%)
</text>


<text scrfunc>
/ items = ("<%values.scrfunc%>")
/ erase = false
/ position = (50%,50%)
</text>

<text ntrials>
/ items = ("<%values.chooseFog%>")
/ erase = false
/ position = (50%,60%)
</text>

<text cloudPos>
/ items = ("<%values.fogPos1%>")
/ erase = false
/ position = (40%,60%)
</text>

<text instructions1>
/ items = instructions1
/ select = 1
/ position = (50%, 35%)
/ fontstyle = ("Arial", 2%)
/ size = (90%, 90%)
/ hjustify = left
/ valign = top
</text>

<block instructions> 
/ trials = [1=instructions1, instructions2, instructions2_5, instructions3, instructions4, countdown]
</block>


<trial instructions1>
/ stimulusframes = [1=instructions1, sampleMushroomL, sampleMushroomR, next]
/ validresponse = (next)
</trial>

<text goodJob>
/ items = ("Good Job!")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<trial displayGoodJob>
/ stimulusframes = [1=goodJob, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60, next]
/ validresponse = (next)
</trial>

<trial instructions2>
/ stimulustimes = [0=instructions2, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60;

1000 = instructions2, animatedCircle, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60]

/ inputdevice = keyboard
/ beginresponsetime = 1000
/ validresponse = (" ") 
/ recorddata = FALSE
/ branch = [
	return trial.displayGoodJob;
]
</trial>

<text instructions2_5>
/ items = ("If you don't respond
in 6.5s, you will run out of fuel
and get no mushrooms")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

< trial instructions2_5>
/ stimulustimes = [0=instructions2_5, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60;

1000 = instructions2_5, animatedCircle, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60]

/ timeout = 7500
/ recorddata = FALSE
/ branch = [
	return trial.feedback2_5;
]
</trial>

<trial feedback2_5>
/ ontrialbegin = [
	picture.feedback.item.1 = "timeout.png";
	values.Earnings = 0;
]

/ stimulusframes = [
	1=picture.feedback, text.feedback1, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60;
]
/ trialduration = 3000
</trial>

<trial instructions3>
/ stimulusframes = [1=instructions3, next]
/ validresponse = (next)
</trial>

<text sampleResponse>
/ items = (" ")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 50%)
/ vjustify = center
/ hjustify = left
</text>

<trial instructions4>
/ ontrialbegin = [
	picture.uncertainty.item.1 = "fog20.png";
	picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle120;
	picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle120;
	values.startPos = 75;
]

/ stimulustimes = [0=instructions4, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60,
uncertainty;

1000 = instructions4, animatedCircle, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60,
uncertainty]

/ inputdevice = keyboard
/ beginresponsetime = 1000
/ validresponse = (" ") 
/ responseinterrupt = immediate
/ branch = [
	return trial.sampleResponse;
]
</trial>


<text latencyTest>
/ items = ("<% trial.instructions4.latency%>")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<text latencyTest2>
/ items = ("<% values.rt_shifted%>")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<text magTest>
/ items = ("<% values.mag%>")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>


<text chooseUncertainty>
/ items = ("<% values.chooseUncertainty%>")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<trial sampleResponse>
/ ontrialbegin = [
	if (values.startPos >= 0 && values.startPos < 75) {
		values.rt_shifted = mod(values.gamma*(values.startPos+25)+trial.instructions4.latency,values.time_per_revolution);
	} else if (values.startPos >= 75) {
		values.rt_shifted = mod(values.gamma*(values.startPos-75)+trial.instructions4.latency,values.time_per_revolution);
	}
	if (values.rt_shifted > 2652 && values.rt_shifted < 3298) {
		text.sampleResponse.items.1 = "Good Job!"
	} else if (values.rt_shifted <= 2652 || values.rt_shifted >= 3298) {
		text.sampleResponse.items.1 = "Try Again!"
	}
]
/ stimulustimes = [0=sampleResponse, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60,
uncertainty;
]
/ timeout = 3000
/ branch = [
	if (values.rt_shifted  > 2652 && values.rt_shifted  < 3298) {
		trial.instructions5;
	} else {
		trial.instructions4;
	}
]
</trial>

<trial instructions5>
/ stimulusframes = [1=instructions5, next]
/ validresponse = (next)
</trial>


<text three>
/ items = ("3")
/ fontstyle = ("Arial", 12%, false, false, false, false, 5, 238)
/ position = (50%, 50%)
/ vjustify = center
/ hjustify = left
</text>

<text two>
/ items = ("2")
/ fontstyle = ("Arial", 12%, false, false, false, false, 5, 238)
/ position = (50%, 50%)
/ vjustify = center
/ hjustify = left
</text>

<text one>
/ items = ("1")
/ fontstyle = ("Arial", 12%, false, false, false, false, 5, 238)
/ position = (50%, 50%)
/ vjustify = center
/ hjustify = left
</text>

<trial countdown>
/ stimulustimes = [0=three;1000=two;2000=one]
/ timeout = 3000
</trial>


<block experiment>
/ onblockbegin = [
	//values.scrfunc = noreplace("IEV","DEV","CEV","CEVR","IEV","DEV","IEV","DEV");
	values.scrfunc = "DEV";
	parameters.ntrials = round(rand(32, 43));
	list.triallist_noU.poolsize = parameters.ntrials;
	list.triallist_U.poolsize = parameters.ntrials;
	values.blockCount = values.blockCount + 1;
	values.trialCount = 0;
	values.trialCountTotal = values.trialCountTotal + parameters.ntrials;
	// local uncertainty manipulation starts on trial N
	values.uncertaintyStart1 = noreplace(5,6,7,8,9,10,11,12);
	values.uncertaintyStart2 = noreplace(24,25,26,27,28,29,30,31);
	//values.uncertaintyStart = 1;
	//values.uncertaintyStart1 = 2;
	//values.uncertaintyStart2 = 14;
	values.nUncertainty1 = values.uncertaintyStart1 + 10;
	values.nUncertainty2 = values.uncertaintyStart2 + 10;
	values.chooseUncertainty1 = 0;
	values.chooseUncertainty2 = 0;
	values.uncertaintyCount1 = 0;
	values.uncertaintyCount2 = 0;
	// determine position of fog
	values.fogPos1 = noreplace(1,5,10,15,20,25,30,35,40,45,50);
	values.fogPos2 = noreplace(1,5,10,15,20,25,30,35,40,45,50);
	//values.fogPos = 50;
	
	
]
/ stop = [
	values.trialCount >= parameters.ntrials
]
/ trials = [1=list.triallist_noU]
</block>

<list triallist_noU>
/ items = (trial.experiment_noU)
/ poolsize = parameters.ntrials*2
</list>

<list triallist_U>
/ items = (trial.experiment_U)
/ poolsize = parameters.ntrials*2
</list>

<trial experiment_noU>
/ ontrialbegin = [
	values.mag = NULL;
	values.freq = NULL;
	values.ev = NULL;
	values.inc = NULL;
	values.rng = NULL;
	values.n_revolutions = 0;
	if (parameters.randStart==TRUE) {
		values.startPos =  round(rand(0, 100));
	}
]

/ stimulustimes = [0 = whitesquare, planet, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60; 

1000 = planet, blacksquare, animatedCircle, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60;
]

/ inputdevice = keyboard
/ beginresponsetime = 1000
/ timeout = 7500
/ validresponse = (" ") 
/ responseinterrupt = immediate
/ recorddata = true
/ ontrialend = [
	values.circle_x = picture.animatedCircle.xpct;
	values.circle_y = picture.animatedCircle.ypct;
	values.n_revolutions = ipart(script.elapsedtime - picture.animatedCircle.timestamp/values.time_per_revolution);
	return true;
]
/ branch = [
	return trial.dispFeedback_noU;
]
</trial>

<trial experiment_U>
/ ontrialbegin = [
	values.mag = NULL;
	values.freq = NULL;
	values.ev = NULL;
	values.inc = NULL;
	values.rng = NULL;
	values.n_revolutions = 0;
	if (parameters.randStart==TRUE) {
		values.startPos =  round(rand(0, 100));
	}
	if (values.uncertainty_block==1) {
		if (values.fogPos1==1) {
			picture.uncertainty.item.1 = "fog0.png";
			picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle270;
			picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle270;
		} else if (values.fogPos1==5) {
			picture.uncertainty.item.1 = "fog5.png";
			picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle210;
			picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle210;
		} else if (values.fogPos1==10) {
			picture.uncertainty.item.1 = "fog10.png";
			picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle180;
			picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle180;
		} else if (values.fogPos1==15) {
			picture.uncertainty.item.1 = "fog15.png";
			picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle150;
			picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle150;
		} else if (values.fogPos1==20) {
			picture.uncertainty.item.1 = "fog20.png";
			picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle120;
			picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle120;
		} else if (values.fogPos1==25) {
			picture.uncertainty.item.1 = "fog25.png";
			picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle90;
			picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle90;
		} else if (values.fogPos1==30) {
			picture.uncertainty.item.1 = "fog30.png";
			picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle60;
			picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle60;
		} else if (values.fogPos1==35) {
			picture.uncertainty.item.1 = "fog35.png";
			picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle30;
			picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle30;
		} else if (values.fogPos1==40) {
			picture.uncertainty.item.1 = "fog40.png";
			picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle0;
			picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle0;
		} else if (values.fogPos1==45) {
			picture.uncertainty.item.1 = "fog45.png";
			picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle330;
			picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle330;
		} else if (values.fogPos1==50) {
			picture.uncertainty.item.1 = "fog50.png";
			picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle300;
			picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle300;
		}
	} else if (values.uncertainty_block==2) {
		if (values.fogPos2==1) {
			picture.uncertainty.item.1 = "fog0.png";
			picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle270;
			picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle270;
		} else if (values.fogPos2==5) {
			picture.uncertainty.item.1 = "fog5.png";
			picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle210;
			picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle210;
		} else if (values.fogPos2==10) {
			picture.uncertainty.item.1 = "fog10.png";
			picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle180;
			picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle180;
		} else if (values.fogPos2==15) {
			picture.uncertainty.item.1 = "fog15.png";
			picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle150;
			picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle150;
		} else if (values.fogPos2==20) {
			picture.uncertainty.item.1 = "fog20.png";
			picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle120;
			picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle120;
		} else if (values.fogPos2==25) {
			picture.uncertainty.item.1 = "fog25.png";
			picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle90;
			picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle90;
		} else if (values.fogPos2==30) {
			picture.uncertainty.item.1 = "fog30.png";
			picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle60;
			picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle60;
		} else if (values.fogPos2==35) {
			picture.uncertainty.item.1 = "fog35.png";
			picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle30;
			picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle30;
		} else if (values.fogPos2==40) {
			picture.uncertainty.item.1 = "fog40.png";
			picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle0;
			picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle0;
		} else if (values.fogPos2==45) {
			picture.uncertainty.item.1 = "fog45.png";
			picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle330;
			picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle330;
		} else if (values.fogPos2==50) {
			picture.uncertainty.item.1 = "fog50.png";
			picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle300;
			picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle300;
		}
	}
]

/ stimulustimes = [0 = whitesquare, planet, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60,
uncertainty; 

1000 = planet, blacksquare, animatedCircle, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60,
uncertainty;
]

/ inputdevice = keyboard
/ beginresponsetime = 1000
/ timeout = 7500
/ validresponse = (" ") 
/ responseinterrupt = immediate
/ recorddata = true
/ ontrialend = [
	values.circle_x = picture.animatedCircle.xpct;
	values.circle_y = picture.animatedCircle.ypct;
	values.n_revolutions = ipart(script.elapsedtime - picture.animatedCircle.timestamp/values.time_per_revolution);
	return true;
]
/ branch = [
	return trial.dispFeedback_U;
]
</trial>


<trial dispFeedback_noU>
/ ontrialbegin = [
	if (parameters.rtvspos=="RT") {
		if (values.scrfunc == "CEV") {
			values.mag = (values.k * values.rt_extended)/(values.rt_extended-(trial.experiment_noU.latency+values.Shift));
			values.freq = 1-((trial.experiment_noU.latency+values.Shift)/values.rt_extended);
		} else if (values.scrfunc == "DEV") {
			values.temp = values.DEV_factor2*(trial.experiment_noU.latency+values.Shift);
			values.mag = values.DEV_factor*ln(values.temp);
			values.CEV_x = 1-((trial.experiment_noU.latency+values.Shift)/values.rt_extended);
			values.IEV_x = values.CEV_x + (values.CEV_x*(values.sin_factor*sin((trial.experiment_noU.latency*m_pi)/values.time_per_revolution)));
			values.freq = (2*values.CEV_x)-values.IEV_x;
		} else if (values.scrfunc =="IEV") {
			values.CEV_x = (values.k*values.rt_extended)/(values.rt_extended-(trial.experiment_noU.latency+values.Shift));
			values.temp = values.DEV_factor2*(trial.experiment_noU.latency+values.Shift);
			values.DEV_x = values.DEV_factor*ln(values.temp);
			values.mag = (2*values.CEV_x) - values.DEV_x;
			values.CEV_x2 = 1-((trial.experiment_noU.latency+values.Shift)/values.rt_extended);
			values.freq = values.CEV_x2 + (values.CEV_x2*(values.sin_factor*sin((trial.experiment_noU.latency*m_pi)/values.time_per_revolution)));
		} else if (values.scrfunc =="CEVR") {
			values.mag = 1-((trial.experiment_noU.latency+values.Shift)/values.rt_extended);
			values.mag = values.mag*200;
			values.freq = (values.k*values.rt_extended)/(values.rt_extended-(trial.experiment_noU.latency+values.Shift));
			values.freq = values.freq/200;
		}
	} else if (parameters.rtvspos=="POS") {
		if (values.startPos >= 0 && values.startPos < 75) {
			values.rt_shifted = mod(values.gamma*(values.startPos+25)+trial.experiment_noU.latency,values.time_per_revolution);
		} else if (values.startPos >= 75) {
			values.rt_shifted = mod(values.gamma*(values.startPos-75)+trial.experiment_noU.latency,values.time_per_revolution);
		}
		if (values.scrfunc == "CEV") {
			values.mag = (values.k * values.rt_extended)/(values.rt_extended-(values.rt_shifted+values.Shift));
			values.freq = 1-((values.rt_shifted+values.Shift)/values.rt_extended);
		} else if (values.scrfunc == "DEV") {
			values.temp = values.DEV_factor2*(values.rt_shifted+values.Shift);
			values.mag = values.DEV_factor*ln(values.temp);
			values.CEV_x = 1-((values.rt_shifted+values.Shift)/values.rt_extended);
			values.IEV_x = values.CEV_x + (values.CEV_x*(values.sin_factor*sin((values.rt_shifted*m_pi)/values.time_per_revolution)));
			values.freq = (2*values.CEV_x)-values.IEV_x;
		} else if (values.scrfunc =="IEV") {
			values.CEV_x = (values.k*values.rt_extended)/(values.rt_extended-(values.rt_shifted+values.Shift));
			values.temp = values.DEV_factor2*(values.rt_shifted+values.Shift);
			values.DEV_x = values.DEV_factor*ln(values.temp);
			values.mag = (2*values.CEV_x) - values.DEV_x;
			values.CEV_x2 = 1-((values.rt_shifted+values.Shift)/values.rt_extended);
			values.freq = values.CEV_x2 + (values.CEV_x2*(values.sin_factor*sin((values.rt_shifted*m_pi)/values.time_per_revolution)));
		} else if (values.scrfunc =="CEVR") {
			values.mag = 1-((values.rt_shifted+values.Shift)/values.rt_extended);
			values.mag = values.mag*200;
			values.freq = (values.k*values.rt_extended)/(values.rt_extended-(values.rt_shifted+values.Shift));
			values.freq = values.freq/200;
		}
	}
	values.r = round(rand(values.a, values.b));
	values.mag = values.mag + values.r;
	values.ev = values.mag * values.freq;
	values.mag = round(values.mag);
	values.rng = rand(0,1); 
	if (values.freq >= values.rng) {
		values.inc = values.mag;
	} else {
		values.inc = 1;
	}
	//values.inc = values.mag;
	values.totalPoints = values.totalPoints + values.inc;
	// convert points to 'mushroom/troll' units
	if (parameters.mushrooms==TRUE && trial.experiment_noU.response != 0) {
		if (values.inc > 0 && values.inc <= 24) {
			picture.feedback.item.1 = "mushrooms1.png";
			values.Earnings = 0.5;
			values.totalEarnings = values.totalEarnings + values.Earnings;
		} else if (values.inc > 24 && values.inc <= 32) {
			values.Earnings = 1;
			values.totalEarnings = values.totalEarnings + values.Earnings;
			picture.feedback.item.1 = "mushrooms2.png";
		} else if (values.inc > 32 && values.inc <= 46) {
			values.Earnings = 1.5;
			values.totalEarnings = values.totalEarnings + values.Earnings;
			picture.feedback.item.1 = "mushrooms3.png";
		} else if (values.inc > 46 && values.inc <= 60) {
			values.Earnings = 2;
			values.totalEarnings = values.totalEarnings + values.Earnings;
			picture.feedback.item.1 = "mushrooms4.png";
		} else if (values.inc > 60 && values.inc <= 74) {
			values.Earnings = 2.5;
			values.totalEarnings = values.totalEarnings + values.Earnings;
			picture.feedback.item.1 = "mushrooms5.png";
		} else if (values.inc > 74 && values.inc <= 88) {
			values.Earnings = 3;
			values.totalEarnings = values.totalEarnings + values.Earnings;
			picture.feedback.item.1 = "mushrooms6.png";
		} else if (values.inc > 88 && values.inc <= 102) {
			values.Earnings = 3.5;
			values.totalEarnings = values.totalEarnings + values.Earnings;
			picture.feedback.item.1 = "mushrooms7.png";
		} else if (values.inc > 102 && values.inc <= 124) {
			values.Earnings = 4;
			values.totalEarnings = values.totalEarnings + values.Earnings;
			picture.feedback.item.1 = "mushrooms8.png";
		} else if (values.inc > 124 && values.inc <= 136) {
			values.Earnings = 4.5;
			values.totalEarnings = values.totalEarnings + values.Earnings;
			picture.feedback.item.1 = "mushrooms9.png";
		} else if (values.inc > 136) {
			values.Earnings = 5;
			values.totalEarnings = values.totalEarnings + values.Earnings;
			picture.feedback.item.1 = "mushrooms10.png";
		} else if (values.inc ==0) {
			values.Earnings = 0;
			values.totalEarnings = values.totalEarnings + values.Earnings;
			picture.feedback.item.1 = "no_mushrooms.png";
		}
	} else {
		values.Earnings = 0;
		picture.feedback.item.1 = "timeout.png"
	}
	values.trialCount  += 1;
]
/ stimulusframes = [
	1= picture.feedback, text.feedback1,dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60,text.magtest;
]
/trialduration = 1000
// correctresponse = (next)
/ recorddata = true
/ ontrialend = [
	if (values.trialCount >= values.uncertaintyStart1 && values.uncertaintyCount1 < values.nUncertainty1 && values.chooseUncertainty1 <= 3) {
		values.uncertainty_block=1;
	} else if (values.trialCount >= values.uncertaintyStart2 && values.uncertaintyCount2 < values.nUncertainty2 && values.chooseUncertainty2 <= 3) {
		values.uncertainty_block=2;
	} else {
		values.uncertainty_block=0;
	}
]
/ branch = [
	if (values.trialCount >= values.uncertaintyStart1 && values.uncertaintyCount1 < values.nUncertainty1 && values.chooseUncertainty1 <= 3) {
		list.triallist_U.nextvalue
	} else if (values.trialCount >= values.uncertaintyStart2 && values.uncertaintyCount2 < values.nUncertainty2 && values.chooseUncertainty2 <= 3) {
		list.triallist_U.nextvalue
	} else {
		list.triallist_noU.nextvalue
	}
]
</trial>

<text testUct>
/ items = ("trCt =<%values.trialCount%> uSt1=<%values.uncertaintyStart1%> uCt1=<%values.uncertaintyCount1%> nU1=<%values.nUncertainty1%>, cU1=<%values.chooseUncertainty1%>")
</text>

<text rng>
/ items = ("RT = <%values.rt_shifted%> Mag = <% values.mag%> Freq = <%values.freq%>")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (40%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<text chooseFog>
/ items = ("<% values.chooseFog2%>")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<trial dispFeedback_U>
/ ontrialbegin = [
	values.chooseFog1 = 0;
	values.chooseFog2 = 0;
	if (parameters.rtvspos=="RT") {
		if (values.scrfunc == "CEV") {
			values.mag = (values.k * values.rt_extended)/(values.rt_extended-(trial.experiment_U.latency+values.Shift));
			values.freq = 1-((trial.experiment_U.latency+values.Shift)/values.rt_extended);
		} else if (values.scrfunc == "DEV") {
			values.temp = values.DEV_factor2*(trial.experiment_U.latency+values.Shift);
			values.mag = values.DEV_factor*ln(values.temp);
			values.CEV_x = 1-((trial.experiment_U.latency+values.Shift)/values.rt_extended);
			values.IEV_x = values.CEV_x + (values.CEV_x*(values.sin_factor*sin((trial.experiment_U.latency*m_pi)/values.time_per_revolution)));
			values.freq = (2*values.CEV_x)-values.IEV_x;
		} else if (values.scrfunc =="IEV") {
			values.CEV_x = (values.k*values.rt_extended)/(values.rt_extended-(trial.experiment_U.latency+values.Shift));
			values.temp = values.DEV_factor2*(trial.experiment_U.latency+values.Shift);
			values.DEV_x = values.DEV_factor*ln(values.temp);
			values.mag = (2*values.CEV_x) - values.DEV_x;
			values.CEV_x2 = 1-((trial.experiment_U.latency+values.Shift)/values.rt_extended);
			values.freq = values.CEV_x2 + (values.CEV_x2*(values.sin_factor*sin((trial.experiment_U.latency*m_pi)/values.time_per_revolution)));
		} else if (values.scrfunc =="CEVR") {
			values.mag = 1-((trial.experiment_U.latency+values.Shift)/values.rt_extended);
			values.mag = values.mag*200;
			values.freq = (values.k*values.rt_extended)/(values.rt_extended-(trial.experiment_U.latency+values.Shift));
			values.freq = values.freq/200;
		}
	} else if (parameters.rtvspos=="POS") {
		if (values.startPos >= 0 && values.startPos < 75) {
			values.rt_shifted = mod(values.gamma*(values.startPos+25)+trial.experiment_U.latency,values.time_per_revolution);
		} else if (values.startPos >= 75) {
			values.rt_shifted = mod(values.gamma*(values.startPos-75)+trial.experiment_U.latency,values.time_per_revolution);
		}
		if (values.scrfunc == "CEV") {
			values.mag = (values.k * values.rt_extended)/(values.rt_extended-(values.rt_shifted+values.Shift));
			values.freq = 1-((values.rt_shifted+values.Shift)/values.rt_extended);
		} else if (values.scrfunc == "DEV") {
			values.temp = values.DEV_factor2*(values.rt_shifted+values.Shift);
			values.mag = values.DEV_factor*ln(values.temp);
			values.CEV_x = 1-((values.rt_shifted+values.Shift)/values.rt_extended);
			values.IEV_x = values.CEV_x + (values.CEV_x*(values.sin_factor*sin((values.rt_shifted*m_pi)/values.time_per_revolution)));
			values.freq = (2*values.CEV_x)-values.IEV_x;
		} else if (values.scrfunc =="IEV") {
			values.CEV_x = (values.k*values.rt_extended)/(values.rt_extended-(values.rt_shifted+values.Shift));
			values.temp = values.DEV_factor2*(values.rt_shifted+values.Shift);
			values.DEV_x = values.DEV_factor*ln(values.temp);
			values.mag = (2*values.CEV_x) - values.DEV_x;
			values.CEV_x2 = 1-((values.rt_shifted+values.Shift)/values.rt_extended);
			values.freq = values.CEV_x2 + (values.CEV_x2*(values.sin_factor*sin((values.rt_shifted*m_pi)/values.time_per_revolution)));
		} else if (values.scrfunc =="CEVR") {
			values.mag = 1-((values.rt_shifted+values.Shift)/values.rt_extended);
			values.mag = values.mag*200;
			values.freq = (values.k*values.rt_extended)/(values.rt_extended-(values.rt_shifted+values.Shift));
			values.freq = values.freq/200;
		}
	}
	values.r = round(rand(values.a, values.b));
	values.mag = values.mag + values.r;
	values.ev = values.mag * values.freq;
	values.mag = round(values.mag);
	values.rng = rand(0,1);  // decrease probability of omission
	if (values.freq >= values.rng) {
		values.inc = values.mag;
	} else {
		values.inc = 1;
	}
	//values.inc = values.mag;
	values.totalPoints = values.totalPoints + values.inc;
	// convert points to 'mushroom/troll' units
	if (parameters.mushrooms==TRUE  && trial.experiment_U.response != 0) {
		if (values.inc > 0 && values.inc <= 24) {
			picture.feedback.item.1 = "mushrooms1.png";
			values.Earnings = 0.5;
			values.totalEarnings = values.totalEarnings + values.Earnings;
		} else if (values.inc > 24 && values.inc <= 32) {
			values.Earnings = 1;
			values.totalEarnings = values.totalEarnings + values.Earnings;
			picture.feedback.item.1 = "mushrooms2.png";
		} else if (values.inc > 32 && values.inc <= 46) {
			values.Earnings = 1.5;
			values.totalEarnings = values.totalEarnings + values.Earnings;
			picture.feedback.item.1 = "mushrooms3.png";
		} else if (values.inc > 46 && values.inc <= 60) {
			values.Earnings = 2;
			values.totalEarnings = values.totalEarnings + values.Earnings;
			picture.feedback.item.1 = "mushrooms4.png";
		} else if (values.inc > 60 && values.inc <= 74) {
			values.Earnings = 2.5;
			values.totalEarnings = values.totalEarnings + values.Earnings;
			picture.feedback.item.1 = "mushrooms5.png";
		} else if (values.inc > 74 && values.inc <= 88) {
			values.Earnings = 3;
			values.totalEarnings = values.totalEarnings + values.Earnings;
			picture.feedback.item.1 = "mushrooms6.png";
		} else if (values.inc > 88 && values.inc <= 102) {
			values.Earnings = 3.5;
			values.totalEarnings = values.totalEarnings + values.Earnings;
			picture.feedback.item.1 = "mushrooms7.png";
		} else if (values.inc > 102 && values.inc <= 124) {
			values.Earnings = 4;
			values.totalEarnings = values.totalEarnings + values.Earnings;
			picture.feedback.item.1 = "mushrooms8.png";
		} else if (values.inc > 124 && values.inc <= 136) {
			values.Earnings = 4.5;
			values.totalEarnings = values.totalEarnings + values.Earnings;
			picture.feedback.item.1 = "mushrooms9.png";
		} else if (values.inc > 136) {
			values.Earnings = 5;
			values.totalEarnings = values.totalEarnings + values.Earnings;
			picture.feedback.item.1 = "mushrooms10.png";
		} else if (values.inc ==0) {
			values.Earnings = 0;
			values.totalEarnings = values.totalEarnings + values.Earnings;
			picture.feedback.item.1 = "no_mushrooms.png";
		}
	} else {
		values.Earnings = 0;
		picture.feedback.item.1 = "timeout.png"
	}
	if (values.uncertainty_block==1) {
		values.uncertaintyCount1 +=1;
		if (values.fogPos1==1 && values.rt_shifted > 4677 || values.rt_shifted < 323) {
			values.chooseFog1 = 1;
			values.chooseUncertainty1 += 1;
		} else if (values.fogPos1==5 && (values.rt_shifted > 3927 || values.rt_shifted < 4573)) {
			values.chooseFog1 = 1;
			values.chooseUncertainty1 += 1;
		} else if (values.fogPos1==10 && values.rt_shifted > 3502 && values.rt_shifted < 4148) {
			values.chooseFog1 = 1;
			values.chooseUncertainty1 += 1;
		} else if (values.fogPos1==15 && values.rt_shifted > 3077 && values.rt_shifted < 3723) {
			values.chooseFog1 = 1;
			values.chooseUncertainty1 += 1;
		} else if (values.fogPos1==20 && values.rt_shifted > 2652 && values.rt_shifted < 3298) {
			values.chooseFog1 = 1;
			values.chooseUncertainty1 += 1;
		} else if (values.fogPos1==25 && values.rt_shifted > 2227 && values.rt_shifted < 2873) {
			values.chooseFog1 = 1;
			values.chooseUncertainty1 += 1;
		} else if (values.fogPos1==30 && values.rt_shifted > 1802 && values.rt_shifted < 2448) {
			values.chooseFog1 = 1;
			values.chooseUncertainty1 += 1;
		} else if (values.fogPos1==35 && values.rt_shifted > 1377 && values.rt_shifted < 2023) {
			values.chooseFog1 = 1;
			values.chooseUncertainty1 += 1;
		} else if (values.fogPos1==40 && (values.rt_shifted > 952 || values.rt_shifted < 1598)) {
			values.chooseFog1 = 1;
			values.chooseUncertainty1 += 1;
		} else if (values.fogPos1==45 && values.rt_shifted > 527 && values.rt_shifted < 1173) {
			values.chooseFog1 = 1;
			values.chooseUncertainty1 += 1;
		} else if (values.fogPos1==50 && values.rt_shifted > 102 && values.rt_shifted < 748) {
			values.chooseFog1 = 1;
			values.chooseUncertainty1 += 1;
		}
	} else if (values.uncertainty_block==2) {
		values.uncertaintyCount2 +=1;
		if (values.fogPos2==1 && values.rt_shifted > 4677 || values.rt_shifted < 323) {
			values.chooseFog2 = 1;
			values.chooseUncertainty2 += 1;
		} else if (values.fogPos2==5 && (values.rt_shifted > 3927 || values.rt_shifted < 4573)) {
			values.chooseFog2 = 1;
			values.chooseUncertainty2 += 1;
		} else if (values.fogPos2==10 && values.rt_shifted > 3502 && values.rt_shifted < 4148) {
			values.chooseFog2 = 1;
			values.chooseUncertainty2 += 1;
		} else if (values.fogPos2==15 && values.rt_shifted > 3077 && values.rt_shifted < 3723) {
			values.chooseFog2 = 1;
			values.chooseUncertainty2 += 1;
		} else if (values.fogPos2==20 && values.rt_shifted > 2652 && values.rt_shifted < 3298) {
			values.chooseFog2 = 1;
			values.chooseUncertainty2 += 1;
		} else if (values.fogPos2==25 && values.rt_shifted > 2227 && values.rt_shifted < 2873) {
			values.chooseFog2 = 1;
			values.chooseUncertainty2 += 1;
		} else if (values.fogPos2==30 && values.rt_shifted > 1802 && values.rt_shifted < 2448) {
			values.chooseFog2 = 1;
			values.chooseUncertainty2 += 1;
		} else if (values.fogPos2==35 && values.rt_shifted > 1377 && values.rt_shifted < 2023) {
			values.chooseFog2 = 1;
			values.chooseUncertainty2 += 1;
		} else if (values.fogPos2==40 && (values.rt_shifted > 952 || values.rt_shifted < 1598)) {
			values.chooseFog2 = 1;
			values.chooseUncertainty2 += 1;
		} else if (values.fogPos2==45 && values.rt_shifted > 527 && values.rt_shifted < 1173) {
			values.chooseFog2 = 1;
			values.chooseUncertainty2 += 1;
		} else if (values.fogPos2==50 && values.rt_shifted > 102 && values.rt_shifted < 748) {
			values.chooseFog2 = 1;
			values.chooseUncertainty2 += 1;
		}
	}
	values.trialCount  += 1;
]
/ stimulusframes = [
	1= picture.feedback, text.feedback1,dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60, text.magtest;
]
/ trialduration = 1000
// correctresponse = (next)
/ recorddata = true
/ ontrialend = [
	if (values.trialCount >= values.uncertaintyStart1 && values.uncertaintyCount1 < values.nUncertainty1 && values.chooseUncertainty1 <= 3) {
		values.uncertainty_block=1;
	} else if (values.trialCount >= values.uncertaintyStart2 && values.uncertaintyCount2 < values.nUncertainty2 && values.chooseUncertainty2 <= 3) {
		values.uncertainty_block=2;
	} else {
		values.uncertainty_block=0;
	}
]
/ branch = [
	if (values.trialCount >= values.uncertaintyStart1 && values.uncertaintyCount1 < values.nUncertainty1 && values.chooseUncertainty1 <= 3) {
		list.triallist_U.nextvalue
	} else if (values.trialCount >= values.uncertaintyStart2 && values.uncertaintyCount2 < values.nUncertainty2 && values.chooseUncertainty2 <= 3) {
		list.triallist_U.nextvalue
	} else {
		list.triallist_noU.nextvalue
	}
]
</trial>


<block endscreen>
/ trials = [
	1=endscreen;
]
</block>

<trial endscreen>
/ ontrialbegin = [
	values.mag = NULL;
	values.freq = NULL;
	values.ev = NULL;
	values.inc = NULL;
	values.rng = NULL;
	values.Earnings = NULL;
]

/ stimulusframes = [
	1=payment
]
/ timeout = 5000
</trial>

**************************************************************************************************************
**************************************************************************************************************
	QUESTIONAIRRE
**************************************************************************************************************
**************************************************************************************************************

<parameters>
/ pageinstructions = "Please indicate your understanding by answering the following 4 questions:"
</parameters>


<surveypage FCQ_S1>
/ caption = "<%parameters.pageinstructions%>"
/ questions = [1 = q1, q2, q3, q4]
</surveypage>

<radiobuttons q1>
/ caption = "1. How confident were you that you were able to find the best location?"
/ options = ("Always","Sometimes","Rarely","Never")
/ optionvalues = ("1", "2", "3", "4")
/ required = true
/ orientation = horizontalequal
</radiobuttons>

<radiobuttons q2>
/ caption = "2. When landing on the cloud did you expect to find a different number of mushrooms?"
/ options = ("Yes","No","Didn't land on the cloud")
/ optionvalues = ("1", "2","3")
/ required = true
/ orientation = horizontalequal
</radiobuttons>

<radiobuttons q3>
/ caption = "3. True or False: My past choices influenced the outcome of my current choice"
/ options = ("True","False")
/ optionvalues = ("1", "2")
/ required = true
/ orientation = horizontalequal
</radiobuttons>

<radiobuttons q4>
/ caption = "4. True or False: I enjoyed playing this game"
/ options = ("True","False")
/ optionvalues = ("1", "2")
/ required = true
/ orientation = horizontalequal
</radiobuttons>

<survey questionnaire>
/ pages = [
	1 = FCQ_S1, openended; 
]
/ screencapture = false
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 1)
/ subcaptionfontstyle = ("Arial", 1.5%, false, false, false, false, 5, 1)
/ itemfontstyle = ("Arial", 3%, true, false, false, false, 5, 1)
/ responsefontstyle = ("Arial", 2.5%, false, false, false, false, 5, 1)
/ txcolor = (0, 0, 0)
/ showpagenumbers = false
/ showquestionnumbers = false
/ showpagenumbers = false
/ showquestionnumbers = false
/ navigationbuttonfontstyle = ("Arial", 3%, false, false, false, false, 5, 1)
/ navigationbuttonsize = (15%, 5%)
/ backbuttonposition = (20%, 90%)
/ nextbuttonposition = (70%, 90%)
/ finishlabel = "Finish"
</survey>



<textbox openended>
/caption = "Please provde feedback that will help us improve the game.
What strategies did you use in the game?"
/mask = ^[a-zA-Z\s]+$
/required = TRUE
/multiline = TRUE
/textboxsize = (200,50)

</textbox>

<surveypage openended>
/questions = [
	1=openended
]

</surveypage>

<block openended>
/ trials = [
	1 = openended
]
</block>

<expt main1>
/ blocks = [
	//1=instructions;
	//2=experiment;
	//3=experiment;
	//4=experiment;
	//5=experiment;
	//6=experiment;
	//7=experiment;
	//8=experiment;
	//9=experiment;
	//10=questionnaire;
	//11=endscreen;
	1=experiment;
]
</expt>
