<expt exp1>
/ blocks = [
	1-10 = experiment;
]
</expt>

<block experiment>
/ onblockbegin = [
	values.block +=1;
	if (values.block==1) {
		values.master_idx = 0;
	}
	values.starttime = script.elapsedtime;
	// need to prepopulate values for this trial into a list with a random selection mode
	list.curr_values.reset();
	list.curr_RTs.reset();
	list.curr_values_temp.reset();
	list.curr_RTs_temp.reset();
	while (list.curr_values.itemcount < 360){
		values.master_idx += 1;
		list.curr_values.appenditem(list.values.nextvalue);
		list.curr_RTs.appenditem(list.RT.nextvalue);
		list.curr_trials.appenditem(list.trial.nextvalue);
		list.curr_values_temp.appenditem(list.values.nextvalue);
		list.curr_RTs_temp.appenditem(list.RT.nextvalue);
	};
	// rewind the master index for trial/RT/values
	values.master_idx = values.master_idx - 360;
	values.i = 0;
	list.lower_half.reset();
	list.upper_half.reset();
	while (values.i < list.curr_values.itemcount) {
		list.curr_values.nextvalue;
		if (list.curr_values.currentvalue < list.curr_values.median) {
			list.lower_half.appenditem(list.curr_values.currentvalue);
		} else if (list.curr_values.currentvalue > list.curr_values.median) {
			list.upper_half.appenditem(list.curr_values.currentvalue);
		}
		values.i += 1;
	};
	values.lower_quartile = list.lower_half.median;
	values.upper_quartile = list.upper_half.median;
	list.era_values.reset();
	list.era_RTs.reset();
	values.j = 0;
	while (values.j < list.curr_values.itemcount){
		list.curr_values.nextvalue;
		list.curr_RTs.nextvalue;
		if (list.curr_values.currentvalue >= values.lower_quartile && list.curr_values.currentvalue <= values.upper_quartile) {
			list.era_values.appenditem(list.curr_values.currentvalue);
			list.era_RTs.appenditem(list.curr_RTs.currentvalue);
		}
		values.j += 1;
	};
	// this will be the value/RT of the erasure	
	values.erasure_index = round(rand(1, list.era_values.itemcount));
	list.era_values.nextindex;
	list.era_RTs.nextindex;
	values.erasure_value = list.era_values.nextvalue;
	values.erasure_RT = list.era_RTs.nextvalue;
	// this works because erasure_RT values come from era_RTs, a list with elements from 1:360, indicating an index that can also be used for degrees, as long as degrees_era is a list from 1:360 (which it should always be)
	// note do NOT append or remove items from degrees_era
	values.deg_index_era = values.erasure_RT;
	list.degrees_era.nextindex;
	// now remove current erasure degree from degrees_era, degrees_att, save into degrees used
	list.degrees_used.appenditem(list.degrees_era.nextvalue);
	values.i = 0;
	while (values.i < list.span_30degrees.itemcount){
		list.span_30degrees.nextvalue;
		list.degrees_used_att.appenditem(list.degrees_era.currentvalue + list.span_30degrees.currentvalue);
		values.i += 1;
	};
	values.j = 0;
	values.k = 0;
	values.deg_index_att = 0;
	while (values.k <= list.degrees_used_att.itemcount) {
		list.degrees_used_att.nextindex;
		while (values.j < list.degrees_att.itemcount){
			values.deg_index_att += 1;
			list.degrees_att.nextindex;
			if (list.degrees_att.currentvalue == list.degrees_used_att.currentvalue) {
				list.degrees_att.removeitem(list.degrees_att.currentindex);
			}
			values.j += 1;
		};
		values.k += 1;
	};
	values.deg_index_att = round(rand(1, list.degrees_att.itemcount));
	list.degrees_att.nextindex;
	// now we need to add back the degrees_att from degrees_used_att and remove block N-2'nd degrees_used to pool for erasures
	if (list.degrees_used.itemcount > 1) {
		// remove the first item from the list, allow re-erasure of erasure from N-2'nd block
		list.degrees_used.removeitem(1);
	}
	values.i = 1;
	while (list.degrees_used_att.itemcount > 31){
		// removing i'th item from degrees_used_att means that the 1'st item in the list will change on each loop iteration
		list.degrees_att.appenditem(list.degrees_used_att.item(1));
		list.degrees_used_att.removeitem(values.i);
		values.i += 1;
	};
	values.temp_index = 0;
	list.erasure_RTs.reset();
	// generate sequence of indices to map onto erasure
	values.i = 0;
	while (list.erasure_RTs.itemcount < 31){
		if (values.erasure_RT > 345) {
			values.right_index = max(mod(values.erasure_RT + 15, 360), 1);
			values.left_index = values.erasure_RT - 15;
			// this will be sequential and distance is equal
			// piecewise (x - 15 : x), (x: 360), (1: x + 15)
			if (list.erasure_RTs.itemcount <= 15) {
				list.erasure_RTs.appenditem(values.left_index + values.i);
				values.i += 1;
			} else if (list.erasure_RTs.itemcount == 16) {
				values.i = values.erasure_RT;
				list.erasure_RTs.appenditem(values.i);
			} else if (list.erasure_RTs.itemcount > 16 && values.i < 360) {
				values.i +=1;
				// last i = erasure_RT
				list.erasure_RTs.appenditem(values.i);
			} else if (values.i == 360){
				list.erasure_RTs.appenditem(values.i);
				values.i = 1;
			} else if (values.i > 360) {
				list.erasure_RTs.appenditem(values.i);
				values.i += 1;
			}
		} else if (values.erasure_RT < 16) {
			values.right_index = values.erasure_RT + 15;
			// this will be sequential
			values.left_index = max(mod(values.erasure_RT - 15, 360), 1);
			// piecewise (left_index : 360), (1 : x + 15)
			if (list.erasure_RTs.itemcount < values.left_index){
				list.erasure_RTs.appenditem(values.left_index + values.i); // 3,2,1,...
				values.i -= 1;
			} else if (list.erasure_RTs.itemcount == values.left_index){
				list.erasure_RTs.appenditem(values.left_index);
				values.i = 360;
			} else if (list.erasure_RTs.itemcount > values.left_index){ // 360, 359, 358,... 
				list.erasure_RTs.appenditem(values.i);
				values.i -=1;
			}
			
		} else {
			values.right_index = values.erasure_RT + 15;
			values.left_index = values.erasure_RT - 15;
			// sequential x - 15 : x + 15
			list.erasure_RTs.appenditem(values.erasure_RT - 15 + values.i);
			values.i += 1;
		}
	};
	
	// fixed distance
	values.right_distance = 15;
	values.left_distance = 15;
	
	values.temp_index = values.left_index;
	list.curr_values_temp.nextindex;
	values.left_bound = list.curr_values_temp.nextvalue;
	values.temp_index = values.right_index;
	list.curr_values_temp.nextindex;
	values.right_bound = list.curr_values_temp.nextvalue;
	values.a_left = (values.left_bound - values.erasure_value) / pow(1 - 16, 2);
	values.a_right = (values.right_bound - values.erasure_value) / pow(31 - 16, 2);
	
	values.j = 1;
	list.what_was_erased.reset();
	while (values.j < 32){
		values.temp_index = list.erasure_RTs.item(values.j);
		list.curr_values_temp.nextindex;
		list.what_was_erased.appenditem(list.curr_values_temp.nextvalue);
		values.j += 1;
	};
	list.erasure.reset();
	values.j = 1;
	while (list.erasure.itemcount < 31){
		if (list.erasure.itemcount < 1){
			list.erasure.appenditem(values.left_bound)
		} else if (list.erasure.itemcount >= 1 && list.erasure.itemcount < 16){
			list.erasure.appenditem(values.a_left *pow(values.j - 16,2) + values.erasure_value);
		} else if (list.erasure.itemcount == 16){
			list.erasure.appenditem(values.erasure_value);
		} else if (list.erasure.itemcount > 16){
			list.erasure.appenditem(values.a_right * pow(values.j - 16, 2) + values.erasure_value);
		}
		values.j += 1;
	};
	
	// insert the erasure into the remaining value vector slots
	
	
	
	
	values.elapsedtime = script.elapsedtime - values.starttime;
]

/ trials = [
	1 = trial;
]
</block>

<trial trial>
/ ontrialbegin = [
	list.curr_values.reset();
	list.curr_RTs.reset();
	list.curr_trials.reset();
	// now actually implement erasure, to do this we will replace <list values> at index values.erasure_RT with value values.erasure_value
	// then linear interpolation between endpoints, this will also need to 'flex'
	values.i = 0;
	while (list.curr_RTs.itemcount < 360){
		values.master_idx += 1;
		list.curr_values.appenditem(list.values.nextvalue);
		list.curr_RTs.appenditem(list.RT.nextvalue);
		list.curr_trials.appenditem(list.trial.nextvalue);
		values.i += 1;
	};
]

/ stimulusframes = [1 = test]
/ timeout = 1;
/ recorddata = true

</trial>

<data>
/ columns = (list.curr_values.item(1),list.curr_values.item(2),list.curr_values.item(3),list.curr_values.item(4),list.curr_values.item(5),list.curr_values.item(6),list.curr_values.item(7),list.curr_values.item(8),list.curr_values.item(9),list.curr_values.item(10),list.curr_values.item(11),list.curr_values.item(12),list.curr_values.item(13),list.curr_values.item(14),list.curr_values.item(15),list.curr_values.item(16),list.curr_values.item(17),list.curr_values.item(18),list.curr_values.item(19),list.curr_values.item(20),list.curr_values.item(21),list.curr_values.item(22),list.curr_values.item(23),list.curr_values.item(24),list.curr_values.item(25),list.curr_values.item(26),list.curr_values.item(27),list.curr_values.item(28),list.curr_values.item(29),list.curr_values.item(30),list.curr_values.item(31),list.curr_values.item(32),list.curr_values.item(33),list.curr_values.item(34),list.curr_values.item(35),list.curr_values.item(36),list.curr_values.item(37),list.curr_values.item(38),list.curr_values.item(39),list.curr_values.item(40),list.curr_values.item(41),list.curr_values.item(42),list.curr_values.item(43),list.curr_values.item(44),list.curr_values.item(45),list.curr_values.item(46),list.curr_values.item(47),list.curr_values.item(48),list.curr_values.item(49),list.curr_values.item(50),list.curr_values.item(51),list.curr_values.item(52),list.curr_values.item(53),list.curr_values.item(54),list.curr_values.item(55),list.curr_values.item(56),list.curr_values.item(57),list.curr_values.item(58),list.curr_values.item(59),list.curr_values.item(60),list.curr_values.item(61),list.curr_values.item(62),list.curr_values.item(63),list.curr_values.item(64),list.curr_values.item(65),list.curr_values.item(66),list.curr_values.item(67),list.curr_values.item(68),list.curr_values.item(69),list.curr_values.item(70),list.curr_values.item(71),list.curr_values.item(72),list.curr_values.item(73),list.curr_values.item(74),list.curr_values.item(75),list.curr_values.item(76),list.curr_values.item(77),list.curr_values.item(78),list.curr_values.item(79),list.curr_values.item(80),list.curr_values.item(81),list.curr_values.item(82),list.curr_values.item(83),list.curr_values.item(84),list.curr_values.item(85),list.curr_values.item(86),list.curr_values.item(87),list.curr_values.item(88),list.curr_values.item(89),list.curr_values.item(90),list.curr_values.item(91),list.curr_values.item(92),list.curr_values.item(93),list.curr_values.item(94),list.curr_values.item(95),list.curr_values.item(96),list.curr_values.item(97),list.curr_values.item(98),list.curr_values.item(99),list.curr_values.item(100),list.curr_values.item(101),list.curr_values.item(102),list.curr_values.item(103),list.curr_values.item(104),list.curr_values.item(105),list.curr_values.item(106),list.curr_values.item(107),list.curr_values.item(108),list.curr_values.item(109),list.curr_values.item(110),list.curr_values.item(111),list.curr_values.item(112),list.curr_values.item(113),list.curr_values.item(114),list.curr_values.item(115),list.curr_values.item(116),list.curr_values.item(117),list.curr_values.item(118),list.curr_values.item(119),list.curr_values.item(120),list.curr_values.item(121),list.curr_values.item(122),list.curr_values.item(123),list.curr_values.item(124),list.curr_values.item(125),list.curr_values.item(126),list.curr_values.item(127),list.curr_values.item(128),list.curr_values.item(129),list.curr_values.item(130),list.curr_values.item(131),list.curr_values.item(132),list.curr_values.item(133),list.curr_values.item(134),list.curr_values.item(135),list.curr_values.item(136),list.curr_values.item(137),list.curr_values.item(138),list.curr_values.item(139),list.curr_values.item(140),list.curr_values.item(141),list.curr_values.item(142),list.curr_values.item(143),list.curr_values.item(144),list.curr_values.item(145),list.curr_values.item(146),list.curr_values.item(147),list.curr_values.item(148),list.curr_values.item(149),list.curr_values.item(150),list.curr_values.item(151),list.curr_values.item(152),list.curr_values.item(153),list.curr_values.item(154),list.curr_values.item(155),list.curr_values.item(156),list.curr_values.item(157),list.curr_values.item(158),list.curr_values.item(159),list.curr_values.item(160),list.curr_values.item(161),list.curr_values.item(162),list.curr_values.item(163),list.curr_values.item(164),list.curr_values.item(165),list.curr_values.item(166),list.curr_values.item(167),list.curr_values.item(168),list.curr_values.item(169),list.curr_values.item(170),list.curr_values.item(171),list.curr_values.item(172),list.curr_values.item(173),list.curr_values.item(174),list.curr_values.item(175),list.curr_values.item(176),list.curr_values.item(177),list.curr_values.item(178),list.curr_values.item(179),list.curr_values.item(180),list.curr_values.item(181),list.curr_values.item(182),list.curr_values.item(183),list.curr_values.item(184),list.curr_values.item(185),list.curr_values.item(186),list.curr_values.item(187),list.curr_values.item(188),list.curr_values.item(189),list.curr_values.item(190),list.curr_values.item(191),list.curr_values.item(192),list.curr_values.item(193),list.curr_values.item(194),list.curr_values.item(195),list.curr_values.item(196),list.curr_values.item(197),list.curr_values.item(198),list.curr_values.item(199),list.curr_values.item(200),list.curr_values.item(201),list.curr_values.item(202),list.curr_values.item(203),list.curr_values.item(204),list.curr_values.item(205),list.curr_values.item(206),list.curr_values.item(207),list.curr_values.item(208),list.curr_values.item(209),list.curr_values.item(210),list.curr_values.item(211),list.curr_values.item(212),list.curr_values.item(213),list.curr_values.item(214),list.curr_values.item(215),list.curr_values.item(216),list.curr_values.item(217),list.curr_values.item(218),list.curr_values.item(219),list.curr_values.item(220),list.curr_values.item(221),list.curr_values.item(222),list.curr_values.item(223),list.curr_values.item(224),list.curr_values.item(225),list.curr_values.item(226),list.curr_values.item(227),list.curr_values.item(228),list.curr_values.item(229),list.curr_values.item(230),list.curr_values.item(231),list.curr_values.item(232),list.curr_values.item(233),list.curr_values.item(234),list.curr_values.item(235),list.curr_values.item(236),list.curr_values.item(237),list.curr_values.item(238),list.curr_values.item(239),list.curr_values.item(240),list.curr_values.item(241),list.curr_values.item(242),list.curr_values.item(243),list.curr_values.item(244),list.curr_values.item(245),list.curr_values.item(246),list.curr_values.item(247),list.curr_values.item(248),list.curr_values.item(249),list.curr_values.item(250),list.curr_values.item(251),list.curr_values.item(252),list.curr_values.item(253),list.curr_values.item(254),list.curr_values.item(255),list.curr_values.item(256),list.curr_values.item(257),list.curr_values.item(258),list.curr_values.item(259),list.curr_values.item(260),list.curr_values.item(261),list.curr_values.item(262),list.curr_values.item(263),list.curr_values.item(264),list.curr_values.item(265),list.curr_values.item(266),list.curr_values.item(267),list.curr_values.item(268),list.curr_values.item(269),list.curr_values.item(270),list.curr_values.item(271),list.curr_values.item(272),list.curr_values.item(273),list.curr_values.item(274),list.curr_values.item(275),list.curr_values.item(276),list.curr_values.item(277),list.curr_values.item(278),list.curr_values.item(279),list.curr_values.item(280),list.curr_values.item(281),list.curr_values.item(282),list.curr_values.item(283),list.curr_values.item(284),list.curr_values.item(285),list.curr_values.item(286),list.curr_values.item(287),list.curr_values.item(288),list.curr_values.item(289),list.curr_values.item(290),list.curr_values.item(291),list.curr_values.item(292),list.curr_values.item(293),list.curr_values.item(294),list.curr_values.item(295),list.curr_values.item(296),list.curr_values.item(297),list.curr_values.item(298),list.curr_values.item(299),list.curr_values.item(300),list.curr_values.item(301),list.curr_values.item(302),list.curr_values.item(303),list.curr_values.item(304),list.curr_values.item(305),list.curr_values.item(306),list.curr_values.item(307),list.curr_values.item(308),list.curr_values.item(309),list.curr_values.item(310),list.curr_values.item(311),list.curr_values.item(312),list.curr_values.item(313),list.curr_values.item(314),list.curr_values.item(315),list.curr_values.item(316),list.curr_values.item(317),list.curr_values.item(318),list.curr_values.item(319),list.curr_values.item(320),list.curr_values.item(321),list.curr_values.item(322),list.curr_values.item(323),list.curr_values.item(324),list.curr_values.item(325),list.curr_values.item(326),list.curr_values.item(327),list.curr_values.item(328),list.curr_values.item(329),list.curr_values.item(330),list.curr_values.item(331),list.curr_values.item(332),list.curr_values.item(333),list.curr_values.item(334),list.curr_values.item(335),list.curr_values.item(336),list.curr_values.item(337),list.curr_values.item(338),list.curr_values.item(339),list.curr_values.item(340),list.curr_values.item(341),list.curr_values.item(342),list.curr_values.item(343),list.curr_values.item(344),list.curr_values.item(345),list.curr_values.item(346),list.curr_values.item(347),list.curr_values.item(348),list.curr_values.item(349),list.curr_values.item(350),list.curr_values.item(351),list.curr_values.item(352),list.curr_values.item(353),list.curr_values.item(354),list.curr_values.item(355),list.curr_values.item(356),list.curr_values.item(357),list.curr_values.item(358),list.curr_values.item(359),list.curr_values.item(360)
)

</data>

<text test>
/ position = (50%, 50%)
/ items = ("<%list.curr_values.item(1)%>")
</text>

<values>
/ deg_index_att = NULL;
/ deg_index_era = NULL;
/ rng = NULL;
/ trial = 0;
/ run_trial = 0;
/ run_trial_dum = 0; // dummy counter to avoid extra ITI at the end of blocks
/ stim_idx = NULL;
/ erase_prop = 0.33333;
/ attention_prop = 0.33333;
/ no_erasure_prop = 1 - values.erase_prop - values.attention_prop;
/ block_length = 3;
/ block_length_original = values.block_length;
/ disappear_clicks = 2;
/ timeout_trials = 1;
/ n_trials = 45;
/ n_blocks = floor(values.n_trials / values.block_length)
/ block_type = NULL;
/ block = 0;
/ timeout = 6500; // timeout trials, when the ship runs out of fuel you get 0 mushrooms, in ms
/ time_per_revolution = 5000; // how many ms does it take to go 360 degrees around the circle
/ gamma = values.time_per_revolution/100; // conversion factor for computing rt_shifted (circle position is in units of 0-100)
/ circle_x = 0%;
/ circle_y = 0%;
/ freq = 0.7;
/ conversion = 0.03 / 100;  // cents / number of mushrooms
/ totalEarnings = 0;
/ Earnings = NULL;
/ rt_shifted = 0;
/ pos_shifted = 0;
/ design_file_index = 0;
/ gauss_sd = 0.001;
/ mag = 0;
/ ev = 0;
/ inc = 0;
/ inc_rg = 0;
/ n_revolutions = 0;
/ startPos = 0;
/ choose_stim = NULL;
/ stim_center_deg = NULL;
/ rem0 = NULL;
/ rem1 = NULL;
/ rem2 = NULL;
/ rem3 = NULL;
/ rem4 = NULL;
/ rem5 = NULL;
/ best = NULL;
/ last_block_flag = FALSE;
/ min_rem = NULL;
/ has_erasure = NULL;
/ generate_new_erasure = NULL;
/ total_clicks = 2;
/ n_clicks = NULL;
/ timeout_block = FALSE;
/ timeouts_remain = 1;
/ end_block = NULL;
/ require_attention = NULL;
/ require_erasure = NULL;
/ require_no_erasure = NULL;
/ n_attention = NULL;
/ n_erasure = NULL;
/ n_no_erasure = NULL;
/ n_curr_block = NULL;
/ n_timeout = NULL;

/ trial_index = 1;
/ index = 0;
/ degrees_erasure_index = 0;
/ values_erasure_index = 0;
/ curr_val_era = NULL;
/ curr_index_era = NULL;

/ rt_index = NULL;
/ i = NULL;
/ j = NULL;
/ k = NULL;

/ lower_quartile = NULL;
/ upper_quartile = NULL;

/ erasure_value = NULL;
/ erasure_RT = NULL;
/ erasure_index = NULL;
/ erasure_degrees = NULL;
/ attention_degrees = NULL;
/ erasure_index2 = NULL;

/ rempre = NULL;
/ rempost = NULL;

/ master_idx = NULL;

/ temp_index = NULL;
/ right_index = NULL;
/ left_index = NULL;
/ right_distance = NULL;
/ left_distance = NULL;
/ a_left = NULL;
/ a_right = NULL;
/ left_bound = NULL;
/ right_bound = NULL;

/ starttime = NULL;
/ elapsedtime = NULL;
</values>

<list what_was_erased>
/ selectionrate = always
</list>


<list degrees_att>
/ items = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359)
/ selectionrate = always
/ selectionmode = values.deg_index_att;
</list>

<list degrees_era>
/ items = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359)
/ selectionrate = always
/ selectionmode = values.deg_index_era;
</list>

<list degrees_used>
/ items = ()
/ selectionrate = always
/ selectionmode = sequence
</list>

<list degrees_used_att>
/ selectionrate = always
/ selectionmode = sequence
</list>

<list lower_half>
/ selectionrate = always
/ selectionmode = sequence
</list>

<list upper_half>
/ selectionrate = always
/ selectionmode = sequence
</list>

<list curr_values>
/ selectionrate = always
/ selectionmode = sequence
</list>

<list curr_RTs>
/ selectionrate = always
/ selectionmode = sequence
</list>

<list curr_trials>
/ selectionrate = always
/ selectionmode = sequence
</list>

<list curr_values_temp>
/ selectionrate = always
/ selectionmode = values.temp_index;
</list>

<list curr_RTs_temp>
/ selectionrate = always
/ selectionmode = values.temp_index;
</list>

<list era_values>
/ selectionrate = always
/ selectionmode = values.erasure_index;
</list>

<list era_RTs>
/ selectionrate = always
/ selectionmode = values.erasure_index;
</list>

<list span_30degrees>
/ items = (-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
/ selectionrate = always
/ selectionmode = sequence
</list>

<list best>
/ items = (values.rem0, values.rem1, values.rem2, values.rem3, values.rem4, values.rem5)
/ poolsize = 6
/ selectionrate = always
</list>

<list erasure>
/ selectionrate = always
/ selectionmode = values.erasure_index2;
</list>

<list erasure_RTs>
/ selectionrate = always
/ selectionmode = values.erasure_index2;
</list>

<include>
/ file = "values-5888.txt"
</include>

<include>
/ file = "RTs-5888.txt"
</include>

<include>
/ file = "trials-5888.txt"
</include>