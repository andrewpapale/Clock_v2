2023-04-27 Test Cloud/Wind positions

<defaults>
/ canvasaspectratio = (4,4)
/ minimumversion = "6.0.0.0"
/ inputdevice = mouse
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 0)
/ txbgcolor = white
/ txcolor = (0, 0, 0)
</defaults>


<expressions>
/ centerx = 0.5*display.canvaswidth
/ centery = 0.5*display.canvasheight
/ radius_px = parameters.circleproportion * display.canvasheight
/ radians_angle6 = rad(6)
/ radians_angle12 = rad(12)
/ radians_angle18 = rad(18)
/ radians_angle24 = rad(24)
/ radians_angle30 = rad(30)
/ radians_angle36 = rad(36)
/ radians_angle42 = rad(42)
/ radians_angle48 = rad(48)
/ radians_angle54 = rad(54)
/ radians_angle60 = rad(60)
/ radians_angle66 = rad(66)
/ radians_angle72 = rad(72)
/ radians_angle78 = rad(78)
/ radians_angle84 = rad(84)
/ radians_angle90 = rad(90)
/ radians_angle96 = rad(96)
/ radians_angle102 = rad(102)
/ radians_angle108 = rad(108)
/ radians_angle114 = rad(114)
/ radians_angle120 = rad(120)
/ radians_angle126 = rad(126)
/ radians_angle132 = rad(132)
/ radians_angle138 = rad(138)
/ radians_angle144 = rad(144)
/ radians_angle150 = rad(150)
/ radians_angle156 = rad(156)
/ radians_angle162 = rad(162)
/ radians_angle168 = rad(168)
/ radians_angle174 = rad(174)
/ radians_angle180 = rad(180)
/ radians_angle186 = rad(186)
/ radians_angle192 = rad(192)
/ radians_angle198 = rad(198)
/ radians_angle204 = rad(204)
/ radians_angle210 = rad(210)
/ radians_angle216 = rad(216)
/ radians_angle222 = rad(222)
/ radians_angle228 = rad(228)
/ radians_angle234 = rad(234)
/ radians_angle240 = rad(240)
/ radians_angle246 = rad(246)
/ radians_angle252 = rad(252)
/ radians_angle258 = rad(258)
/ radians_angle264 = rad(264)
/ radians_angle270 = rad(270)
/ radians_angle276 = rad(276)
/ radians_angle282 = rad(282)
/ radians_angle288 = rad(288)
/ radians_angle294 = rad(294)
/ radians_angle300 = rad(300)
/ radians_angle306 = rad(306)
/ radians_angle312 = rad(312)
/ radians_angle318 = rad(318)
/ radians_angle324 = rad(324)
/ radians_angle330 = rad(330)
/ radians_angle336 = rad(336)
/ radians_angle342 = rad(342)
/ radians_angle348 = rad(348)
/ radians_angle354 = rad(354)
/ heightchange_angle6 = sin(expressions.Radians_angle6) * expressions.radius_px
/ widthchange_angle6 = cos(expressions.Radians_angle6) * expressions.radius_px
/ heightchange_angle12 = sin(expressions.Radians_angle12) * expressions.radius_px
/ widthchange_angle12 = cos(expressions.Radians_angle12) * expressions.radius_px
/ heightchange_angle18 = sin(expressions.Radians_angle18) * expressions.radius_px
/ widthchange_angle18 = cos(expressions.Radians_angle18) * expressions.radius_px
/ heightchange_angle24 = sin(expressions.Radians_angle24) * expressions.radius_px
/ widthchange_angle24 = cos(expressions.Radians_angle24) * expressions.radius_px
/ heightchange_angle30 = sin(expressions.Radians_angle30) * expressions.radius_px
/ widthchange_angle30 = cos(expressions.Radians_angle30) * expressions.radius_px
/ heightchange_angle36 = sin(expressions.Radians_angle36) * expressions.radius_px
/ widthchange_angle36 = cos(expressions.Radians_angle36) * expressions.radius_px
/ heightchange_angle42 = sin(expressions.Radians_angle42) * expressions.radius_px
/ widthchange_angle42 = cos(expressions.Radians_angle42) * expressions.radius_px
/ heightchange_angle48 = sin(expressions.Radians_angle48) * expressions.radius_px
/ widthchange_angle48 = cos(expressions.Radians_angle48) * expressions.radius_px
/ heightchange_angle54 = sin(expressions.Radians_angle54) * expressions.radius_px
/ widthchange_angle54 = cos(expressions.Radians_angle54) * expressions.radius_px
/ heightchange_angle60 = sin(expressions.Radians_angle60) * expressions.radius_px
/ widthchange_angle60 = cos(expressions.Radians_angle60) * expressions.radius_px
/ heightchange_angle66 = sin(expressions.Radians_angle66) * expressions.radius_px
/ widthchange_angle66 = cos(expressions.Radians_angle66) * expressions.radius_px
/ heightchange_angle72 = sin(expressions.Radians_angle72) * expressions.radius_px
/ widthchange_angle72 = cos(expressions.Radians_angle72) * expressions.radius_px
/ heightchange_angle78 = sin(expressions.Radians_angle78) * expressions.radius_px
/ widthchange_angle78 = cos(expressions.Radians_angle78) * expressions.radius_px
/ heightchange_angle84 = sin(expressions.Radians_angle84) * expressions.radius_px
/ widthchange_angle84 = cos(expressions.Radians_angle84) * expressions.radius_px
/ heightchange_angle90 = sin(expressions.Radians_angle90) * expressions.radius_px
/ widthchange_angle90 = cos(expressions.Radians_angle90) * expressions.radius_px
/ heightchange_angle96 = sin(expressions.Radians_angle96) * expressions.radius_px
/ widthchange_angle96 = cos(expressions.Radians_angle96) * expressions.radius_px
/ heightchange_angle102 = sin(expressions.Radians_angle102) * expressions.radius_px
/ widthchange_angle102 = cos(expressions.Radians_angle102) * expressions.radius_px
/ heightchange_angle108 = sin(expressions.Radians_angle108) * expressions.radius_px
/ widthchange_angle108 = cos(expressions.Radians_angle108) * expressions.radius_px
/ heightchange_angle114 = sin(expressions.Radians_angle114) * expressions.radius_px
/ widthchange_angle114 = cos(expressions.Radians_angle114) * expressions.radius_px
/ heightchange_angle120 = sin(expressions.Radians_angle120) * expressions.radius_px
/ widthchange_angle120 = cos(expressions.Radians_angle120) * expressions.radius_px
/ heightchange_angle126 = sin(expressions.Radians_angle126) * expressions.radius_px
/ widthchange_angle126 = cos(expressions.Radians_angle126) * expressions.radius_px
/ heightchange_angle132 = sin(expressions.Radians_angle132) * expressions.radius_px
/ widthchange_angle132 = cos(expressions.Radians_angle132) * expressions.radius_px
/ heightchange_angle138 = sin(expressions.Radians_angle138) * expressions.radius_px
/ widthchange_angle138 = cos(expressions.Radians_angle138) * expressions.radius_px
/ heightchange_angle144 = sin(expressions.Radians_angle144) * expressions.radius_px
/ widthchange_angle144 = cos(expressions.Radians_angle144) * expressions.radius_px
/ heightchange_angle150 = sin(expressions.Radians_angle150) * expressions.radius_px
/ widthchange_angle150 = cos(expressions.Radians_angle150) * expressions.radius_px
/ heightchange_angle156 = sin(expressions.Radians_angle156) * expressions.radius_px
/ widthchange_angle156 = cos(expressions.Radians_angle156) * expressions.radius_px
/ heightchange_angle162 = sin(expressions.Radians_angle162) * expressions.radius_px
/ widthchange_angle162 = cos(expressions.Radians_angle162) * expressions.radius_px
/ heightchange_angle168 = sin(expressions.Radians_angle168) * expressions.radius_px
/ widthchange_angle168 = cos(expressions.Radians_angle168) * expressions.radius_px
/ heightchange_angle174 = sin(expressions.Radians_angle174) * expressions.radius_px
/ widthchange_angle174 = cos(expressions.Radians_angle174) * expressions.radius_px
/ heightchange_angle180 = sin(expressions.Radians_angle180) * expressions.radius_px
/ widthchange_angle180 = cos(expressions.Radians_angle180) * expressions.radius_px
/ heightchange_angle186 = sin(expressions.Radians_angle186) * expressions.radius_px
/ widthchange_angle186 = cos(expressions.Radians_angle186) * expressions.radius_px
/ heightchange_angle192 = sin(expressions.Radians_angle192) * expressions.radius_px
/ widthchange_angle192 = cos(expressions.Radians_angle192) * expressions.radius_px
/ heightchange_angle198 = sin(expressions.Radians_angle198) * expressions.radius_px
/ widthchange_angle198 = cos(expressions.Radians_angle198) * expressions.radius_px
/ heightchange_angle204 = sin(expressions.Radians_angle204) * expressions.radius_px
/ widthchange_angle204 = cos(expressions.Radians_angle204) * expressions.radius_px
/ heightchange_angle210 = sin(expressions.Radians_angle210) * expressions.radius_px
/ widthchange_angle210 = cos(expressions.Radians_angle210) * expressions.radius_px
/ heightchange_angle216 = sin(expressions.Radians_angle216) * expressions.radius_px
/ widthchange_angle216 = cos(expressions.Radians_angle216) * expressions.radius_px
/ heightchange_angle222 = sin(expressions.Radians_angle222) * expressions.radius_px
/ widthchange_angle222 = cos(expressions.Radians_angle222) * expressions.radius_px
/ heightchange_angle228 = sin(expressions.Radians_angle228) * expressions.radius_px
/ widthchange_angle228 = cos(expressions.Radians_angle228) * expressions.radius_px
/ heightchange_angle234 = sin(expressions.Radians_angle234) * expressions.radius_px
/ widthchange_angle234 = cos(expressions.Radians_angle234) * expressions.radius_px
/ heightchange_angle240 = sin(expressions.Radians_angle240) * expressions.radius_px
/ widthchange_angle240 = cos(expressions.Radians_angle240) * expressions.radius_px
/ heightchange_angle246 = sin(expressions.Radians_angle246) * expressions.radius_px
/ widthchange_angle246 = cos(expressions.Radians_angle246) * expressions.radius_px
/ heightchange_angle252 = sin(expressions.Radians_angle252) * expressions.radius_px
/ widthchange_angle252 = cos(expressions.Radians_angle252) * expressions.radius_px
/ heightchange_angle258 = sin(expressions.Radians_angle258) * expressions.radius_px
/ widthchange_angle258 = cos(expressions.Radians_angle258) * expressions.radius_px
/ heightchange_angle264 = sin(expressions.Radians_angle264) * expressions.radius_px
/ widthchange_angle264 = cos(expressions.Radians_angle264) * expressions.radius_px
/ heightchange_angle270 = sin(expressions.Radians_angle270) * expressions.radius_px
/ widthchange_angle270 = cos(expressions.Radians_angle270) * expressions.radius_px
/ heightchange_angle276 = sin(expressions.Radians_angle276) * expressions.radius_px
/ widthchange_angle276 = cos(expressions.Radians_angle276) * expressions.radius_px
/ heightchange_angle282 = sin(expressions.Radians_angle282) * expressions.radius_px
/ widthchange_angle282 = cos(expressions.Radians_angle282) * expressions.radius_px
/ heightchange_angle288 = sin(expressions.Radians_angle288) * expressions.radius_px
/ widthchange_angle288 = cos(expressions.Radians_angle288) * expressions.radius_px
/ heightchange_angle294 = sin(expressions.Radians_angle294) * expressions.radius_px
/ widthchange_angle294 = cos(expressions.Radians_angle294) * expressions.radius_px
/ heightchange_angle300 = sin(expressions.Radians_angle300) * expressions.radius_px
/ widthchange_angle300 = cos(expressions.Radians_angle300) * expressions.radius_px
/ heightchange_angle306 = sin(expressions.Radians_angle306) * expressions.radius_px
/ widthchange_angle306 = cos(expressions.Radians_angle306) * expressions.radius_px
/ heightchange_angle312 = sin(expressions.Radians_angle312) * expressions.radius_px
/ widthchange_angle312 = cos(expressions.Radians_angle312) * expressions.radius_px
/ heightchange_angle318 = sin(expressions.Radians_angle318) * expressions.radius_px
/ widthchange_angle318 = cos(expressions.Radians_angle318) * expressions.radius_px
/ heightchange_angle324 = sin(expressions.Radians_angle324) * expressions.radius_px
/ widthchange_angle324 = cos(expressions.Radians_angle324) * expressions.radius_px
/ heightchange_angle330 = sin(expressions.Radians_angle330) * expressions.radius_px
/ widthchange_angle330 = cos(expressions.Radians_angle330) * expressions.radius_px
/ heightchange_angle336 = sin(expressions.Radians_angle336) * expressions.radius_px
/ widthchange_angle336 = cos(expressions.Radians_angle336) * expressions.radius_px
/ heightchange_angle342 = sin(expressions.Radians_angle342) * expressions.radius_px
/ widthchange_angle342 = cos(expressions.Radians_angle342) * expressions.radius_px
/ heightchange_angle348 = sin(expressions.Radians_angle348) * expressions.radius_px
/ widthchange_angle348 = cos(expressions.Radians_angle348) * expressions.radius_px
/ heightchange_angle354 = sin(expressions.Radians_angle354) * expressions.radius_px
/ widthchange_angle354 = cos(expressions.Radians_angle354) * expressions.radius_px
/ heightchange_angle0 = 0
/ widthchange_angle0 = expressions.radius_px

</expressions>

<values>
/ k = 37;
/ Shift = 700;
/ rt_extended = 7000;
/ DEV_factor = 10;
/ DEV_factor2 = 1;
/ sin_factor = 0.25;
/ mag = NULL;
/ freq = NULL;
/ CEV_x = NULL;
/ IEV_x = NULL;
/ CEV_x2 = NULL;
/ DEV_x = NULL;
/ a = -5;
/ b = 5;
/ r = NULL;
/ ev = NULL;
/ inc = NULL;
/ temp = NULL;
/ rng = NULL;
/ startPos = 75;
/ totalPoints = 0;
/ angDisp = 0;
/ circle_x = 0%;
/ circle_y = 0%;
/ n_revolutions = 0;
/ rt_shifted = NULL;
/ time_per_revolution = 5000;
/ gamma = values.time_per_revolution/100;
/ scrfunc = "dynamic";  //if dynamic, load 'table' from 'csv' and dynamically update contingency
/ totalEarnings = 0;
/ Earnings = NULL;
/ trialCount = 0;
/ trialCountTotal = 0;
/ blockCount = 0;
/ unc_att_start1 = 0;
/ unc_att_start2 = 0;
/ nUncertainty1 = 0;
/ nUncertainty2 = 0;
/ fogPos1 = 0;
/ windPos2 = 0;
/ chooseFog1 = 0;
/ chooseWind2 = 0;
/ chooseAttentionalControl = 0;
/ chooseUncertainty = 0;
/ choose_unc_att1 = 0;
/ choose_unc_att2 = 0;
/ unc_att_count1 = 0;
/ unc_att_count2 = 0;
/ uncertainty_block = 0;
/ meta_trialCount = 0;
</values>

<parameters>
/ rtvspos = "POS" // if POS, the clock position in space matters, if RT, the time from the starting position matters
/ mushrooms = TRUE;
/ randStart = TRUE;
/ circleproportion = 0.33
/ clockdotSize = 2%
/ handDotSize = 3%
/ ntrials = 10;
/ attentional_control = "wind";
/ local_uncertainty = "fog";
</parameters>

<picture fixationCross>
/ items = ("fixationCross.png")
/ position = (50%, 50%)
/ size = (7%, 7%)
/ erase = true(white)
</picture>


<picture mushroom1>
/ items = ("mushrooms1.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture mushroom2>
/ items = ("mushrooms2.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture mushroom3>
/ items = ("mushrooms3.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture mushroom4>
/ items = ("mushrooms4.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture mushroom5>
/ items = ("mushrooms5.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture mushroom6>
/ items = ("mushrooms6.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture mushroom7>
/ items = ("mushrooms7.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture mushroom8>
/ items = ("mushrooms8.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture mushroom9>
/ items = ("mushrooms9.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture mushroom10>
/ items = ("mushrooms10.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture no_mushrooms>
/ items = ("no_mushrooms.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture sampleMushroomL>
/ items = ("mushrooms1.png")
/ position = (20%, 80%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture sampleMushroomR>
/ items = ("mushrooms1.png")
/ position = (80%, 80%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture sampleAttentionL>
/ items = ("wind0.png")
/ position = (20%, 80%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture sampleAttentionR>
/ items = ("wind0.png")
/ position = (80%, 80%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture timeout>
/ items = ("timeout.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture feedback>
/ items = ("blank.png") //default
/ position = (50%, 50%)
/ size = (25%, 25%)
/ erase = true(white)
</picture>

<picture fog0>
/ items = ("fog0.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle0
/ vposition = expressions.centery + expressions.heightchange_angle0
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture fog2>
/ items = ("fog2.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle0
/ vposition = expressions.centery + expressions.heightchange_angle0
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture fog5>
/ items = ("fog5.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle330
/ vposition = expressions.centery + expressions.heightchange_angle330
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture fog10>
/ items = ("fog10.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle300
/ vposition = expressions.centery + expressions.heightchange_angle300
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture fog15>
/ items = ("fog15.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle270
/ vposition = expressions.centery + expressions.heightchange_angle270
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture fog20>
/ items = ("fog20.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle240
/ vposition = expressions.centery + expressions.heightchange_angle240
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture fog25>
/ items = ("fog25.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle180
/ vposition = expressions.centery + expressions.heightchange_angle180
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture fog30>
/ items = ("fog30.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle150
/ vposition = expressions.centery + expressions.heightchange_angle150
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture fog35>
/ items = ("fog35.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle120
/ vposition = expressions.centery + expressions.heightchange_angle120
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture fog40>
/ items = ("fog40.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle90
/ vposition = expressions.centery + expressions.heightchange_angle90
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture fog45>
/ items = ("fog45.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle60
/ vposition = expressions.centery + expressions.heightchange_angle60
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture fog50>
/ items = ("fog50.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle30
/ vposition = expressions.centery + expressions.heightchange_angle30
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture wind0>
/ items = ("wind0.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle0
/ vposition = expressions.centery + expressions.heightchange_angle0
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture wind2>
/ items = ("wind2.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle0
/ vposition = expressions.centery + expressions.heightchange_angle0
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture wind5>
/ items = ("wind5.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle330
/ vposition = expressions.centery + expressions.heightchange_angle330
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture wind10>
/ items = ("wind10.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle300
/ vposition = expressions.centery + expressions.heightchange_angle300
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture wind15>
/ items = ("wind15.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle270
/ vposition = expressions.centery + expressions.heightchange_angle270
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture wind20>
/ items = ("wind20.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle240
/ vposition = expressions.centery + expressions.heightchange_angle240
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture wind25>
/ items = ("wind25.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle180
/ vposition = expressions.centery + expressions.heightchange_angle180
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture wind30>
/ items = ("wind30.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle150
/ vposition = expressions.centery + expressions.heightchange_angle150
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture wind35>
/ items = ("wind35.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle120
/ vposition = expressions.centery + expressions.heightchange_angle120
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture wind40>
/ items = ("wind40.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle90
/ vposition = expressions.centery + expressions.heightchange_angle90
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture wind45>
/ items = ("wind45.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle60
/ vposition = expressions.centery + expressions.heightchange_angle60
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture wind50>
/ items = ("wind50.png") //default
/ hposition = expressions.centerx + expressions.widthchange_angle30
/ vposition = expressions.centery + expressions.heightchange_angle30
/ size = (30%, 30%)
/ erase = true(white)
</picture>


<list fog_hpos>
/ items = (
expressions.centerx + expressions.widthchange_angle0,
expressions.centerx + expressions.widthchange_angle30,
expressions.centerx + expressions.widthchange_angle60,
expressions.centerx + expressions.widthchange_angle90,
expressions.centerx + expressions.widthchange_angle120,
expressions.centerx + expressions.widthchange_angle150,
expressions.centerx + expressions.widthchange_angle180,
expressions.centerx + expressions.widthchange_angle210,
expressions.centerx + expressions.widthchange_angle240,
expressions.centerx + expressions.widthchange_angle270,
expressions.centerx + expressions.widthchange_angle300,
expressions.centerx + expressions.widthchange_angle330
)
/ selectionmode = list.fog_hpos.currentindex
/ selectionrate = always
</list>

<list fog_vpos>
/ items = (
expressions.centery + expressions.heightchange_angle0,
expressions.centery + expressions.heightchange_angle30,
expressions.centery + expressions.heightchange_angle60,
expressions.centery + expressions.heightchange_angle90,
expressions.centery + expressions.heightchange_angle120,
expressions.centery + expressions.heightchange_angle150,
expressions.centery + expressions.heightchange_angle180,
expressions.centery + expressions.heightchange_angle210,
expressions.centery + expressions.heightchange_angle240,
expressions.centery + expressions.heightchange_angle270,
expressions.centery + expressions.heightchange_angle300,
expressions.centery + expressions.heightchange_angle330
)
/ selectionmode = list.fog_vpos.currentindex
/ selectionrate = always
</list>


<list wind_hpos>
/ items = (
expressions.centerx + expressions.widthchange_angle0,
expressions.centerx + expressions.widthchange_angle30,
expressions.centerx + expressions.widthchange_angle60,
expressions.centerx + expressions.widthchange_angle90,
expressions.centerx + expressions.widthchange_angle120,
expressions.centerx + expressions.widthchange_angle150,
expressions.centerx + expressions.widthchange_angle180,
expressions.centerx + expressions.widthchange_angle210,
expressions.centerx + expressions.widthchange_angle240,
expressions.centerx + expressions.widthchange_angle270,
expressions.centerx + expressions.widthchange_angle300,
expressions.centerx + expressions.widthchange_angle330
)
/ selectionmode = list.wind_hpos.currentindex
/ selectionrate = always
</list>

<list wind_vpos>
/ items = (
expressions.centery + expressions.heightchange_angle0,
expressions.centery + expressions.heightchange_angle30,
expressions.centery + expressions.heightchange_angle60,
expressions.centery + expressions.heightchange_angle90,
expressions.centery + expressions.heightchange_angle120,
expressions.centery + expressions.heightchange_angle150,
expressions.centery + expressions.heightchange_angle180,
expressions.centery + expressions.heightchange_angle210,
expressions.centery + expressions.heightchange_angle240,
expressions.centery + expressions.heightchange_angle270,
expressions.centery + expressions.heightchange_angle300,
expressions.centery + expressions.heightchange_angle330
)
/ selectionmode = list.wind_vpos.currentindex
/ selectionrate = always
</list>

<list positions>
/ items = (1,2,5,10,15,20,25,30,35,40,45,50)
/ selectionmode = sequence
</list>

<picture uncertainty>
/ items = ("fog0.png") //default
/ hposition = list.wind_hpos.nextvalue
/ vposition = list.wind_vpos.nextvalue
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture attention>
/ items = ("fog0.png") //default
/ hposition = list.fog_hpos.nextvalue
/ vposition = list.fog_vpos.nextvalue
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture planet>
/ items = ("planet-1138237_1280.png")
/ position = (50%, 50%)
/ size = (35%,35%)
/ erase = true(white)
</picture>

<picture animatedCircle>
/ items = ("challenger-5631958_1280.png")
/ size = (12%, 0.1px*display.canvaswidth)
/ animation = circle(values.time_per_revolution,-1,values.startPos,50%,50%,expressions.radius_px)
/ erase = false
</picture>

<shape dot1>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle276)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle276)
/ erase = true(white)
</shape>
 
<shape dot2>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*3,255/61*3,255/61*3)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle282)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle282)
/ erase = true(white)
</shape>
 
<shape dot3>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*4,255/61*4,255/61*4)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle288)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle288)
/ erase = true(white)
</shape>
 
<shape dot4>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*5,255/61*5,255/61*5)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle294)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle294)
/ erase = true(white)
</shape>
 
<shape dot5>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*6,255/61*6,255/61*6)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle300)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle300)
/ erase = true(white)
</shape>
 
<shape dot6>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*7,255/61*7,255/61*7)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle306)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle306)
/ erase = true(white)
</shape>
 
<shape dot7>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*8,255/61*8,255/61*8)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle312)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle312)
/ erase = true(white)
</shape>
 
<shape dot8>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*9,255/61*9,255/61*9)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle318)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle318)
/ erase = true(white)
</shape>
 
<shape dot9>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*10,255/61*10,255/61*10)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle324)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle324)
/ erase = true(white)
</shape>
 
<shape dot10>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*11,255/61*11,255/61*11)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle330)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle330)
/ erase = true(white)
</shape>
 
<shape dot11>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*12,255/61*12,255/61*12)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle336)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle336)
/ erase = true(white)
</shape>
 
<shape dot12>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*13,255/61*13,255/61*13)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle342)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle342)
/ erase = true(white)
</shape>
 
<shape dot13>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*14,255/61*14,255/61*14)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle348)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle348)
/ erase = true(white)
</shape>
 
<shape dot14>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*15,255/61*15,255/61*15)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle354)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle354)
/ erase = true(white)
</shape>
 
<shape dot15>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*16,255/61*16,255/61*16)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle0)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle0)
/ erase = true(white)
</shape>

<shape dot16>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*17,255/61*17,255/61*17)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle6)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle6)
/ erase = true(white)
</shape>
 
<shape dot17>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*18,255/61*18,255/61*18)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle12)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle12)
/ erase = true(white)
</shape>
 
<shape dot18>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*19,255/61*19,255/61*19)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle18)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle18)
/ erase = true(white)
</shape>
 
<shape dot19>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*19,255/61*19,255/61*19)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle24)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle24)
/ erase = true(white)
</shape>
 
<shape dot20>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*20,255/61*20,255/61*20)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle30)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle30)
/ erase = true(white)
</shape>
 
<shape dot21>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*21,255/61*21,255/61*21)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle36)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle36)
/ erase = true(white)
</shape>
 
<shape dot22>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*22,255/61*22,255/61*22)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle42)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle42)
/ erase = true(white)
</shape>
 
<shape dot23>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*23,255/61*23,255/61*23)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle48)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle48)
/ erase = true(white)
</shape>
 
<shape dot24>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*24,255/61*24,255/61*24)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle54)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle54)
/ erase = true(white)
</shape>
 
<shape dot25>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*25,255/61*25,255/61*25)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle60)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle60)
/ erase = true(white)
</shape>
 
<shape dot26>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*26,255/61*26,255/61*26)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle66)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle66)
/ erase = true(white)
</shape>
 
<shape dot27>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*27,255/61*27,255/61*27)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle72)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle72)
/ erase = true(white)
</shape>
 
<shape dot28>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*28,255/61*28,255/61*28)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle78)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle78)
/ erase = true(white)
</shape>
 
<shape dot29>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*29,255/61*29,255/61*29)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle84)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle84)
/ erase = true(white)
</shape>
 
<shape dot30>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*30,255/61*30,255/61*30)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle90)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle90)
/ erase = true(white)
</shape>
 
<shape dot31>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*31,255/61*31,255/61*31)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle96)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle96)
/ erase = true(white)
</shape>
 
<shape dot32>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*32,255/61*32,255/61*32)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle102)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle102)
/ erase = true(white)
</shape>
 
<shape dot33>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*33,255/61*33,255/61*33)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle108)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle108)
/ erase = true(white)
</shape>
 
<shape dot34>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*34,255/61*34,255/61*34)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle114)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle114)
/ erase = true(white)
</shape>
 
<shape dot35>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*35,255/61*35,255/61*35)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle120)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle120)
/ erase = true(white)
</shape>
 
<shape dot36>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*36,255/61*36,255/61*36)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle126)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle126)
/ erase = true(white)
</shape>
 
<shape dot37>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*37,255/61*37,255/61*37)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle132)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle132)
/ erase = true(white)
</shape>
 
<shape dot38>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*38,255/61*38,255/61*38)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle138)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle138)
/ erase = true(white)
</shape>
 
<shape dot39>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*39,255/61*39,255/61*39)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle144)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle144)
/ erase = true(white)
</shape>
 
<shape dot40>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*40,255/61*40,255/61*40)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle150)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle150)
/ erase = true(white)
</shape>
 
<shape dot41>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*41,255/61*41,255/61*41)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle156)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle156)
/ erase = true(white)
</shape>
 
<shape dot42>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*42,255/61*42,255/61*42)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle162)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle162)
/ erase = true(white)
</shape>
 
<shape dot43>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*43,255/61*43,255/61*43)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle168)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle168)
/ erase = true(white)
</shape>
 
<shape dot44>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*44,255/61*44,255/61*44)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle174)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle174)
/ erase = true(white)
</shape>
 
<shape dot45>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*45,255/61*45,255/61*45)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle180)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle180)
/ erase = true(white)
</shape>
 
<shape dot46>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*46,255/61*46,255/61*46)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle186)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle186)
/ erase = true(white)
</shape>
 
<shape dot47>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*47,255/61*47,255/61*47)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle192)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle192)
/ erase = true(white)
</shape>
 
<shape dot48>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*48,255/61*48,255/61*48)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle198)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle198)
/ erase = true(white)
</shape>
 
<shape dot49>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*49,255/61*49,255/61*49)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle204)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle204)
/ erase = true(white)
</shape>
 
<shape dot50>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*50,255/61*50,255/61*50)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle210)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle210)
/ erase = true(white)
</shape>
 
<shape dot51>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*51,255/61*51,255/61*51)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle216)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle216)
/ erase = true(white)
</shape>
 
<shape dot52>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*52,255/61*52,255/61*52)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle222)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle222)
/ erase = true(white)
</shape>
 
<shape dot53>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*53,255/61*53,255/61*53)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle228)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle228)
/ erase = true(white)
</shape>
 
<shape dot54>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*54,255/61*54,255/61*54)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle234)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle234)
/ erase = true(white)
</shape>
 
<shape dot55>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*55,255/61*55,255/61*55)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle240)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle240)
/ erase = true(white)
</shape>
 
<shape dot56>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*56,255/61*56,255/61*56)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle246)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle246)
/ erase = true(white)
</shape>
 
<shape dot57>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*57,255/61*57,255/61*57)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle252)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle252)
/ erase = true(white)
</shape>
 
<shape dot58>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*58,255/61*58,255/61*58)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle258)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle258)
/ erase = true(white)
</shape>
 
<shape dot59>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*59,255/61*59,255/61*59)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle264)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle264)
/ erase = true(white)
</shape>
 
<shape dot60>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*60,255/61*60,255/61*60)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle270)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle270)
/ erase = true(white)
</shape>

<text upos>
/ items = ("<%trial.testFog.latency%>")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<text upos2>
/ items = ("<%trial.testWind.latency%>")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<text upos3>
/ items = ("<%trial.testWindFog.latency%>")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<trial testFog>
/ ontrialbegin = [
	values.fogPos1 = list.positions.nextvalue;
	if (values.fogPos1==1) {
		picture.uncertainty.item.1 = "fog0.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle270;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle270;
	} else if (values.fogPos1==2) {
		picture.uncertainty.item.1 = "fog2.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle240;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle240;
	} else if (values.fogPos1==5) {
		picture.uncertainty.item.1 = "fog5.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle210;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle210;
	} else if (values.fogPos1==10) {
		picture.uncertainty.item.1 = "fog10.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle180;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle180;
	} else if (values.fogPos1==15) {
		picture.uncertainty.item.1 = "fog15.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle150;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle150;
	} else if (values.fogPos1==20) {
		picture.uncertainty.item.1 = "fog20.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle120;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle120;
	} else if (values.fogPos1==25) {
		picture.uncertainty.item.1 = "fog25.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle90;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle90;
	} else if (values.fogPos1==30) {
		picture.uncertainty.item.1 = "fog30.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle60;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle60;
	} else if (values.fogPos1==35) {
		picture.uncertainty.item.1 = "fog35.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle30;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle30;
	} else if (values.fogPos1==40) {
		picture.uncertainty.item.1 = "fog40.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle0;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle0;
	} else if (values.fogPos1==45) {
		picture.uncertainty.item.1 = "fog45.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle330;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle330;
	} else if (values.fogPos1==50) {
		picture.uncertainty.item.1 = "fog50.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle300;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle300;
	}
]

/ stimulustimes = [0=animatedCircle, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60, uncertainty, upos;
]          

/ inputdevice = keyboard
/ beginresponsetime = 0
/ validresponse = (" ") 
/ recorddata = FALSE
/ branch = [
	trial.getFeedback;
]
</trial>

<trial getFeedback>
/ stimulustimes = [0=dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60, uncertainty, upos;
] 
/ inputdevice = keyboard
/ beginresponsetime = 0
/ validresponse = (" ") 
/ recorddata = FALSE  
</trial>

<trial getFeedback2>
/ stimulustimes = [0=dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60, uncertainty, upos2;
] 
/ inputdevice = keyboard
/ beginresponsetime = 0
/ validresponse = (" ") 
/ recorddata = FALSE  
</trial>

<trial getFeedback3>
/ stimulustimes = [0=dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60, uncertainty, upos3;
] 
/ inputdevice = keyboard
/ beginresponsetime = 0
/ validresponse = (" ") 
/ recorddata = FALSE  
</trial>
<trial testWind>
/ ontrialbegin = [
	values.windPos2 = list.positions.nextvalue;
	if (values.windPos2==1) {
		picture.attention.item.1 = "wind0.png";
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle270;
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle270;
	} else if (values.windPos2==2) {
		picture.attention.item.1 = "wind2.png";
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle240;
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle240;		
	} else if (values.windPos2==5) {
		picture.attention.item.1 = "wind5.png";
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle210+20;
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle210;
	} else if (values.windPos2==10) {
		picture.attention.item.1 = "wind10.png";	
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle180;
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle180;
	} else if (values.windPos2==15) {
		picture.attention.item.1 = "wind15.png";
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle150+20;
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle150;
	} else if (values.windPos2==20) {
		picture.attention.item.1 = "wind20.png";
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle120;
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle120-20;
	} else if (values.windPos2==25) {
		picture.attention.item.1 = "wind25.png";
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle90;
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle90;
	} else if (values.windPos2==30) {
		picture.attention.item.1 = "wind30.png";
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle60;
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle60-20;
	} else if (values.windPos2==35) {
		picture.attention.item.1 = "wind35.png";
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle30-20;	
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle30;
	} else if (values.windPos2==40) {
		picture.attention.item.1 = "wind40.png";
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle0;
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle0;
	} else if (values.windPos2==45) {
		picture.attention.item.1 = "wind45.png";
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle330;
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle330+20;
	} else if (values.windPos2==50) {
		picture.attention.item.1 = "wind50.png";
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle300;
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle300+20;
	}
]

/ stimulustimes = [0=animatedCircle, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60, attention, upos2;
]

/ inputdevice = keyboard
/ beginresponsetime = 0
/ validresponse = (" ") 
/ recorddata = FALSE
/ branch = [
	trial.getFeedback2;
]
</trial>

<trial testWindFog>
/ ontrialbegin = [
	values.fogPos1 = list.positions.nextvalue;
	if (values.fogPos1==1) {
		picture.uncertainty.item.1 = "fog0.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle270;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle270;
	} else if (values.fogPos1==2) {
		picture.uncertainty.item.1 = "fog2.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle240;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle240;
	} else if (values.fogPos1==5) {
		picture.uncertainty.item.1 = "fog5.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle210;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle210;
	} else if (values.fogPos1==10) {
		picture.uncertainty.item.1 = "fog10.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle180;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle180;
	} else if (values.fogPos1==15) {
		picture.uncertainty.item.1 = "fog15.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle150;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle150;
	} else if (values.fogPos1==20) {
		picture.uncertainty.item.1 = "fog20.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle120;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle120;
	} else if (values.fogPos1==25) {
		picture.uncertainty.item.1 = "fog25.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle90;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle90;
	} else if (values.fogPos1==30) {
		picture.uncertainty.item.1 = "fog30.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle60;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle60;
	} else if (values.fogPos1==35) {
		picture.uncertainty.item.1 = "fog35.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle30;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle30;
	} else if (values.fogPos1==40) {
		picture.uncertainty.item.1 = "fog40.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle0;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle0;
	} else if (values.fogPos1==45) {
		picture.uncertainty.item.1 = "fog45.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle330;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle330;
	} else if (values.fogPos1==50) {
		picture.uncertainty.item.1 = "fog50.png";
		picture.uncertainty.hposition = expressions.centerx + expressions.widthchange_angle300;
		picture.uncertainty.vposition = expressions.centery + expressions.heightchange_angle300;
	}
	values.windPos2 = list.positions.nextvalue;
	if (values.windPos2==1) {
		picture.attention.item.1 = "wind0.png";
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle270;
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle270;
	} else if (values.windPos2==2) {
		picture.attention.item.1 = "wind2.png";
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle240;
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle240;		
	} else if (values.windPos2==5) {
		picture.attention.item.1 = "wind5.png";
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle210+20;
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle210;
	} else if (values.windPos2==10) {
		picture.attention.item.1 = "wind10.png";	
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle180;
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle180;
	} else if (values.windPos2==15) {
		picture.attention.item.1 = "wind15.png";
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle150+20;
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle150;
	} else if (values.windPos2==20) {
		picture.attention.item.1 = "wind20.png";
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle120;
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle120-20;
	} else if (values.windPos2==25) {
		picture.attention.item.1 = "wind25.png";
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle90;
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle90;
	} else if (values.windPos2==30) {
		picture.attention.item.1 = "wind30.png";
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle60;
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle60-20;
	} else if (values.windPos2==35) {
		picture.attention.item.1 = "wind35.png";
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle30-20;	
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle30;
	} else if (values.windPos2==40) {
		picture.attention.item.1 = "wind40.png";
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle0;
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle0;
	} else if (values.windPos2==45) {
		picture.attention.item.1 = "wind45.png";
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle330;
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle330+20;
	} else if (values.windPos2==50) {
		picture.attention.item.1 = "wind50.png";
		picture.attention.hposition = expressions.centerx + expressions.widthchange_angle300;
		picture.attention.vposition = expressions.centery + expressions.heightchange_angle300+20;
	}
]

/ stimulustimes = [0=animatedCircle, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60, uncertainty, attention,upos3;
]

/ inputdevice = keyboard
/ beginresponsetime = 0
/ validresponse = (" ") 
/ recorddata = FALSE
/ branch = [
	trial.getFeedback3;
]
</trial>

<block experiment_fog>
/ trials = [
	1-12 = testFog;
]
</block>
<block experiment_wind>
/ trials = [
	1-12 = testWind;
]
</block>
<block experiment_wind_fog>
/ trials = [
	1-12 = testWindFog;
]
</block>
<expt main1>
/ blocks = [
	1=experiment_fog;
	2=experiment_wind;
	2=experiment_wind_fog;
]
</expt>