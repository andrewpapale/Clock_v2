
<usermanual>
    For background see:
    Press et al., Numerical Recipes in C: The Art of Scientific Computing, 2nd Ed. (1992), 
    Chapter 3.3 Cubic Spline Interpolation, pg. 113 - 116.
</usermanual>

// input: parameter space to construct the splines over
// x values must be in ascending order, x values must be unique
<list x>
// items = (-10, -6.5, -3.5, -1.5, -0.2, 0, 1, 3.5, 5, 6.5, 10, 15, 20, 23, 30) // x values of 1st example input space 
// items = (-10, -6.5, -3.5, 0, 3.5, 6.5, 10) // x values of 2nd example input space 
// items = (-1.5, -0.2, 1.0, 5.0, 10.0, 15.0, 20.0) // x values of 3rd example input space 
</list>
<list y>
// items = (0, 0.1, -0.1, -1.2, 0, -0.4, 0.5, -0.1, 0.1, 0, 2, 1, 5, 3, -1) // y values of 1st example input space 
// items = (0, 0.1, -0.1, 1, -0.1, 0.1, 0) // y values of 2nd example input space 
// items = (-1.2, 0.0, 0.5, 1.0, 1.2, 2.0, 1.0) // y values of 3rd example input space 
</list>

<include>
/ file = "values-5888.txt"
</include>

<include>
/ file = "RTs-5888.txt"
</include>

// temp storage
<list u>
</list>
// output y of 2nd derivative
<list y2> 
</list>

<expressions>
// constructs the cubic splines over the input parameter space
/ createSpline = {
    list.y2.reset();
    list.u.reset();
    var n = list.x.itemcount;
    // setting up the vectors with n items
    var i = 1;
    while (i <= n) {
        list.y2.appenditem(null);
        list.u.appenditem(null);
        i += 1;
    };
    i = 1;
    // natural boundary condition on leftmost point
    list.y2.setitem(0.0, i);
    list.u.setitem(0.0, i);
    // decomposition
    i = 2;
    while (i <= n-1) {
        //sig=(x[i]-x[i-1])/(x[i+1]-x[i-1]);
        var sig = (list.x.item(i) - list.x.item(i-1)) / (list.x.item(i+1) - list.x.item(i-1));
        //p=sig*y2[i-1]+2.0
        var p = sig * list.y2.item(i-1) + 2.0;
        //y2[i]=(sig-1.0)/p;
        var y2i = (sig - 1.0) / p;
        list.y2.setitem(y2i, i);
        //u[i]=(y[i+1]-y[i])/(x[i+1]-x[i]) - (y[i]-y[i-1])/(x[i]-x[i-1]);
        var ui = (list.y.item(i+1) - list.y.item(i)) / (list.x.item(i+1) - list.x.item(i)) - (list.y.item(i) - list.y.item(i-1)) / (list.x.item(i) - list.x.item(i-1));
        list.u.setitem(ui, i);
        //u[i]=(6.0*u[i]/(x[i+1]-x[i-1])-sig*u[i-1])/p;
        ui = (6.0 * list.u.item(i) / (list.x.item(i+1) - list.x.item(i-1)) - sig * list.u.item(i-1)) / p;
        list.u.setitem(ui, i);
        i += 1;
    };
    // natural boundary condition on rightmost point
    var qn = 0.0;
    var un = 0.0;
    //y2[n]=(un-qn*u[n-1])/(qn*y2[n-1]+1.0);
    var y2n = (un - qn * list.u.item(n-1)) / (qn * list.y2.item(n-1) + 1.0);
    list.y2.setitem(y2n, n);
    // backsubstitution
    var k = n-1;
    while (k >= 1) {
        //y2[k]=y2[k]*y2[k+1]+u[k];
        var y2k = list.y2.item(k) * list.y2.item(k+1) + list.u.item(k);
        list.y2.setitem(y2k, k);
        k -= 1;
    };
};

// sets up a test vector of x values in the range x1 to xn
/ createTestVector = {

	//values.left_index = 30-15;
	//values.right_index = 30+15;
	//values.erasure_RT = 30;
	//values.erasure_value = 10;
	values.master_idx = 0;
	while (values.master_idx < 360){
		values.master_idx += 1;
		list.RT.nextindex;
		list.values.nextindex;
		if (values.master_idx == values.left_index){
			list.y.appenditem(list.values.currentvalue);
		} else if (values.master_idx == values.erasure_RT){	
			list.y.appenditem(values.erasure_value);
		} else if (values.master_idx == values.right_index) {
			list.y.appenditem(list.values.currentvalue);
		} else {
		}
	};
	values.i = 1;
	while (list.x.itemcount < list.y.itemcount){
		list.x.appenditem(values.i);
		values.i += 15;
	};
	
    var x1 = list.x.item(1);
    var xn = list.x.item(list.x.itemcount);
    var x =  x1;
    // set up a test vector of x values in range x1 to xn
    while (x <= xn) {
        list.x_test.appenditem(x);
        list.y_test.appenditem(null);
        x += 1; // decrease for denser sampling (more points), increase for sparser sampling (fewer points)
    };
};

// given an x value, finds the insertion point and returns interpolated y value
/ interpolateSpline = {
    // bisect
    var x = values.x;
    var n = list.x.itemcount;
    var klo = 1;
    var khi = n;
    while (khi - klo > 1) {
        var k = floor((khi + klo) / 2); // same as right bit shift
        if (list.x.item(k) > x) {
            khi = k;
        } else {
            klo = k;
        };
    };
    var h = list.x.item(khi) - list.x.item(klo);
    //a=(xa[khi]-x)/h;
    var a = (list.x.item(khi) - x) / h;
    //b=(x-xa[klo])/h;
    var b = (x - list.x.item(klo)) / h;
    // calculate interpolated y
    // y=a*ya[klo]+b*ya[khi]+((a*a*a-a)*y2a[klo]+(b*b*b-b)*y2a[khi])*(h*h)/6.0
    var y = a * list.y.item(klo) + b * list.y.item(khi) + ((a*a*a - a) * list.y2.item(klo) + (b*b*b - b) * list.y2.item(khi)) * (h*h) / 6.0;
    return y;
};
</expressions>

// test vectors holding interpolated x / y values
<list x_test> 
/ selectionmode = sequence
</list>
<list y_test>
</list>

<list x_final>
/ selectionmode = values.final_idx;
</list>

<list y_final>
/ selectionmode = values.final_idx;
</list>

<list degrees_att>
/ items = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359)
/ selectionrate = always
/ selectionmode = values.deg_index_att;
</list>

<list degrees_era>
/ items = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359)
/ selectionrate = always
/ selectionmode = values.deg_index_era;
</list>

<list degrees_used>
/ items = ()
/ selectionrate = always
/ selectionmode = sequence
</list>

<list degrees_used_att>
/ selectionrate = always
/ selectionmode = sequence
</list>

<list lower_half>
/ selectionrate = always
/ selectionmode = sequence
</list>

<list upper_half>
/ selectionrate = always
/ selectionmode = sequence
</list>

<list curr_values>
/ selectionrate = always
/ selectionmode = sequence
</list>

<list curr_RTs>
/ selectionrate = always
/ selectionmode = sequence
</list>

<list curr_trials>
/ selectionrate = always
/ selectionmode = sequence
</list>

<list era_values>
/ selectionrate = always
/ selectionmode = values.erasure_index;
</list>

<list era_RTs>
/ selectionrate = always
/ selectionmode = values.erasure_index;
</list>

<list span_30degrees>
/ items = (-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
/ selectionrate = always
/ selectionmode = sequence
</list>

<list erasure>
/ selectionrate = always
/ selectionmode = values.erasure_index2;
</list>

<list erasure_RTs>
/ selectionrate = always
/ selectionmode = values.erasure_index2;
</list>

<values>
/ x = null
/ y = null
/ master_idx = null
/ x_final = null
/ y_final = null
/ yindex = null
/ trial_index = 1;
/ index = 0;
/ degrees_erasure_index = 0;
/ values_erasure_index = 0;
/ curr_val_era = NULL;
/ curr_index_era = NULL;

/ rt_index = NULL;
/ i = NULL;
/ j = NULL;
/ k = NULL;

/ deg_index_era = NULL;
/ temp_index = NULL;

/ lower_quartile = NULL;
/ upper_quartile = NULL;

/ erasure_value = NULL;
/ erasure_RT = NULL;
/ erasure_index = NULL;
/ erasure_degrees = NULL;
/ attention_degrees = NULL;
/ erasure_index2 = NULL;

/ left_index = NULL;
/ right_index = NULL;
/ final_idx = null;
</values>

<block exampleBlock>
/ trials = [1=getErasure; 2=constructSpline; 3=interpolateSpline; 4=resetCounters; 5=constructValueVector; 6=resetCounters; 7=getValueVector]
/ onblockbegin = [
	values.master_idx = 0;
]

// trials = [1=getErasure;]
</block>

<trial constructSpline>
/ ontrialbegin = [
		expressions.createTestVector;
	// call the test vector generation routine
    expressions.createSpline;
	// call the spline construction routine
]
/ trialduration = 0
/ recorddata = false


</trial>

// pass x values to the interpolation routine, get interpolated y values
<trial interpolateSpline>
/ ontrialbegin = [
	values.x = list.x_test.nextvalue;
	// get our x value
    values.y = expressions.interpolateSpline;
	// get our interpolated y value
    list.y_test.setitem(values.y, list.x_test.currentindex);
	// add interpolated y to the test vector
]
/ trialduration = 0
/ recorddata = false
/ branch = [
	if (list.x_test.selectedcount < list.x_test.itemcount) {
		// run as often as we have x values in our test vector
        return trial.interpolateSpline;
		// this is just for ease of data output and plotting, it's not a problem to wrap everything in a single while() loop
	};
]
</trial>

<trial resetCounters>
/ ontrialbegin = [
	values.master_idx = 0;
	values.final_idx = 0;
	values.yindex = 0;
]
/ trialduration = 0
/ recorddata = false
</trial>

<trial constructValueVector>
/ ontrialbegin = [
		values.master_idx += 1;
		list.x_final.appenditem(list.RT.nextvalue);
		if (values.master_idx < values.erasure_RT - 15){
			list.y_final.appenditem(list.values.nextvalue);
		} else if (values.master_idx >= values.erasure_RT - 15 && values.master_idx <= values.erasure_RT + 15){
			values.yindex += 1;
			list.y_final.appenditem(list.y_test.item(values.yindex));
		} else if (values.master_idx > values.erasure_RT + 15){
			list.y_final.appenditem(list.values.nextvalue);
		}
]
/ trialduration = 0
/ recorddata = false
/ branch = [
	if (list.x_final.itemcount < 360) {
		return trial.constructValueVector;
	};
]
</trial>

<trial getValueVector>
/ ontrialbegin = [
	values.final_idx += 1;
	values.x_final = list.x_final.nextvalue;
	values.y_final = list.y_final.nextvalue;
]
/ trialduration = 0
/ recorddata = true
/ branch = [
	if (list.x_final.selectedcount < list.x_final.itemcount) {
		return trial.getValueVector;
	};
]
</trial>

<trial getErasure>
/ ontrialbegin = [
	// need to prepopulate values for this trial into a list with a random selection mode
	list.curr_values.reset();
	list.curr_RTs.reset();
	while (list.curr_values.itemcount < 360){
		values.master_idx += 1;
		list.curr_values.appenditem(list.values.nextvalue);
		list.curr_RTs.appenditem(list.RT.nextvalue);
	};
	// rewind the master index for trial/RT/values
	values.master_idx = values.master_idx - 360;
	values.i = 0;
	list.lower_half.reset();
	list.upper_half.reset();
	while (values.i < list.curr_values.itemcount) {
		list.curr_values.nextvalue;
		if (list.curr_values.currentvalue < list.curr_values.median) {
			list.lower_half.appenditem(list.curr_values.currentvalue);
		} else if (list.curr_values.currentvalue > list.curr_values.median) {
			list.upper_half.appenditem(list.curr_values.currentvalue);
		}
		values.i += 1;
	};
	values.lower_quartile = list.lower_half.median;
	values.upper_quartile = list.upper_half.median;
	list.era_values.reset();
	list.era_RTs.reset();
	values.j = 0;
	while (values.j < list.curr_values.itemcount){
		list.curr_values.nextvalue;
		list.curr_RTs.nextvalue;
		if (list.curr_values.currentvalue >= values.lower_quartile && list.curr_values.currentvalue <= values.upper_quartile) {
			list.era_values.appenditem(list.curr_values.currentvalue);
			list.era_RTs.appenditem(list.curr_RTs.currentvalue);
		}
		values.j += 1;
	};
	// this will be the value/RT of the erasure	
	values.erasure_index = round(rand(1, list.era_values.itemcount));
	list.era_values.nextindex;
	list.era_RTs.nextindex;
	values.erasure_value = list.era_values.nextvalue;
	values.erasure_RT = list.era_RTs.nextvalue;
	// this works because erasure_RT values come from era_RTs, a list with elements from 1:360, indicating an index that can also be used for degrees, as long as degrees_era is a list from 1:360 (which it should always be)
	// note do NOT append or remove items from degrees_era
	values.deg_index_era = values.erasure_RT;
	list.degrees_era.nextindex;
	// now remove current erasure degree from degrees_era, degrees_att, save into degrees used
	list.degrees_used.appenditem(list.degrees_era.nextvalue);
	// now we need to add back the degrees_att from degrees_used_att and remove block N-2'nd degrees_used to pool for erasures
	if (list.degrees_used.itemcount > 1) {
		// remove the first item from the list, allow re-erasure of erasure from N-2'nd block
		list.degrees_used.removeitem(1);
	}
	
	
	values.temp_index = 0;
	list.erasure_RTs.reset();
	// generate sequence of indices to map onto erasure
	values.i = 0;
	while (list.erasure_RTs.itemcount < 31){
		if (values.erasure_RT > 345) {
			values.right_index = max(mod(values.erasure_RT + 15, 360), 1);
			values.left_index = values.erasure_RT - 15;
			// this will be sequential and distance is equal
			// piecewise (x - 15 : x), (x: 360), (1: x + 15)
			if (list.erasure_RTs.itemcount <= 15) {
				list.erasure_RTs.appenditem(values.left_index + values.i);
				values.i += 1;
			} else if (list.erasure_RTs.itemcount == 16) {
				values.i = values.erasure_RT;
				list.erasure_RTs.appenditem(values.i);
			} else if (list.erasure_RTs.itemcount > 16 && values.i < 360) {
				values.i +=1;
				// last i = erasure_RT
				list.erasure_RTs.appenditem(values.i);
			} else if (values.i == 360){
				list.erasure_RTs.appenditem(values.i);
				values.i = 1;
			} else if (values.i > 360) {
				list.erasure_RTs.appenditem(values.i);
				values.i += 1;
			}
		} else if (values.erasure_RT < 16) {
			values.right_index = values.erasure_RT + 15;
			// this will be sequential
			values.left_index = max(mod(values.erasure_RT - 15, 360), 1);
			// piecewise (left_index : 360), (1 : x + 15)
			if (list.erasure_RTs.itemcount < values.left_index){
				list.erasure_RTs.appenditem(values.left_index + values.i); // 3,2,1,...
				values.i -= 1;
			} else if (list.erasure_RTs.itemcount == values.left_index){
				list.erasure_RTs.appenditem(values.left_index);
				values.i = 360;
			} else if (list.erasure_RTs.itemcount > values.left_index){ // 360, 359, 358,... 
				list.erasure_RTs.appenditem(values.i);
				values.i -=1;
			}
			
		} else {
			values.right_index = values.erasure_RT + 15;
			values.left_index = values.erasure_RT - 15;
			// sequential x - 15 : x + 15
			list.erasure_RTs.appenditem(values.erasure_RT - 15 + values.i);
			values.i += 1;
		}
	};
	
]
/ trialduration = 0
/ recorddata = false

</trial>

<data>
/ columns = (trialnum values.x_final values.y_final, values.erasure_RT, values.erasure_value) // write out x and y one value pair per row for easy plotting
// columns = (values.erasure_RT,values.erasure_value,values.right_index,values.left_index,values.lower_quartile,values.upper_quartile,list.curr_values.item(1),list.curr_values.itemcount)
/ separatefiles = true
</data>
