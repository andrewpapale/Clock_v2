2023-04-21 AndyP
EEG Clock variant #2
v2_0_4 implement breaks 1/3, 2/3 of the way through the task
v2_0_4 two schedules of stimuli in up to 6 blocks
v2_0_4 frozen ship during ISI
v2_0_4 new contingency set
v2_1_0 continuously varying stimuli
<defaults>
/ canvasaspectratio = (4,4)
/ minimumversion = "6.0.0.0"
/ inputdevice = mouse
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 0)
/ txbgcolor = white
/ txcolor = (0, 0, 0)
</defaults>


<expressions>
/ centerx = 0.5*display.canvaswidth
/ centery = 0.5*display.canvasheight
/ radius_px = parameters.circleproportion * display.canvasheight
/ radians_angle6 = rad(6)
/ radians_angle12 = rad(12)
/ radians_angle18 = rad(18)
/ radians_angle24 = rad(24)
/ radians_angle30 = rad(30)
/ radians_angle36 = rad(36)
/ radians_angle42 = rad(42)
/ radians_angle48 = rad(48)
/ radians_angle54 = rad(54)
/ radians_angle60 = rad(60)
/ radians_angle66 = rad(66)
/ radians_angle72 = rad(72)
/ radians_angle78 = rad(78)
/ radians_angle84 = rad(84)
/ radians_angle90 = rad(90)
/ radians_angle96 = rad(96)
/ radians_angle102 = rad(102)
/ radians_angle108 = rad(108)
/ radians_angle114 = rad(114)
/ radians_angle120 = rad(120)
/ radians_angle126 = rad(126)
/ radians_angle132 = rad(132)
/ radians_angle138 = rad(138)
/ radians_angle144 = rad(144)
/ radians_angle150 = rad(150)
/ radians_angle156 = rad(156)
/ radians_angle162 = rad(162)
/ radians_angle168 = rad(168)
/ radians_angle174 = rad(174)
/ radians_angle180 = rad(180)
/ radians_angle186 = rad(186)
/ radians_angle192 = rad(192)
/ radians_angle198 = rad(198)
/ radians_angle204 = rad(204)
/ radians_angle210 = rad(210)
/ radians_angle216 = rad(216)
/ radians_angle222 = rad(222)
/ radians_angle228 = rad(228)
/ radians_angle234 = rad(234)
/ radians_angle240 = rad(240)
/ radians_angle246 = rad(246)
/ radians_angle252 = rad(252)
/ radians_angle258 = rad(258)
/ radians_angle264 = rad(264)
/ radians_angle270 = rad(270)
/ radians_angle276 = rad(276)
/ radians_angle282 = rad(282)
/ radians_angle288 = rad(288)
/ radians_angle294 = rad(294)
/ radians_angle300 = rad(300)
/ radians_angle306 = rad(306)
/ radians_angle312 = rad(312)
/ radians_angle318 = rad(318)
/ radians_angle324 = rad(324)
/ radians_angle330 = rad(330)
/ radians_angle336 = rad(336)
/ radians_angle342 = rad(342)
/ radians_angle348 = rad(348)
/ radians_angle354 = rad(354)
/ heightchange_angle6 = sin(expressions.Radians_angle6) * expressions.radius_px
/ widthchange_angle6 = cos(expressions.Radians_angle6) * expressions.radius_px
/ heightchange_angle12 = sin(expressions.Radians_angle12) * expressions.radius_px
/ widthchange_angle12 = cos(expressions.Radians_angle12) * expressions.radius_px
/ heightchange_angle18 = sin(expressions.Radians_angle18) * expressions.radius_px
/ widthchange_angle18 = cos(expressions.Radians_angle18) * expressions.radius_px
/ heightchange_angle24 = sin(expressions.Radians_angle24) * expressions.radius_px
/ widthchange_angle24 = cos(expressions.Radians_angle24) * expressions.radius_px
/ heightchange_angle30 = sin(expressions.Radians_angle30) * expressions.radius_px
/ widthchange_angle30 = cos(expressions.Radians_angle30) * expressions.radius_px
/ heightchange_angle36 = sin(expressions.Radians_angle36) * expressions.radius_px
/ widthchange_angle36 = cos(expressions.Radians_angle36) * expressions.radius_px
/ heightchange_angle42 = sin(expressions.Radians_angle42) * expressions.radius_px
/ widthchange_angle42 = cos(expressions.Radians_angle42) * expressions.radius_px
/ heightchange_angle48 = sin(expressions.Radians_angle48) * expressions.radius_px
/ widthchange_angle48 = cos(expressions.Radians_angle48) * expressions.radius_px
/ heightchange_angle54 = sin(expressions.Radians_angle54) * expressions.radius_px
/ widthchange_angle54 = cos(expressions.Radians_angle54) * expressions.radius_px
/ heightchange_angle60 = sin(expressions.Radians_angle60) * expressions.radius_px
/ widthchange_angle60 = cos(expressions.Radians_angle60) * expressions.radius_px
/ heightchange_angle66 = sin(expressions.Radians_angle66) * expressions.radius_px
/ widthchange_angle66 = cos(expressions.Radians_angle66) * expressions.radius_px
/ heightchange_angle72 = sin(expressions.Radians_angle72) * expressions.radius_px
/ widthchange_angle72 = cos(expressions.Radians_angle72) * expressions.radius_px
/ heightchange_angle78 = sin(expressions.Radians_angle78) * expressions.radius_px
/ widthchange_angle78 = cos(expressions.Radians_angle78) * expressions.radius_px
/ heightchange_angle84 = sin(expressions.Radians_angle84) * expressions.radius_px
/ widthchange_angle84 = cos(expressions.Radians_angle84) * expressions.radius_px
/ heightchange_angle90 = sin(expressions.Radians_angle90) * expressions.radius_px
/ widthchange_angle90 = cos(expressions.Radians_angle90) * expressions.radius_px
/ heightchange_angle96 = sin(expressions.Radians_angle96) * expressions.radius_px
/ widthchange_angle96 = cos(expressions.Radians_angle96) * expressions.radius_px
/ heightchange_angle102 = sin(expressions.Radians_angle102) * expressions.radius_px
/ widthchange_angle102 = cos(expressions.Radians_angle102) * expressions.radius_px
/ heightchange_angle108 = sin(expressions.Radians_angle108) * expressions.radius_px
/ widthchange_angle108 = cos(expressions.Radians_angle108) * expressions.radius_px
/ heightchange_angle114 = sin(expressions.Radians_angle114) * expressions.radius_px
/ widthchange_angle114 = cos(expressions.Radians_angle114) * expressions.radius_px
/ heightchange_angle120 = sin(expressions.Radians_angle120) * expressions.radius_px
/ widthchange_angle120 = cos(expressions.Radians_angle120) * expressions.radius_px
/ heightchange_angle126 = sin(expressions.Radians_angle126) * expressions.radius_px
/ widthchange_angle126 = cos(expressions.Radians_angle126) * expressions.radius_px
/ heightchange_angle132 = sin(expressions.Radians_angle132) * expressions.radius_px
/ widthchange_angle132 = cos(expressions.Radians_angle132) * expressions.radius_px
/ heightchange_angle138 = sin(expressions.Radians_angle138) * expressions.radius_px
/ widthchange_angle138 = cos(expressions.Radians_angle138) * expressions.radius_px
/ heightchange_angle144 = sin(expressions.Radians_angle144) * expressions.radius_px
/ widthchange_angle144 = cos(expressions.Radians_angle144) * expressions.radius_px
/ heightchange_angle150 = sin(expressions.Radians_angle150) * expressions.radius_px
/ widthchange_angle150 = cos(expressions.Radians_angle150) * expressions.radius_px
/ heightchange_angle156 = sin(expressions.Radians_angle156) * expressions.radius_px
/ widthchange_angle156 = cos(expressions.Radians_angle156) * expressions.radius_px
/ heightchange_angle162 = sin(expressions.Radians_angle162) * expressions.radius_px
/ widthchange_angle162 = cos(expressions.Radians_angle162) * expressions.radius_px
/ heightchange_angle168 = sin(expressions.Radians_angle168) * expressions.radius_px
/ widthchange_angle168 = cos(expressions.Radians_angle168) * expressions.radius_px
/ heightchange_angle174 = sin(expressions.Radians_angle174) * expressions.radius_px
/ widthchange_angle174 = cos(expressions.Radians_angle174) * expressions.radius_px
/ heightchange_angle180 = sin(expressions.Radians_angle180) * expressions.radius_px
/ widthchange_angle180 = cos(expressions.Radians_angle180) * expressions.radius_px
/ heightchange_angle186 = sin(expressions.Radians_angle186) * expressions.radius_px
/ widthchange_angle186 = cos(expressions.Radians_angle186) * expressions.radius_px
/ heightchange_angle192 = sin(expressions.Radians_angle192) * expressions.radius_px
/ widthchange_angle192 = cos(expressions.Radians_angle192) * expressions.radius_px
/ heightchange_angle198 = sin(expressions.Radians_angle198) * expressions.radius_px
/ widthchange_angle198 = cos(expressions.Radians_angle198) * expressions.radius_px
/ heightchange_angle204 = sin(expressions.Radians_angle204) * expressions.radius_px
/ widthchange_angle204 = cos(expressions.Radians_angle204) * expressions.radius_px
/ heightchange_angle210 = sin(expressions.Radians_angle210) * expressions.radius_px
/ widthchange_angle210 = cos(expressions.Radians_angle210) * expressions.radius_px
/ heightchange_angle216 = sin(expressions.Radians_angle216) * expressions.radius_px
/ widthchange_angle216 = cos(expressions.Radians_angle216) * expressions.radius_px
/ heightchange_angle222 = sin(expressions.Radians_angle222) * expressions.radius_px
/ widthchange_angle222 = cos(expressions.Radians_angle222) * expressions.radius_px
/ heightchange_angle228 = sin(expressions.Radians_angle228) * expressions.radius_px
/ widthchange_angle228 = cos(expressions.Radians_angle228) * expressions.radius_px
/ heightchange_angle234 = sin(expressions.Radians_angle234) * expressions.radius_px
/ widthchange_angle234 = cos(expressions.Radians_angle234) * expressions.radius_px
/ heightchange_angle240 = sin(expressions.Radians_angle240) * expressions.radius_px
/ widthchange_angle240 = cos(expressions.Radians_angle240) * expressions.radius_px
/ heightchange_angle246 = sin(expressions.Radians_angle246) * expressions.radius_px
/ widthchange_angle246 = cos(expressions.Radians_angle246) * expressions.radius_px
/ heightchange_angle252 = sin(expressions.Radians_angle252) * expressions.radius_px
/ widthchange_angle252 = cos(expressions.Radians_angle252) * expressions.radius_px
/ heightchange_angle258 = sin(expressions.Radians_angle258) * expressions.radius_px
/ widthchange_angle258 = cos(expressions.Radians_angle258) * expressions.radius_px
/ heightchange_angle264 = sin(expressions.Radians_angle264) * expressions.radius_px
/ widthchange_angle264 = cos(expressions.Radians_angle264) * expressions.radius_px
/ heightchange_angle270 = sin(expressions.Radians_angle270) * expressions.radius_px
/ widthchange_angle270 = cos(expressions.Radians_angle270) * expressions.radius_px
/ heightchange_angle276 = sin(expressions.Radians_angle276) * expressions.radius_px
/ widthchange_angle276 = cos(expressions.Radians_angle276) * expressions.radius_px
/ heightchange_angle282 = sin(expressions.Radians_angle282) * expressions.radius_px
/ widthchange_angle282 = cos(expressions.Radians_angle282) * expressions.radius_px
/ heightchange_angle288 = sin(expressions.Radians_angle288) * expressions.radius_px
/ widthchange_angle288 = cos(expressions.Radians_angle288) * expressions.radius_px
/ heightchange_angle294 = sin(expressions.Radians_angle294) * expressions.radius_px
/ widthchange_angle294 = cos(expressions.Radians_angle294) * expressions.radius_px
/ heightchange_angle300 = sin(expressions.Radians_angle300) * expressions.radius_px
/ widthchange_angle300 = cos(expressions.Radians_angle300) * expressions.radius_px
/ heightchange_angle306 = sin(expressions.Radians_angle306) * expressions.radius_px
/ widthchange_angle306 = cos(expressions.Radians_angle306) * expressions.radius_px
/ heightchange_angle312 = sin(expressions.Radians_angle312) * expressions.radius_px
/ widthchange_angle312 = cos(expressions.Radians_angle312) * expressions.radius_px
/ heightchange_angle318 = sin(expressions.Radians_angle318) * expressions.radius_px
/ widthchange_angle318 = cos(expressions.Radians_angle318) * expressions.radius_px
/ heightchange_angle324 = sin(expressions.Radians_angle324) * expressions.radius_px
/ widthchange_angle324 = cos(expressions.Radians_angle324) * expressions.radius_px
/ heightchange_angle330 = sin(expressions.Radians_angle330) * expressions.radius_px
/ widthchange_angle330 = cos(expressions.Radians_angle330) * expressions.radius_px
/ heightchange_angle336 = sin(expressions.Radians_angle336) * expressions.radius_px
/ widthchange_angle336 = cos(expressions.Radians_angle336) * expressions.radius_px
/ heightchange_angle342 = sin(expressions.Radians_angle342) * expressions.radius_px
/ widthchange_angle342 = cos(expressions.Radians_angle342) * expressions.radius_px
/ heightchange_angle348 = sin(expressions.Radians_angle348) * expressions.radius_px
/ widthchange_angle348 = cos(expressions.Radians_angle348) * expressions.radius_px
/ heightchange_angle354 = sin(expressions.Radians_angle354) * expressions.radius_px
/ widthchange_angle354 = cos(expressions.Radians_angle354) * expressions.radius_px
/ heightchange_angle0 = 0
/ widthchange_angle0 = expressions.radius_px

</expressions>

<values>
/ k = 37;
/ Shift = 700;
/ rt_extended = 7000;
/ DEV_factor = 10;
/ DEV_factor2 = 1;
/ sin_factor = 0.25;
/ mag = NULL;
/ freq = NULL;
/ CEV_x = NULL;
/ IEV_x = NULL;
/ CEV_x2 = NULL;
/ DEV_x = NULL;
/ a = -5;
/ b = 5;
/ r = NULL;
/ ev = NULL;
/ inc = NULL;
/ inc_rg = NULL;
/ temp = NULL;
/ rng = NULL;
/ startPos = 75;
/ totalPoints = 0;
/ angDisp = 0;
/ circle_x = 0%;
/ circle_y = 0%;
/ n_revolutions = 0;
/ rt_shifted = NULL;
/ pos_shifted = NULL;
/ time_per_revolution = 5000;
/ gamma = values.time_per_revolution/100;
/ conversion = 0.03 / 100;
/ scrfunc = "dynamic";  //if dynamic, load 'table' from 'csv' and dynamically update contingency
/ totalEarnings = 0;
/ Earnings = NULL;
/ trialCount = 0;
/ trialCountTotal = 0;
/ blockCount = 0;
/ unc_att_start1 = 0;
/ unc_att_start2 = 0;
/ unc_att_start3 = 0;
/ unc_att_start4 = 0;
/ unc_att_start5 = 0;
/ unc_att_start6 = 0;
/ nunc_att1 = 0;
/ nunc_att2 = 0;
/ nunc_att3 = 0;
/ nunc_att4 = 0;
/ nunc_att5 = 0;
/ nunc_att6 = 0;
/ fogPos1 = 0;
/ fogPos3 = 0;
/ fogPos5 = 0 ;
/ fogPos_out = NULL;
/ windPos_out = NULL;
/ windPos2 = 0;
/ windPos4 = 0;
/ windPos6 = 0;
/ chooseFog1 = 0;
/ chooseWind2 = 0;
/ chooseFog3 = 0;
/ chooseWind4 = 0;
/ chooseFog5 = 0;
/ chooseWind6 = 0;
/ chooseAttentionalControl = 0;
/ chooseUncertainty = 0;
/ choose_unc_att1 = 0;
/ choose_unc_att2 = 0;
/ choose_unc_att3 = 0;
/ choose_unc_att4 = 0;
/ choose_unc_att5 = 0;
/ choose_unc_att6 = 0;
/ choose_unc_att_out1 = 0;
/ choose_unc_att_out2 = 0;
/ choose_unc_att_out3 = 0;
/ choose_unc_att_out4 = 0;
/ choose_unc_att_out5 = 0;
/ choose_unc_att_out6 = 0;
/ unc_att_count_out1 = 0;
/ unc_att_count_out2 = 0;
/ unc_att_count_out3 = 0;
/ unc_att_count_out4 = 0;
/ unc_att_count_out5 = 0;
/ unc_att_count_out6 = 0;
/ unc_att_count1 = 0;
/ unc_att_count2 = 0;
/ unc_att_count3 = 0;
/ unc_att_count4 = 0;
/ unc_att_count5 = 0;
/ unc_att_count6 = 0;
/ unc_att_block = 0;
/ meta_trialCount = 0;
/ flag1 = false;
/ flag2 = false;
/ flag3 = false;
/ flag4 = false;
/ flag5 = false;
/ flag6 = false;
/ index = 0;
/ gauss_sd = 0.001;
</values>



<parameters>
/ rtvspos = "POS" // if POS, the clock position in space matters, if RT, the time from the starting position matters
/ mushrooms = TRUE;
/ randStart = TRUE;
/ circleproportion = 0.33
/ clockdotSize = 2%
/ handDotSize = 3%
/ ntrials = 10;
/ attentional_control = "wind";
/ local_uncertainty = "fog";
</parameters>

<data>
/ columns = (build, computer.platform, computer.touch, date, time, subject, group, script.sessionid, blockcode, blocknum,
trialcode, list.ITI.currentvalue, list.preClockFreeze.currentvalue, latency, list.ISI.currentvalue, // this is the sequence of the task ITI, preClockFreeze, latency=moving ship, ISI=frozen ship.  Feedback is fixed at 1000ms.
trial.instructions5_1.response, trial.instructions5_2.response,values.startPos,values.scrfunc, parameters.rtvspos, parameters.randStart, 
values.mag, values.freq, values.ev, values.inc, values.gauss_sd, values.inc_rg, values.rng values.fogPos1, values.fogPos3, values.fogPos5, values.fogPos_out, list.wind_size.currentvalue,values.windPos2, values.windPos4, values.windPos6, values.windPos_out, 
values.chooseFog1, values.chooseWind2, values.chooseFog3, values.chooseWind4,values.chooseFog5, values.chooseWind6,
values.choose_unc_att1, values.choose_unc_att_out1, values.choose_unc_att2, values.choose_unc_att_out2, values.choose_unc_att3, values.choose_unc_att_out3, values.choose_unc_att4, values.choose_unc_att_out4, values.unc_att_count1, 
values.unc_att_count_out1,values.unc_att_count2, values.unc_att_count_out2, values.unc_att_count3, values.unc_att_count_out3, values.unc_att_count4,values.unc_att_count_out4,values.unc_att_count5,values.unc_att_count_out5,values.unc_att_count6,values.unc_att_count_out6,
values.chooseAttentionalControl, values.chooseUncertainty,
values.blockCount,parameters.ntrials, values.trialCount, values.meta_trialCount, parameters.attentional_control,parameters.local_uncertainty,
values.unc_att_start1, values.unc_att_start2, values.unc_att_start3, values.unc_att_start4,values.unc_att_start5, values.unc_att_start6, values.unc_att_block, list.rt_0.currentindex,values.index,
values.rt_shifted,values.pos_shifted, values.totalPoints, values.totalEarnings, values.Earnings)
</data>

<summarydata>
/ columns = (computer.platform,computer.touch,script.sessionid,values.k,values.Shift,values.rt_extended,
values.DEV_factor,values.DEV_factor2,values.sin_factor,values.time_per_revolution,expressions.radius_px, values.gamma)
</summarydata>

<picture frozenShip>
/ items = ("challenger-5631958_1280.png")
/ erase = true(white)
/ size = (12%, 0.1px*display.canvaswidth)
</picture>

<picture fixationCross>
/ items = ("fixationCross.png")
/ position = (50%, 50%)
/ size = (7%, 7%)
/ erase = true(white)
</picture>

<picture mushroom1>
/ items = ("mushrooms1.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture no_mushrooms>
/ items = ("no_mushrooms.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture sampleMushroomL>
/ items = ("mushrooms1.png")
/ position = (20%, 80%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture sampleMushroomR>
/ items = ("mushrooms1.png")
/ position = (80%, 80%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture sampleAttentionL>
/ items = ("wind0.png")
/ position = (20%, 80%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture sampleAttentionR>
/ items = ("wind0.png")
/ position = (80%, 80%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture timeout>
/ items = ("timeout.png")
/ position = (50%, 50%)
/ size = (35%, 35%)
/ erase = true(white)
</picture>

<picture feedback>
/ items = ("mushrooms1.png") //default
/ position = (50%, 50%)
/ size = (25%, 25%)
/ erase = true(white)
</picture>

<picture fog0>
/ items = ("fog0.png")
/ hposition = expressions.centerx + expressions.widthchange_angle0
/ vposition = expressions.centery + expressions.heightchange_angle0
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture wind0>
/ items = ("wind0.png") 
/ hposition = expressions.centerx + expressions.widthchange_angle0
/ vposition = expressions.centery + expressions.heightchange_angle0
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<list fog_hpos>
/ items = (
expressions.centerx + expressions.widthchange_angle0,
expressions.centerx + expressions.widthchange_angle30,
expressions.centerx + expressions.widthchange_angle60,
expressions.centerx + expressions.widthchange_angle90,
expressions.centerx + expressions.widthchange_angle120,
expressions.centerx + expressions.widthchange_angle150,
expressions.centerx + expressions.widthchange_angle180,
expressions.centerx + expressions.widthchange_angle210,
expressions.centerx + expressions.widthchange_angle240,
expressions.centerx + expressions.widthchange_angle270,
expressions.centerx + expressions.widthchange_angle300,
expressions.centerx + expressions.widthchange_angle330
)
/ selectionmode = list.fog_hpos.currentindex
/ selectionrate = always
</list>

<list fog_vpos>
/ items = (
expressions.centery + expressions.heightchange_angle0,
expressions.centery + expressions.heightchange_angle30,
expressions.centery + expressions.heightchange_angle60,
expressions.centery + expressions.heightchange_angle90,
expressions.centery + expressions.heightchange_angle120,
expressions.centery + expressions.heightchange_angle150,
expressions.centery + expressions.heightchange_angle180,
expressions.centery + expressions.heightchange_angle210,
expressions.centery + expressions.heightchange_angle240,
expressions.centery + expressions.heightchange_angle270,
expressions.centery + expressions.heightchange_angle300,
expressions.centery + expressions.heightchange_angle330
)
/ selectionmode = list.fog_vpos.currentindex
/ selectionrate = always
</list>


<list wind_hpos>
/ items = (
expressions.centerx + expressions.widthchange_angle0,
expressions.centerx + expressions.widthchange_angle30,
expressions.centerx + expressions.widthchange_angle60,
expressions.centerx + expressions.widthchange_angle90,
expressions.centerx + expressions.widthchange_angle120,
expressions.centerx + expressions.widthchange_angle150,
expressions.centerx + expressions.widthchange_angle180,
expressions.centerx + expressions.widthchange_angle210,
expressions.centerx + expressions.widthchange_angle240,
expressions.centerx + expressions.widthchange_angle270,
expressions.centerx + expressions.widthchange_angle300,
expressions.centerx + expressions.widthchange_angle330
)
/ selectionmode = list.wind_hpos.currentindex
/ selectionrate = always
</list>

<list wind_vpos>
/ items = (
expressions.centery + expressions.heightchange_angle0,
expressions.centery + expressions.heightchange_angle30,
expressions.centery + expressions.heightchange_angle60,
expressions.centery + expressions.heightchange_angle90,
expressions.centery + expressions.heightchange_angle120,
expressions.centery + expressions.heightchange_angle150,
expressions.centery + expressions.heightchange_angle180,
expressions.centery + expressions.heightchange_angle210,
expressions.centery + expressions.heightchange_angle240,
expressions.centery + expressions.heightchange_angle270,
expressions.centery + expressions.heightchange_angle300,
expressions.centery + expressions.heightchange_angle330
)
/ selectionmode = list.wind_vpos.currentindex
/ selectionrate = always
</list>

<list wind_size>
/ selectionmode = sequence
</list>

<list ITI>
/ items = ( 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500)
/ poolsize = 41
/ selectionmode = random
</list>

<list ISI>
/ items = (200,210,220,230,240,250,260,270,280,290,300,310,320,330,340,350,360,370,380,390,400,410,420,430,440,450,460,470,480,490,500,510,520,530,540,550,560,570,580,590,600)
/ poolsize = 41
/ selectionmode = random
</list>


<list preClockFreeze>
/ items = (500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700)
/ poolsize = 21
/ selectionmode = random
</list>


<picture unc_att>
/ items = ("fog0.png") //default
/ hposition = list.wind_hpos.nextvalue
/ vposition = list.wind_vpos.nextvalue
/ size = (list.wind_size.currentvalue, list.wind_size.currentvalue)
/ erase = true(white)
</picture>

<picture attention>
/ items = ("fog0.png") //default
/ hposition = list.fog_hpos.nextvalue
/ vposition = list.fog_vpos.nextvalue
/ size = (30%, 30%)
/ erase = true(white)
</picture>

<picture planet>
/ items = ("planet-1138237_1280.png")
/ position = (50%, 50%)
/ size = (35%,35%)
/ erase = true(white)
</picture>


<item instructions1>
/ 1 = "In this game, you are picking mushrooms on a far away planet.
       
Your spacecraft will orbit the planet, and you can land it at any point by pressing the spacebar.
      
If you stop in a good location, you will find more mushrooms. Every 100 mushrooms is worth 3 cents.
      
The goal of this game is to get the most mushrooms.

You will get about 380 tries to land your spacecraft with two 1 minute breaks around trials 130 and 250. 

The game takes about 25-30 minutes and there are some questions at the end."
</item>

<text instructions2>
/ items = ("Press the spacebar to land the spacecraft.
This is just for practice.")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<text instructions3>
/ items = ("Sometimes <%text.local_uncertainty.item.1%> will appear.
If you land the spacecraft on the location of the <%text.local_uncertainty.item.2%>, 
the conditions will change in that location ONLY. That is, the number 
of mushrooms you will earn by landing on the area covered by the <%text.local_uncertainty.item.2%> 
will be different from what you previously learned about that location. 
However, all other locations around the planet will remain the same")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<text instructions4>
/ items = ("Try to land the spacecraft
on the <%text.local_uncertainty.item.2%>.")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<text instructions5>
/ items = ("When <%text.attentional_control.item.1%> appears,
it has no effect on the number of mushrooms
anywhere on the planet.")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<text instructions6>
/ items = ("Now you will play for real mushrooms 
(ahem...money!). 
Get ready!")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<text local_uncertainty>
/ items = ("","")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<text attentional_control>
/ items = ("","")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<text next>
/ items = ("Next")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 0)
/ position = (50%, 75%)
/ size = (25%, 15%)
/ vjustify = center
/ txbgcolor = gainsboro
/ txcolor = black
</text>

<text true_box>
/ items = ("True")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 0)
/ position = (75%, 75%)
/ size = (25%, 15%)
/ vjustify = center
/ txbgcolor = gainsboro
/ txcolor = black
</text>

<text false_box>
/ items = ("False")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 0)
/ position = (25%, 75%)
/ size = (25%, 15%)
/ vjustify = center
/ txbgcolor = gainsboro
/ txcolor = black
</text>

<text payment>
/ items = ("You won a total of $ <%values.totalEarnings%> dollars.
Thank you for playing!")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<text feedback1>
/ items = ("You got <% values.inc_rg %> mushroom(s)")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 60%)
/ vjustify = center
/ hjustify = left
</text>

<picture animatedCircle>
/ items = ("challenger-5631958_1280.png")
/ size = (12%, 0.1px*display.canvaswidth)
/ animation = circle(values.time_per_revolution,-1,values.startPos,50%,50%,expressions.radius_px)
/ erase = false
</picture>

****************************************************************
Clock Face with 60 equally spaced dots that are 6degrees apart
360degress/60 = 6degrees
****************************************************************

<shape dot1>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle276)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle276)
/ erase = true(white)
</shape>
 
<shape dot2>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*3,255/61*3,255/61*3)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle282)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle282)
/ erase = true(white)
</shape>
 
<shape dot3>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*4,255/61*4,255/61*4)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle288)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle288)
/ erase = true(white)
</shape>
 
<shape dot4>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*5,255/61*5,255/61*5)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle294)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle294)
/ erase = true(white)
</shape>
 
<shape dot5>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*6,255/61*6,255/61*6)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle300)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle300)
/ erase = true(white)
</shape>
 
<shape dot6>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*7,255/61*7,255/61*7)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle306)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle306)
/ erase = true(white)
</shape>
 
<shape dot7>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*8,255/61*8,255/61*8)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle312)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle312)
/ erase = true(white)
</shape>
 
<shape dot8>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*9,255/61*9,255/61*9)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle318)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle318)
/ erase = true(white)
</shape>
 
<shape dot9>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*10,255/61*10,255/61*10)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle324)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle324)
/ erase = true(white)
</shape>
 
<shape dot10>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*11,255/61*11,255/61*11)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle330)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle330)
/ erase = true(white)
</shape>
 
<shape dot11>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*12,255/61*12,255/61*12)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle336)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle336)
/ erase = true(white)
</shape>
 
<shape dot12>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*13,255/61*13,255/61*13)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle342)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle342)
/ erase = true(white)
</shape>
 
<shape dot13>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*14,255/61*14,255/61*14)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle348)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle348)
/ erase = true(white)
</shape>
 
<shape dot14>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*15,255/61*15,255/61*15)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle354)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle354)
/ erase = true(white)
</shape>
 
<shape dot15>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*16,255/61*16,255/61*16)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle0)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle0)
/ erase = true(white)
</shape>

<shape dot16>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*17,255/61*17,255/61*17)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle6)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle6)
/ erase = true(white)
</shape>
 
<shape dot17>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*18,255/61*18,255/61*18)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle12)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle12)
/ erase = true(white)
</shape>
 
<shape dot18>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*19,255/61*19,255/61*19)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle18)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle18)
/ erase = true(white)
</shape>
 
<shape dot19>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*19,255/61*19,255/61*19)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle24)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle24)
/ erase = true(white)
</shape>
 
<shape dot20>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*20,255/61*20,255/61*20)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle30)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle30)
/ erase = true(white)
</shape>
 
<shape dot21>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*21,255/61*21,255/61*21)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle36)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle36)
/ erase = true(white)
</shape>
 
<shape dot22>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*22,255/61*22,255/61*22)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle42)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle42)
/ erase = true(white)
</shape>
 
<shape dot23>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*23,255/61*23,255/61*23)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle48)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle48)
/ erase = true(white)
</shape>
 
<shape dot24>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*24,255/61*24,255/61*24)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle54)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle54)
/ erase = true(white)
</shape>
 
<shape dot25>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*25,255/61*25,255/61*25)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle60)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle60)
/ erase = true(white)
</shape>
 
<shape dot26>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*26,255/61*26,255/61*26)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle66)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle66)
/ erase = true(white)
</shape>
 
<shape dot27>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*27,255/61*27,255/61*27)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle72)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle72)
/ erase = true(white)
</shape>
 
<shape dot28>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*28,255/61*28,255/61*28)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle78)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle78)
/ erase = true(white)
</shape>
 
<shape dot29>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*29,255/61*29,255/61*29)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle84)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle84)
/ erase = true(white)
</shape>
 
<shape dot30>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*30,255/61*30,255/61*30)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle90)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle90)
/ erase = true(white)
</shape>
 
<shape dot31>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*31,255/61*31,255/61*31)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle96)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle96)
/ erase = true(white)
</shape>
 
<shape dot32>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*32,255/61*32,255/61*32)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle102)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle102)
/ erase = true(white)
</shape>
 
<shape dot33>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*33,255/61*33,255/61*33)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle108)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle108)
/ erase = true(white)
</shape>
 
<shape dot34>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*34,255/61*34,255/61*34)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle114)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle114)
/ erase = true(white)
</shape>
 
<shape dot35>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*35,255/61*35,255/61*35)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle120)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle120)
/ erase = true(white)
</shape>
 
<shape dot36>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*36,255/61*36,255/61*36)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle126)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle126)
/ erase = true(white)
</shape>
 
<shape dot37>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*37,255/61*37,255/61*37)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle132)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle132)
/ erase = true(white)
</shape>
 
<shape dot38>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*38,255/61*38,255/61*38)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle138)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle138)
/ erase = true(white)
</shape>
 
<shape dot39>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*39,255/61*39,255/61*39)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle144)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle144)
/ erase = true(white)
</shape>
 
<shape dot40>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*40,255/61*40,255/61*40)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle150)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle150)
/ erase = true(white)
</shape>
 
<shape dot41>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*41,255/61*41,255/61*41)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle156)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle156)
/ erase = true(white)
</shape>
 
<shape dot42>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*42,255/61*42,255/61*42)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle162)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle162)
/ erase = true(white)
</shape>
 
<shape dot43>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*43,255/61*43,255/61*43)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle168)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle168)
/ erase = true(white)
</shape>
 
<shape dot44>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*44,255/61*44,255/61*44)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle174)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle174)
/ erase = true(white)
</shape>
 
<shape dot45>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*45,255/61*45,255/61*45)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle180)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle180)
/ erase = true(white)
</shape>
 
<shape dot46>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*46,255/61*46,255/61*46)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle186)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle186)
/ erase = true(white)
</shape>
 
<shape dot47>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*47,255/61*47,255/61*47)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle192)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle192)
/ erase = true(white)
</shape>
 
<shape dot48>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*48,255/61*48,255/61*48)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle198)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle198)
/ erase = true(white)
</shape>
 
<shape dot49>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*49,255/61*49,255/61*49)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle204)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle204)
/ erase = true(white)
</shape>
 
<shape dot50>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*50,255/61*50,255/61*50)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle210)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle210)
/ erase = true(white)
</shape>
 
<shape dot51>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*51,255/61*51,255/61*51)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle216)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle216)
/ erase = true(white)
</shape>
 
<shape dot52>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*52,255/61*52,255/61*52)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle222)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle222)
/ erase = true(white)
</shape>
 
<shape dot53>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*53,255/61*53,255/61*53)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle228)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle228)
/ erase = true(white)
</shape>
 
<shape dot54>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*54,255/61*54,255/61*54)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle234)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle234)
/ erase = true(white)
</shape>
 
<shape dot55>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*55,255/61*55,255/61*55)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle240)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle240)
/ erase = true(white)
</shape>
 
<shape dot56>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*56,255/61*56,255/61*56)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle246)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle246)
/ erase = true(white)
</shape>
 
<shape dot57>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*57,255/61*57,255/61*57)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle252)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle252)
/ erase = true(white)
</shape>
 
<shape dot58>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*58,255/61*58,255/61*58)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle258)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle258)
/ erase = true(white)
</shape>
 
<shape dot59>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*59,255/61*59,255/61*59)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle264)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle264)
/ erase = true(white)
</shape>
 
<shape dot60>
/ shape = circle
/ size = (parameters.clockdotSize, parameters.clockdotSize)
// color = (255/61*60,255/61*60,255/61*60)
/ color = (255/61*2,255/61*2,255/61*2)
/ hposition = 1px * (expressions.centerx + expressions.widthchange_angle270)
/ vposition = 1px * (expressions.centery + expressions.heightchange_angle270)
/ erase = true(white)
</shape>

<text pos>
/ items = ("<%values.circle_x%>, <%values.circle_y%>")
/ erase = false
/ position = (50%,50%)
</text>

<text rt_shifted>
/ items = ("<%values.rt_shifted%>")
/ erase = false
/ position = (50%,50%)
</text>


<text scrfunc>
/ items = ("<%values.scrfunc%>")
/ erase = false
/ position = (50%,50%)
</text>

<text cloudPos>
/ items = ("<%values.fogPos1%>")
/ erase = false
/ position = (40%,60%)
</text>

<text instructions1>
/ items = instructions1
/ select = 1
/ position = (50%, 35%)
/ fontstyle = ("Arial", 2%)
/ size = (90%, 90%)
/ hjustify = left
/ valign = top
</text>

<block instructions> 
/ trials = [1=instructions1, instructions2, instructions2_5, instructions3]

</block>


<text testSubject>
/ items = ("<%script.subjectid%>")
/ erase = false
/ position = (40%,60%)
</text>

<trial instructions1>
/ stimulusframes = [1=instructions1, sampleMushroomL, sampleMushroomR, next]
/ validresponse = (next)
</trial>

<text goodJob>
/ items = ("Good Job!")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<trial displayGoodJob>
/ stimulusframes = [1=goodJob, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60, next]
/ validresponse = (next)
</trial>

<trial instructions2>
/ stimulustimes = [0=instructions2, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60;

1000 = instructions2, animatedCircle, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60]

/ inputdevice = keyboard
/ beginresponsetime = 1000
/ validresponse = (" ") 
/ recorddata = FALSE
/ branch = [
	return trial.displayGoodJob;
]
</trial>

<text instructions2_5>
/ items = ("If you don't respond
in 6.5s, you will run out of fuel
and get no mushrooms")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<text spacebardisabled>
/ items = ("space bar disabled, sorry!")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 65%)
/ vjustify = center
/ hjustify = left
/ erase = true(white)
</text>

< trial instructions2_5>

/ stimulustimes = [0=instructions2_5, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60;

1000 = instructions2_5, animatedCircle, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60;

1500 = spacebardisabled, animatedCircle, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60;

2000 = animatedCircle, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60;

2500 = spacebardisabled, animatedCircle, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60;
]
/ timeout = 7500
/ recorddata = FALSE
/ branch = [
	return trial.feedback2_5;
]
</trial>

<trial feedback2_5>
/ ontrialbegin = [
	picture.feedback.item.1 = "timeout.png";
	values.Earnings = 0;
	values.inc_rg = 0;
]

/ stimulusframes = [
	1=picture.feedback, text.feedback1, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60;
]
/ trialduration = 3000
</trial>

<trial instructions3>
/ stimulusframes = [1=instructions3, next]
/ validresponse = (next)
/ branch = [
	trial.instructions4;
]
</trial>

<text sampleResponse>
/ items = (" ")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 50%)
/ vjustify = center
/ hjustify = left
</text>

<trial instructions4>
/ ontrialbegin = [
	if (parameters.local_uncertainty=="cloud") {
		picture.unc_att.item.1 = "fog20.png";
		list.wind_size.appenditem = 30%;
		list.wind_size.nextvalue;
	} else if (parameters.local_uncertainty=="wind") {
		picture.unc_att.item.1 = "wind20.png";
		list.wind_size.appenditem = 25%;
		list.wind_size.nextvalue;
	}
	picture.unc_att.hposition = expressions.centerx + expressions.widthchange_angle120;
	picture.unc_att.vposition = expressions.centery + expressions.heightchange_angle120;
	values.startPos = 75;
]

/ stimulustimes = [0=instructions4, unc_att, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60;

1000 = instructions4, animatedCircle, unc_att, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60
]

/ inputdevice = keyboard
/ beginresponsetime = 1000
/ validresponse = (" ") 
/ responseinterrupt = immediate
/ branch = [
	return trial.sampleResponse;
]
</trial>

<trial instructions5>
/ ontrialbegin = [
	if (parameters.attentional_control=="cloud") {
		picture.sampleAttentionR.item.1 = "fog0.png";
		picture.sampleAttentionL.item.1 = "fog0.png";
	} else if (parameters.attentional_control=="wind") {
		picture.sampleAttentionR.item.1 = "wind0.png";
		picture.sampleAttentionL.item.1 = "wind0.png";
	}
]
/ stimulusframes = [1=instructions5, sampleAttentionR, sampleAttentionL, next]
/ validresponse = (next)
/ branch = [
	trial.instructions5_1;
]
</trial>

<text instructions5_1>
/ items = ("Please check your understanding by answering the following question: 
What do you think happens when you land on the <%text.local_uncertainty.items.2%>?

The number of mushrooms...")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<text instructions5_2>
/ items = ("Please check your understanding by answering the following question: 
What do you think happens when you land on the <%text.attentional_control.items.2%>?

The number of mushrooms...")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<trial instructions5_1>
/ ontrialbegin = [
	if (parameters.local_uncertainty=="cloud") {
		picture.unc_att.item.1 = "fog0.png";
	} else if (parameters.local_uncertainty=="wind") {
		picture.unc_att.item.1 = "wind0.png";
	}
	picture.unc_att.hposition = expressions.centerx + expressions.widthchange_angle270;
	picture.unc_att.vposition = expressions.centery + expressions.heightchange_angle270;
]

/ stimulusframes = [1=instructions5_1, unc_att, local_box, global_box, nothing_box, increase_box]
/ validresponse = (local_box,global_box,nothing_box,increase_box)
/ recorddata = TRUE
/ branch = [
	trial.dummytrial;
]
</trial>

<trial instructions5_3>
/ stimulusframes = [
	1=instructions5_3, next
]
/ validresponse = (next)
/ branch = [
	trial.instructions6;
]

</trial>

<text instructions5_3>
/ items = ("To review, you will have to learn about which 
locations earn you the greatest number of mushrooms by experience.
 
At certain points throughout the game, you might see clouds or wind 
around your planet. Remember these 2 things:

(1) <%text.attentional_control.items.1%> has no effect on the number 
of mushrooms you earn, so you should continue to search 
for the location that you think will earn you the most mushrooms.

(2) <%text.local_uncertainty.items.1%> affects the local conditions 
in that area of the planet, so if you choose to land on the <%text.local_uncertainty.items.2%>, 
the number of mushrooms you will earn there will change. 
However, conditions will remain the same throughout the rest 
of the planet.
")
/ fontstyle = ("Arial", 2.5%, false, false, false, false, 5, 238)
/ position = (50%, 40%)
/ vjustify = center
/ hjustify = left
</text>

<text local_box>
/ items = ("only on that part of the planet changes")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 0)
/ position = (10%, 75%)
/ size = (20%, 20%)
/ vjustify = center
/ txbgcolor = gainsboro
/ txcolor = black
</text>

<text global_box>
/ items = ("all over the entire planet changes")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 0)
/ position = (35%, 75%)
/ size = (20%, 20%)
/ vjustify = center
/ txbgcolor = gainsboro
/ txcolor = black
</text>

<text nothing_box>
/ items = ("does not change anywhere")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 0)
/ position = (60%, 75%)
/ size = (20%, 20%)
/ vjustify = center
/ txbgcolor = gainsboro
/ txcolor = black
</text>

<text increase_box>
/ items = ("will always increase")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 0)
/ position = (85%, 75%)
/ size = (20%, 20%)
/ vjustify = center
/ txbgcolor = gainsboro
/ txcolor = black
</text>

<trial dummytrial>
/ trialduration = 100;
/ branch = [
	if (trial.instructions5_1.response=="local_box") {
		trial.posfeedback1;
	} else if (trial.instructions5_1.response!="local_box") {
		trial.negfeedback1;
	}
]
</trial>

<trial dummytrial1>
/ trialduration = 100;
/ branch = [
	if (trial.instructions5_2.response!="nothing_box") {
		trial.negfeedback2;
	} else if (trial.instructions5_2.response=="nothing_box") {
		trial.posfeedback2;
	}
]
</trial>

<text posfeedback1>
/ items = ("Correct! if you land on the <%text.local_uncertainty.items.2%>,
the number of mushrooms only on that part of the planet 
will change. The number of mushrooms everywhere else 
on the planet will stay the same.")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<trial posfeedback1>
/ stimulusframes = [1=posfeedback1, next]
/ validresponse = (next)
/ branch = [
	trial.instructions5_2;
]
</trial>

<text negfeedback1>
/ items = ("Incorrect, if you land on the <%text.local_uncertainty.items.2%>, 
the number of mushrooms only on that part of the planet 
will change from what you experienced before.  
The number of mushrooms everywhere else on
the planet will stay the same.")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<trial negfeedback1>
/ stimulusframes = [1=negfeedback1, next]
/ validresponse = (next)
/ branch = [
	trial.instructions3;
]
</trial>

<text posfeedback2>
/ items = ("Correct! if you land on the <%text.attentional_control.items.2%>,
this has absolutely no effect on the 
number of mushrooms anywhere on the planet.")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<trial posfeedback2>
/ stimulusframes = [1=posfeedback2, next]
/ validresponse = (next)
/ branch = [
	trial.instructions5_3;
]
</trial>

<text negfeedback2>
/ items = ("Incorrect, if you land on the <%text.attentional_control.items.2%>,
this has absolutely no effect on the 
number of mushrooms anywhere on the planet.")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<trial negfeedback2>
/ stimulusframes = [1=negfeedback2, next]
/ validresponse = (next)
/ branch = [
	trial.instructions3;
]
</trial>

<trial instructions5_2>
/ ontrialbegin = [
	if (parameters.attentional_control=="cloud") {
		picture.unc_att.item.1 = "fog0.png";
	} else if (parameters.attentional_control=="wind") {
		picture.unc_att.item.1 = "wind0.png";
	}
	picture.unc_att.hposition = expressions.centerx + expressions.widthchange_angle270;
	picture.unc_att.vposition = expressions.centery + expressions.heightchange_angle270;
]

/ stimulusframes = [1=instructions5_2, unc_att, local_box, global_box, nothing_box, increase_box]
/ validresponse = (local_box,global_box,nothing_box,increase_box)
/ recorddata = TRUE
/ branch = [
	trial.dummytrial1;
]
</trial>

<trial instructions6>
/ stimulusframes = [1=instructions6, next]
/ validresponse = (next)
/ branch = [
	return trial.countdown;
]
</trial>

<text latencyTest>
/ items = ("<% trial.experiment_noU.latency%>")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<text latencyTest2>
/ items = ("<% values.rt_shifted%>")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<text magtest>
/ items = ("<% values.mag%>")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>


<text chooseUncertainty>
/ items = ("<% values.chooseUncertainty%>")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<trial sampleResponse>
/ ontrialbegin = [
	if (values.startPos >= 0 && values.startPos < 75) {
		values.rt_shifted = mod(values.gamma*(values.startPos+25)+trial.instructions4.latency,values.time_per_revolution);
	} else if (values.startPos >= 75) {
		values.rt_shifted = mod(values.gamma*(values.startPos-75)+trial.instructions4.latency,values.time_per_revolution);
	}
	if (values.rt_shifted > 2652 && values.rt_shifted < 3298) {
		text.sampleResponse.items.1 = "Good Job!"
	} else if (values.rt_shifted <= 2652 || values.rt_shifted >= 3298) {
		text.sampleResponse.items.1 = "Try Again!"
	}
]
/ stimulustimes = [0=sampleResponse, unc_att, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60;
]
/ timeout = 3000
/ branch = [
	if (values.rt_shifted  <= 2652 || values.rt_shifted  >= 3298) {
		trial.instructions4;
	} else if (values.rt_shifted  > 2652 && values.rt_shifted  < 3298) {
		trial.instructions5;
	}
]
</trial>


<text three>
/ items = ("3")
/ fontstyle = ("Arial", 12%, false, false, false, false, 5, 238)
/ position = (50%, 50%)
/ vjustify = center
/ hjustify = left
</text>

<text two>
/ items = ("2")
/ fontstyle = ("Arial", 12%, false, false, false, false, 5, 238)
/ position = (50%, 50%)
/ vjustify = center
/ hjustify = left
</text>

<text one>
/ items = ("1")
/ fontstyle = ("Arial", 12%, false, false, false, false, 5, 238)
/ position = (50%, 50%)
/ vjustify = center
/ hjustify = left
</text>

<trial countdown>
/ stimulustimes = [0=three;1000=two;2000=one]
/ timeout = 3000
</trial>

<clock breaktimer>
/ format = "mm:ss"
/ mode = timer
/ erase = true(white)
/ monitor = 1
/ position = (50%, 50%)
/ resetrate = block
/ timeout = 60000
/ txbgcolor = white
/ txcolor = black
</clock>

<text breaktext>
/ position = (50%, 40%)
/ erase = true(white)
/ items = ("Please relax for 1 minute")
</text>


<block break>
/ trials = [1=break; 2=presscont;]
</block>

<trial break>
/ recorddata = false
/ stimulustimes = [0 = dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60, breaktext, breaktimer;
]
/ timeout = 60000;
/ recorddata = false
</trial>

<text presscont>
/ txcolor = black
/ position = (50%, 50%)
/ items = ("Press the space bar to continue")
</text>

<trial presscont>
/ recorddata = true
/ stimulustimes = [0 = dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60, presscont;
]
/ inputdevice = keyboard
/ beginresponsetime = 0
/ recorddata = false
/ validresponse = (" ") 
/ responseinterrupt = immediate
</trial>

<block experiment>
/ onblockbegin = [
	parameters.ntrials = 42;
	values.blockCount = values.blockCount + 1;
	values.trialCount = 0;
	values.trialCountTotal = values.trialCountTotal + parameters.ntrials;
	values.unc_att_block = 0;
	values.choose_unc_att1 = 0;
	values.choose_unc_att2 = 0;
	values.choose_unc_att3 = 0;
	values.choose_unc_att4 = 0;
	values.choose_unc_att5 = 0;
	values.choose_unc_att6 = 0;
	values.unc_att_count1 = 0;
	values.unc_att_count2 = 0;
	values.unc_att_count3 = 0;
	values.unc_att_count4 = 0;
	values.unc_att_count5 = 0;
	values.unc_att_count6 = 0;
	values.flag1 = false;
	values.flag2 = false;
	values.flag3 = false;
	values.flag4 = false;
	values.flag5 = false;
	values.flag6 = false;
	// determine position of fog
]
/ trials = [1-42=trial.ITI]
</block>


<trial ITI>
/ ontrialbegin = [
	values.trialCount  += 1;
	values.meta_trialCount +=1;
	values.index +=1;
	values.index = mod(values.index-1, 306) +1;
	list.preClockFreeze.nextvalue;
	list.ITI.nextvalue;
	list.ISI.nextvalue;
	list.rt_0.nextindex;
	list.rt_1.nextindex;
	list.rt_2.nextindex;
	list.rt_3.nextindex;
	list.rt_4.nextindex;
	list.rt_5.nextindex;
	list.rt_6.nextindex;
	list.rt_7.nextindex;
	list.rt_8.nextindex;
	list.rt_9.nextindex;
	list.rt_10.nextindex;
	list.rt_11.nextindex;
	list.rt_12.nextindex;
	list.rt_13.nextindex;
	list.rt_14.nextindex;
	list.rt_15.nextindex;
	list.rt_16.nextindex;
	list.rt_17.nextindex;
	list.rt_18.nextindex;
	list.rt_19.nextindex;
	list.rt_20.nextindex;
	list.rt_21.nextindex;
	list.rt_22.nextindex;
	list.rt_23.nextindex;
	list.rt_24.nextindex;
	list.rt_25.nextindex;
	list.rt_26.nextindex;
	list.rt_27.nextindex;
	list.rt_28.nextindex;
	list.rt_29.nextindex;
	list.rt_30.nextindex;
	list.rt_31.nextindex;
	list.rt_32.nextindex;
	list.rt_33.nextindex;
	list.rt_34.nextindex;
	list.rt_35.nextindex;
	list.rt_36.nextindex;
	list.rt_37.nextindex;
	list.rt_38.nextindex;
	list.rt_39.nextindex;
	list.rt_40.nextindex;
	list.rt_41.nextindex;
	list.rt_42.nextindex;
	list.rt_43.nextindex;
	list.rt_44.nextindex;
	list.rt_45.nextindex;
	list.rt_46.nextindex;
	list.rt_47.nextindex;
	list.rt_48.nextindex;
	list.rt_49.nextindex;
	list.rt_50.nextindex;
	list.rt_51.nextindex;
	list.rt_52.nextindex;
	list.rt_53.nextindex;
	list.rt_54.nextindex;
	list.rt_55.nextindex;
	list.rt_56.nextindex;
	list.rt_57.nextindex;
	list.rt_58.nextindex;
	list.rt_59.nextindex;
	list.rt_60.nextindex;
	list.rt_61.nextindex;
	list.rt_62.nextindex;
	list.rt_63.nextindex;
	list.rt_64.nextindex;
	list.rt_65.nextindex;
	list.rt_66.nextindex;
	list.rt_67.nextindex;
	list.rt_68.nextindex;
	list.rt_69.nextindex;
	list.rt_70.nextindex;
	list.rt_71.nextindex;
	list.rt_72.nextindex;
	list.rt_73.nextindex;
	list.rt_74.nextindex;
	list.rt_75.nextindex;
	list.rt_76.nextindex;
	list.rt_77.nextindex;
	list.rt_78.nextindex;
	list.rt_79.nextindex;
	list.rt_80.nextindex;
	list.rt_81.nextindex;
	list.rt_82.nextindex;
	list.rt_83.nextindex;
	list.rt_84.nextindex;
	list.rt_85.nextindex;
	list.rt_86.nextindex;
	list.rt_87.nextindex;
	list.rt_88.nextindex;
	list.rt_89.nextindex;
	list.rt_90.nextindex;
	list.rt_91.nextindex;
	list.rt_92.nextindex;
	list.rt_93.nextindex;
	list.rt_94.nextindex;
	list.rt_95.nextindex;
	list.rt_96.nextindex;
	list.rt_97.nextindex;
	list.rt_98.nextindex;
	list.rt_99.nextindex;
	list.rt_100.nextindex;
	list.rt_101.nextindex;
	list.rt_102.nextindex;
	list.rt_103.nextindex;
	list.rt_104.nextindex;
	list.rt_105.nextindex;
	list.rt_106.nextindex;
	list.rt_107.nextindex;
	list.rt_108.nextindex;
	list.rt_109.nextindex;
	list.rt_110.nextindex;
	list.rt_111.nextindex;
	list.rt_112.nextindex;
	list.rt_113.nextindex;
	list.rt_114.nextindex;
	list.rt_115.nextindex;
	list.rt_116.nextindex;
	list.rt_117.nextindex;
	list.rt_118.nextindex;
	list.rt_119.nextindex;
	list.rt_120.nextindex;
	list.rt_121.nextindex;
	list.rt_122.nextindex;
	list.rt_123.nextindex;
	list.rt_124.nextindex;
	list.rt_125.nextindex;
	list.rt_126.nextindex;
	list.rt_127.nextindex;
	list.rt_128.nextindex;
	list.rt_129.nextindex;
	list.rt_130.nextindex;
	list.rt_131.nextindex;
	list.rt_132.nextindex;
	list.rt_133.nextindex;
	list.rt_134.nextindex;
	list.rt_135.nextindex;
	list.rt_136.nextindex;
	list.rt_137.nextindex;
	list.rt_138.nextindex;
	list.rt_139.nextindex;
	list.rt_140.nextindex;
	list.rt_141.nextindex;
	list.rt_142.nextindex;
	list.rt_143.nextindex;
	list.rt_144.nextindex;
	list.rt_145.nextindex;
	list.rt_146.nextindex;
	list.rt_147.nextindex;
	list.rt_148.nextindex;
	list.rt_149.nextindex;
	list.rt_150.nextindex;
	list.rt_151.nextindex;
	list.rt_152.nextindex;
	list.rt_153.nextindex;
	list.rt_154.nextindex;
	list.rt_155.nextindex;
	list.rt_156.nextindex;
	list.rt_157.nextindex;
	list.rt_158.nextindex;
	list.rt_159.nextindex;
	list.rt_160.nextindex;
	list.rt_161.nextindex;
	list.rt_162.nextindex;
	list.rt_163.nextindex;
	list.rt_164.nextindex;
	list.rt_165.nextindex;
	list.rt_166.nextindex;
	list.rt_167.nextindex;
	list.rt_168.nextindex;
	list.rt_169.nextindex;
	list.rt_170.nextindex;
	list.rt_171.nextindex;
	list.rt_172.nextindex;
	list.rt_173.nextindex;
	list.rt_174.nextindex;
	list.rt_175.nextindex;
	list.rt_176.nextindex;
	list.rt_177.nextindex;
	list.rt_178.nextindex;
	list.rt_179.nextindex;
	list.rt_180.nextindex;
	list.rt_181.nextindex;
	list.rt_182.nextindex;
	list.rt_183.nextindex;
	list.rt_184.nextindex;
	list.rt_185.nextindex;
	list.rt_186.nextindex;
	list.rt_187.nextindex;
	list.rt_188.nextindex;
	list.rt_189.nextindex;
	list.rt_190.nextindex;
	list.rt_191.nextindex;
	list.rt_192.nextindex;
	list.rt_193.nextindex;
	list.rt_194.nextindex;
	list.rt_195.nextindex;
	list.rt_196.nextindex;
	list.rt_197.nextindex;
	list.rt_198.nextindex;
	list.rt_199.nextindex;
	list.rt_200.nextindex;
	list.rt_201.nextindex;
	list.rt_202.nextindex;
	list.rt_203.nextindex;
	list.rt_204.nextindex;
	list.rt_205.nextindex;
	list.rt_206.nextindex;
	list.rt_207.nextindex;
	list.rt_208.nextindex;
	list.rt_209.nextindex;
	list.rt_210.nextindex;
	list.rt_211.nextindex;
	list.rt_212.nextindex;
	list.rt_213.nextindex;
	list.rt_214.nextindex;
	list.rt_215.nextindex;
	list.rt_216.nextindex;
	list.rt_217.nextindex;
	list.rt_218.nextindex;
	list.rt_219.nextindex;
	list.rt_220.nextindex;
	list.rt_221.nextindex;
	list.rt_222.nextindex;
	list.rt_223.nextindex;
	list.rt_224.nextindex;
	list.rt_225.nextindex;
	list.rt_226.nextindex;
	list.rt_227.nextindex;
	list.rt_228.nextindex;
	list.rt_229.nextindex;
	list.rt_230.nextindex;
	list.rt_231.nextindex;
	list.rt_232.nextindex;
	list.rt_233.nextindex;
	list.rt_234.nextindex;
	list.rt_235.nextindex;
	list.rt_236.nextindex;
	list.rt_237.nextindex;
	list.rt_238.nextindex;
	list.rt_239.nextindex;
	list.rt_240.nextindex;
	list.rt_241.nextindex;
	list.rt_242.nextindex;
	list.rt_243.nextindex;
	list.rt_244.nextindex;
	list.rt_245.nextindex;
	list.rt_246.nextindex;
	list.rt_247.nextindex;
	list.rt_248.nextindex;
	list.rt_249.nextindex;
	list.rt_250.nextindex;
	list.rt_251.nextindex;
	list.rt_252.nextindex;
	list.rt_253.nextindex;
	list.rt_254.nextindex;
	list.rt_255.nextindex;
	list.rt_256.nextindex;
	list.rt_257.nextindex;
	list.rt_258.nextindex;
	list.rt_259.nextindex;
	list.rt_260.nextindex;
	list.rt_261.nextindex;
	list.rt_262.nextindex;
	list.rt_263.nextindex;
	list.rt_264.nextindex;
	list.rt_265.nextindex;
	list.rt_266.nextindex;
	list.rt_267.nextindex;
	list.rt_268.nextindex;
	list.rt_269.nextindex;
	list.rt_270.nextindex;
	list.rt_271.nextindex;
	list.rt_272.nextindex;
	list.rt_273.nextindex;
	list.rt_274.nextindex;
	list.rt_275.nextindex;
	list.rt_276.nextindex;
	list.rt_277.nextindex;
	list.rt_278.nextindex;
	list.rt_279.nextindex;
	list.rt_280.nextindex;
	list.rt_281.nextindex;
	list.rt_282.nextindex;
	list.rt_283.nextindex;
	list.rt_284.nextindex;
	list.rt_285.nextindex;
	list.rt_286.nextindex;
	list.rt_287.nextindex;
	list.rt_288.nextindex;
	list.rt_289.nextindex;
	list.rt_290.nextindex;
	list.rt_291.nextindex;
	list.rt_292.nextindex;
	list.rt_293.nextindex;
	list.rt_294.nextindex;
	list.rt_295.nextindex;
	list.rt_296.nextindex;
	list.rt_297.nextindex;
	list.rt_298.nextindex;
	list.rt_299.nextindex;
	list.rt_300.nextindex;
	list.rt_301.nextindex;
	list.rt_302.nextindex;
	list.rt_303.nextindex;
	list.rt_304.nextindex;
	list.rt_305.nextindex;
	list.rt_306.nextindex;
	list.rt_307.nextindex;
	list.rt_308.nextindex;
	list.rt_309.nextindex;
	list.rt_310.nextindex;
	list.rt_311.nextindex;
	list.rt_312.nextindex;
	list.rt_313.nextindex;
	list.rt_314.nextindex;
	list.rt_315.nextindex;
	list.rt_316.nextindex;
	list.rt_317.nextindex;
	list.rt_318.nextindex;
	list.rt_319.nextindex;
	list.rt_320.nextindex;
	list.rt_321.nextindex;
	list.rt_322.nextindex;
	list.rt_323.nextindex;
	list.rt_324.nextindex;
	list.rt_325.nextindex;
	list.rt_326.nextindex;
	list.rt_327.nextindex;
	list.rt_328.nextindex;
	list.rt_329.nextindex;
	list.rt_330.nextindex;
	list.rt_331.nextindex;
	list.rt_332.nextindex;
	list.rt_333.nextindex;
	list.rt_334.nextindex;
	list.rt_335.nextindex;
	list.rt_336.nextindex;
	list.rt_337.nextindex;
	list.rt_338.nextindex;
	list.rt_339.nextindex;
	list.rt_340.nextindex;
	list.rt_341.nextindex;
	list.rt_342.nextindex;
	list.rt_343.nextindex;
	list.rt_344.nextindex;
	list.rt_345.nextindex;
	list.rt_346.nextindex;
	list.rt_347.nextindex;
	list.rt_348.nextindex;
	list.rt_349.nextindex;
	list.rt_350.nextindex;
	list.rt_351.nextindex;
	list.rt_352.nextindex;
	list.rt_353.nextindex;
	list.rt_354.nextindex;
	list.rt_355.nextindex;
	list.rt_356.nextindex;
	list.rt_357.nextindex;
	list.rt_358.nextindex;
	list.rt_359.nextindex;
	if (values.choose_unc_att1 >= 2 && values.trialCount <= 11 && values.flag1 == false) {
		// clicking on stimuli, speed up stimulus schedule
		values.unc_att_start2 = 11;
		values.nunc_att2 = values.unc_att_start2 + 5;
		values.flag1 = true;
		values.fogPos_out = NULL;
	}
	if (values.choose_unc_att2 >= 2 && values.trialCount <= 17 && values.flag2 == false) {
		values.unc_att_start3 = 17;
		values.nunc_att3 = values.unc_att_start3 + 5;
		values.flag2 = true;
		values.windPos_out = NULL;
	}
	if (values.choose_unc_att3 >= 2 && values.trialCount <= 24 && values.flag3 == false) {
		values.unc_att_start4 = 24;
		values.nunc_att4 = values.unc_att_start4 + 5;
		values.flag3 = true;
		values.fogPos_out = NULL;
	}
	if (values.choose_unc_att4 >=2 && values.trialCount <= 30 && values.flag4 == false) {
		values.unc_att_start5 = 30;
		values.nunc_att5 = values.unc_att_start5 + 5;
		values.flag4 = true;
		values.windPos_out = NULL;
	}
	if (values.choose_unc_att5 >=2 && values.trialCount <= 36 && values.flag5 == false) {
		values.unc_att_start6 = 36;
		values.nunc_att6 = values.unc_att_start6 + 5;
		values.flag6 = true;
		values.fogPos_out = NULL;
	}
	if (values.trialCount >= values.unc_att_start1 && values.trialCount < values.nunc_att1 && values.choose_unc_att1 <= 1) {
		values.windPos_out = NULL;
	} else if (values.trialCount >= values.unc_att_start2 && values.trialCount < values.nunc_att2 && values.choose_unc_att2 <= 1) {
		values.fogPos_out = NULL;
	} else if (values.trialCount >= values.unc_att_start3 && values.trialCount < values.nunc_att3 && values.choose_unc_att3 <= 1) {
		values.windPos_out = NULL;
	} else if (values.trialCount >= values.unc_att_start4 && values.trialCount < values.nunc_att4 && values.choose_unc_att4 <= 1) {
		values.fogPos_out = NULL;
	} else if (values.trialCount >= values.unc_att_start5 && values.trialCount < values.nunc_att5 && values.choose_unc_att5 <= 1) {
		values.windPos_out = NULL;
	} else if (values.trialCount >= values.unc_att_start6 && values.trialCount < values.nunc_att6 && values.choose_unc_att6 <= 1) {
		values.fogPos_out = NULL;
	} else {
		values.windPos_out = NULL;
		values.fogPos_out = NULL;
	}
]

/ stimulustimes = [ 0 = fixationCross, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60;
]
/ timeout = list.ITI.currentvalue
/ branch = [
	trial.preFreeze
]
/ recorddata = false
/ ontrialend = [
]
</trial>


<trial experiment>
/ ontrialbegin = [
	values.mag = NULL;
	values.freq = NULL;
	values.ev = NULL;
	values.inc = NULL;
	values.rng = NULL;
	values.chooseFog1 = 0;
	values.chooseWind2 = 0;
	values.chooseAttentionalControl = 0;
	values.chooseUncertainty = 0;
	values.choose_unc_att_out1 = 0;
	values.choose_unc_att_out2 = 0;
	values.choose_unc_att_out3 = 0;
	values.choose_unc_att_out4 = 0;
	values.choose_unc_att_out5 = 0;
	values.choose_unc_att_out6 = 0;
	values.unc_att_count_out1 = 0;
	values.unc_att_count_out2 = 0;
	values.unc_att_count_out3 = 0;
	values.unc_att_count_out4 = 0;
	values.unc_att_count_out5 = 0;
	values.unc_att_count_out6 = 0;
	values.fogPos_out = NULL;
	values.windPos_out = NULL;
	values.n_revolutions = 0;
	picture.animatedCircle.erase = false
	if (parameters.randStart==TRUE) {
		values.startPos =  round(rand(0, 100));
	}
]

/ stimulustimes = [0 = planet, animatedCircle, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60;
]

/ inputdevice = keyboard
/ beginresponsetime = 0
/ timeout = 6500
/ validresponse = (" ") 
/ responseinterrupt = immediate
/ recorddata = true
/ ontrialend = [
	values.circle_x = picture.animatedCircle.xpct;
	values.circle_y = picture.animatedCircle.ypct;
	values.n_revolutions = ipart(script.elapsedtime - picture.animatedCircle.timestamp/values.time_per_revolution);
	return true;
]
/ branch = [
	return trial.ISI;
]
</trial>

<text testSchedule>
/ items = ("unc_att_ct1=<%values.choose_unc_att1%> >=2, trialCount=<%values.trialCount%> <= 12, flag1=<%values.flag1%> = 0")
/ position = (50%, 35%)
</text>


<trial ISI>
/ ontrialbegin = [
	picture.frozenShip.xpct = values.circle_x;
	picture.frozenShip.ypct = values.circle_y;
	picture.planet.erase = true;
]
/ stimulustimes = [0 = planet, unc_att, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60, frozenShip;
]
/ inputdevice = keyboard
/ timeout = list.ISI.currentvalue
/ recorddata = false
/ branch = [
	return trial.dispFeedback;
]
</trial>

<trial experiment>
/ ontrialbegin = [
	values.mag = NULL;
	values.freq = NULL;
	values.ev = NULL;
	values.inc = NULL;
	values.rng = NULL;
	values.n_revolutions = 0;
	values.choose_unc_att_out1 = 0;
	values.choose_unc_att_out2 = 0;
	values.choose_unc_att_out3 = 0;
	values.choose_unc_att_out4 = 0;
	values.choose_unc_att_out5 = 0;
	values.choose_unc_att_out6 = 0;
	values.chooseUncertainty = 0;
	values.chooseAttentionalControl = 0;
	picture.animatedCircle.erase = false;
	picture.unc_att.erase = true;
	if (parameters.randStart==TRUE) {
		values.startPos =  round(rand(0, 100));
	}
	if (values.trialCount >= values.unc_att_start1 && values.trialCount <= values.nunc_att1 && values.choose_unc_att1 <= 1) {
		values.unc_att_count_out1+=1;
	} else if (values.trialCount >= values.unc_att_start2 && values.trialCount <= values.nunc_att2 && values.choose_unc_att2 <= 1) {
		values.unc_att_count_out2+=1;
	} else if (values.trialCount >= values.unc_att_start3 && values.trialCount <= values.nunc_att3 && values.choose_unc_att3 <= 1) {
		values.unc_att_count_out3+=1;
	} else if (values.trialCount >= values.unc_att_start4 && values.trialCount <= values.nunc_att4 && values.choose_unc_att4 <= 1) {
		values.unc_att_count_out4+=1;
	} else if (values.trialCount >= values.unc_att_start5 && values.trialCount <= values.nunc_att5 && values.choose_unc_att5 <= 1) {
		values.unc_att_count_out5+=1;
	} else if (values.trialCount >= values.unc_att_start6 && values.trialCount <= values.nunc_att6 && values.choose_unc_att6 <= 1) {
		values.unc_att_count_out6+=1;
	} else {
		values.unc_att_count_out1 = 0;
		values.unc_att_count_out2 = 0;
		values.unc_att_count_out3 = 0;
		values.unc_att_count_out4 = 0;
		values.unc_att_count_out5 = 0;
		values.unc_att_count_out6 = 0;
	}
]

/ stimulustimes = [0 = planet, animatedCircle, unc_att, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60;
]

/ inputdevice = keyboard
/ beginresponsetime = 0
/ timeout = 6500
/ validresponse = (" ") 
/ responseinterrupt = immediate
/ recorddata = true
/ ontrialend = [
	values.circle_x = picture.animatedCircle.xpct;
	values.circle_y = picture.animatedCircle.ypct;
	values.n_revolutions = ipart(script.elapsedtime - picture.animatedCircle.timestamp/values.time_per_revolution);
	return true;
]
/ branch = [
	return trial.ISI;
]
</trial>


<trial preFreeze>
/ ontrialbegin = [
	if (values.trialCount >= values.unc_att_start1-1 && values.trialCount < values.nunc_att1 && values.choose_unc_att1 <= 1) {
		values.unc_att_block = 1
	} else if (values.trialCount >= values.unc_att_start2-1 && values.trialCount < values.nunc_att2 && values.choose_unc_att2 <= 1) {
		values.unc_att_block = 2
	} else if (values.trialCount >= values.unc_att_start3-1 && values.trialCount < values.nunc_att3 && values.choose_unc_att3 <= 1) {
		values.unc_att_block = 3
	} else if (values.trialCount >= values.unc_att_start4-1 && values.trialCount < values.nunc_att4 && values.choose_unc_att4 <= 1) {
		values.unc_att_block = 4
	} else if (values.trialCount >= values.unc_att_start5-1 && values.trialCount < values.nunc_att5 && values.choose_unc_att5 <= 1) {
		values.unc_att_block = 5
	} else if (values.trialCount >= values.unc_att_start6-1 && values.trialCount < values.nunc_att6 && values.choose_unc_att6 <= 1) {
		values.unc_att_block = 6
	} else {
	}
	picture.planet.erase = false;
	picture.unc_att.erase = false;
	shape.dot1.erase = false;
	shape.dot2.erase = false;
	shape.dot3.erase = false;
	shape.dot4.erase = false;
	shape.dot5.erase = false;
	shape.dot6.erase = false;
	shape.dot7.erase = false;
	shape.dot8.erase = false;
	shape.dot9.erase = false;
	shape.dot10.erase = false;
	shape.dot11.erase = false;
	shape.dot12.erase = false;
	shape.dot13.erase = false;
	shape.dot14.erase = false;
	shape.dot15.erase = false;
	shape.dot16.erase = false;
	shape.dot17.erase = false;
	shape.dot18.erase = false;
	shape.dot19.erase = false;
	shape.dot20.erase = false;
	shape.dot21.erase = false;
	shape.dot22.erase = false;
	shape.dot23.erase = false;
	shape.dot24.erase = false;
	shape.dot25.erase = false;
	shape.dot26.erase = false;
	shape.dot27.erase = false;
	shape.dot28.erase = false;
	shape.dot29.erase = false;
	shape.dot30.erase = false;
	shape.dot31.erase = false;
	shape.dot32.erase = false;
	shape.dot33.erase = false;
	shape.dot34.erase = false;
	shape.dot35.erase = false;
	shape.dot36.erase = false;
	shape.dot37.erase = false;
	shape.dot38.erase = false;
	shape.dot39.erase = false;
	shape.dot40.erase = false;
	shape.dot41.erase = false;
	shape.dot42.erase = false;
	shape.dot43.erase = false;
	shape.dot44.erase = false;
	shape.dot45.erase = false;
	shape.dot46.erase = false;
	shape.dot47.erase = false;
	shape.dot48.erase = false;
	shape.dot49.erase = false;
	shape.dot50.erase = false;
	shape.dot51.erase = false;
	shape.dot52.erase = false;
	shape.dot53.erase = false;
	shape.dot54.erase = false;
	shape.dot55.erase = false;
	shape.dot56.erase = false;
	shape.dot57.erase = false;
	shape.dot58.erase = false;
	shape.dot59.erase = false;
	shape.dot60.erase = false;
	
	
	// display stimuli here
	
	list.wind_size.nextvalue;
]

/ stimulustimes = [ 0 = planet, unc_att, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60;
]
/ timeout = list.preClockFreeze.currentvalue
/ recorddata = false
/ branch = [
	trial.experiment_U
]
</trial>

<text testUct>
/ items = ("trCt =<%values.trialCount%> uSt1=<%values.unc_att_start1%> uCt1=<%values.unc_att_count1%> nU1=<%values.nunc_att1%>, cU1=<%values.choose_unc_att1%>")
/ position = (50%, 35%)
</text>

<text testUct2>
/ items = ("trCt =<%values.trialCount%> uSt2=<%values.unc_att_start2%> uCt2=<%values.unc_att_count2%> nU2=<%values.nunc_att2%>, cU2=<%values.choose_unc_att2%> flag1=<%values.flag1%>")
/ position = (50%, 40%)
</text>

<text test_unc_att>
/ items = ("<%picture.unc_att.item.1%>")
/ position = (50%, 25%)
</text>

<text rng>
/ items = ("RT = <%values.rt_shifted%> Mag = <% values.mag%> Freq = <%values.freq%>")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (40%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<text chooseFog>
/ items = ("<% values.chooseWind2%>")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 238)
/ position = (50%, 45%)
/ vjustify = center
/ hjustify = left
</text>

<trial dispFeedback>
/ ontrialbegin = [
	values.chooseFog1 = 0;
	values.chooseWind2 = 0;
	values.chooseFog3 = 0;
	values.chooseWind4 = 0;
	if (values.startPos >= 0 && values.startPos < 75) {
		values.rt_shifted = mod(values.gamma*(values.startPos+25)+trial.experiment_U.latency,values.time_per_revolution);
	} else if (values.startPos >= 75) {
		values.rt_shifted = mod(values.gamma*(values.startPos-75)+trial.experiment_U.latency,values.time_per_revolution);
	}
	values.pos_shifted = values.rt_shifted*360/values.time_per_revolution;
	if (values.rt_shifted >= 0 && values.rt_shifted <= 14) {
		values.mag = list.rt_0.nextvalue;
	} else if (values.rt_shifted > 14 && values.rt_shifted <= 28) {
		values.mag = list.rt_1.nextvalue;
	} else if (values.rt_shifted > 28 && values.rt_shifted <= 42) {
		values.mag = list.rt_2.nextvalue;
	} else if (values.rt_shifted > 42 && values.rt_shifted <= 56) {
		values.mag = list.rt_3.nextvalue;
	} else if (values.rt_shifted > 56 && values.rt_shifted <= 69) {
		values.mag = list.rt_4.nextvalue;
	} else if (values.rt_shifted > 69 && values.rt_shifted <= 83) {
		values.mag = list.rt_5.nextvalue;
	} else if (values.rt_shifted > 83 && values.rt_shifted <= 97) {
		values.mag = list.rt_6.nextvalue;
	} else if (values.rt_shifted > 97 && values.rt_shifted <= 111) {
		values.mag = list.rt_7.nextvalue;
	} else if (values.rt_shifted > 111 && values.rt_shifted <= 125) {
		values.mag = list.rt_8.nextvalue;
	} else if (values.rt_shifted > 125 && values.rt_shifted <= 139) {
		values.mag = list.rt_9.nextvalue;
	} else if (values.rt_shifted > 139 && values.rt_shifted <= 153) {
		values.mag = list.rt_10.nextvalue;
	} else if (values.rt_shifted > 153 && values.rt_shifted <= 167) {
		values.mag = list.rt_11.nextvalue;
	} else if (values.rt_shifted > 167 && values.rt_shifted <= 181) {
		values.mag = list.rt_12.nextvalue;
	} else if (values.rt_shifted > 181 && values.rt_shifted <= 194) {
		values.mag = list.rt_13.nextvalue;
	} else if (values.rt_shifted > 194 && values.rt_shifted <= 208) {
		values.mag = list.rt_14.nextvalue;
	} else if (values.rt_shifted > 208 && values.rt_shifted <= 222) {
		values.mag = list.rt_15.nextvalue;
	} else if (values.rt_shifted > 222 && values.rt_shifted <= 236) {
		values.mag = list.rt_16.nextvalue;
	} else if (values.rt_shifted > 236 && values.rt_shifted <= 250) {
		values.mag = list.rt_17.nextvalue;
	} else if (values.rt_shifted > 250 && values.rt_shifted <= 264) {
		values.mag = list.rt_18.nextvalue;
	} else if (values.rt_shifted > 264 && values.rt_shifted <= 278) {
		values.mag = list.rt_19.nextvalue;
	} else if (values.rt_shifted > 278 && values.rt_shifted <= 292) {
		values.mag = list.rt_20.nextvalue;
	} else if (values.rt_shifted > 292 && values.rt_shifted <= 306) {
		values.mag = list.rt_21.nextvalue;
	} else if (values.rt_shifted > 306 && values.rt_shifted <= 319) {
		values.mag = list.rt_22.nextvalue;
	} else if (values.rt_shifted > 319 && values.rt_shifted <= 333) {
		values.mag = list.rt_23.nextvalue;
	} else if (values.rt_shifted > 333 && values.rt_shifted <= 347) {
		values.mag = list.rt_24.nextvalue;
	} else if (values.rt_shifted > 347 && values.rt_shifted <= 361) {
		values.mag = list.rt_25.nextvalue;
	} else if (values.rt_shifted > 361 && values.rt_shifted <= 375) {
		values.mag = list.rt_26.nextvalue;
	} else if (values.rt_shifted > 375 && values.rt_shifted <= 389) {
		values.mag = list.rt_27.nextvalue;
	} else if (values.rt_shifted > 389 && values.rt_shifted <= 403) {
		values.mag = list.rt_28.nextvalue;
	} else if (values.rt_shifted > 403 && values.rt_shifted <= 417) {
		values.mag = list.rt_29.nextvalue;
	} else if (values.rt_shifted > 417 && values.rt_shifted <= 431) {
		values.mag = list.rt_30.nextvalue;
	} else if (values.rt_shifted > 431 && values.rt_shifted <= 444) {
		values.mag = list.rt_31.nextvalue;
	} else if (values.rt_shifted > 444 && values.rt_shifted <= 458) {
		values.mag = list.rt_32.nextvalue;
	} else if (values.rt_shifted > 458 && values.rt_shifted <= 472) {
		values.mag = list.rt_33.nextvalue;
	} else if (values.rt_shifted > 472 && values.rt_shifted <= 486) {
		values.mag = list.rt_34.nextvalue;
	} else if (values.rt_shifted > 486 && values.rt_shifted <= 500) {
		values.mag = list.rt_35.nextvalue;
	} else if (values.rt_shifted > 500 && values.rt_shifted <= 514) {
		values.mag = list.rt_36.nextvalue;
	} else if (values.rt_shifted > 514 && values.rt_shifted <= 528) {
		values.mag = list.rt_37.nextvalue;
	} else if (values.rt_shifted > 528 && values.rt_shifted <= 542) {
		values.mag = list.rt_38.nextvalue;
	} else if (values.rt_shifted > 542 && values.rt_shifted <= 556) {
		values.mag = list.rt_39.nextvalue;
	} else if (values.rt_shifted > 556 && values.rt_shifted <= 569) {
		values.mag = list.rt_40.nextvalue;
	} else if (values.rt_shifted > 569 && values.rt_shifted <= 583) {
		values.mag = list.rt_41.nextvalue;
	} else if (values.rt_shifted > 583 && values.rt_shifted <= 597) {
		values.mag = list.rt_42.nextvalue;
	} else if (values.rt_shifted > 597 && values.rt_shifted <= 611) {
		values.mag = list.rt_43.nextvalue;
	} else if (values.rt_shifted > 611 && values.rt_shifted <= 625) {
		values.mag = list.rt_44.nextvalue;
	} else if (values.rt_shifted > 625 && values.rt_shifted <= 639) {
		values.mag = list.rt_45.nextvalue;
	} else if (values.rt_shifted > 639 && values.rt_shifted <= 653) {
		values.mag = list.rt_46.nextvalue;
	} else if (values.rt_shifted > 653 && values.rt_shifted <= 667) {
		values.mag = list.rt_47.nextvalue;
	} else if (values.rt_shifted > 667 && values.rt_shifted <= 681) {
		values.mag = list.rt_48.nextvalue;
	} else if (values.rt_shifted > 681 && values.rt_shifted <= 694) {
		values.mag = list.rt_49.nextvalue;
	} else if (values.rt_shifted > 694 && values.rt_shifted <= 708) {
		values.mag = list.rt_50.nextvalue;
	} else if (values.rt_shifted > 708 && values.rt_shifted <= 722) {
		values.mag = list.rt_51.nextvalue;
	} else if (values.rt_shifted > 722 && values.rt_shifted <= 736) {
		values.mag = list.rt_52.nextvalue;
	} else if (values.rt_shifted > 736 && values.rt_shifted <= 750) {
		values.mag = list.rt_53.nextvalue;
	} else if (values.rt_shifted > 750 && values.rt_shifted <= 764) {
		values.mag = list.rt_54.nextvalue;
	} else if (values.rt_shifted > 764 && values.rt_shifted <= 778) {
		values.mag = list.rt_55.nextvalue;
	} else if (values.rt_shifted > 778 && values.rt_shifted <= 792) {
		values.mag = list.rt_56.nextvalue;
	} else if (values.rt_shifted > 792 && values.rt_shifted <= 806) {
		values.mag = list.rt_57.nextvalue;
	} else if (values.rt_shifted > 806 && values.rt_shifted <= 819) {
		values.mag = list.rt_58.nextvalue;
	} else if (values.rt_shifted > 819 && values.rt_shifted <= 833) {
		values.mag = list.rt_59.nextvalue;
	} else if (values.rt_shifted > 833 && values.rt_shifted <= 847) {
		values.mag = list.rt_60.nextvalue;
	} else if (values.rt_shifted > 847 && values.rt_shifted <= 861) {
		values.mag = list.rt_61.nextvalue;
	} else if (values.rt_shifted > 861 && values.rt_shifted <= 875) {
		values.mag = list.rt_62.nextvalue;
	} else if (values.rt_shifted > 875 && values.rt_shifted <= 889) {
		values.mag = list.rt_63.nextvalue;
	} else if (values.rt_shifted > 889 && values.rt_shifted <= 903) {
		values.mag = list.rt_64.nextvalue;
	} else if (values.rt_shifted > 903 && values.rt_shifted <= 917) {
		values.mag = list.rt_65.nextvalue;
	} else if (values.rt_shifted > 917 && values.rt_shifted <= 931) {
		values.mag = list.rt_66.nextvalue;
	} else if (values.rt_shifted > 931 && values.rt_shifted <= 944) {
		values.mag = list.rt_67.nextvalue;
	} else if (values.rt_shifted > 944 && values.rt_shifted <= 958) {
		values.mag = list.rt_68.nextvalue;
	} else if (values.rt_shifted > 958 && values.rt_shifted <= 972) {
		values.mag = list.rt_69.nextvalue;
	} else if (values.rt_shifted > 972 && values.rt_shifted <= 986) {
		values.mag = list.rt_70.nextvalue;
	} else if (values.rt_shifted > 986 && values.rt_shifted <= 1000) {
		values.mag = list.rt_71.nextvalue;
	} else if (values.rt_shifted > 1000 && values.rt_shifted <= 1014) {
		values.mag = list.rt_72.nextvalue;
	} else if (values.rt_shifted > 1014 && values.rt_shifted <= 1028) {
		values.mag = list.rt_73.nextvalue;
	} else if (values.rt_shifted > 1028 && values.rt_shifted <= 1042) {
		values.mag = list.rt_74.nextvalue;
	} else if (values.rt_shifted > 1042 && values.rt_shifted <= 1056) {
		values.mag = list.rt_75.nextvalue;
	} else if (values.rt_shifted > 1056 && values.rt_shifted <= 1069) {
		values.mag = list.rt_76.nextvalue;
	} else if (values.rt_shifted > 1069 && values.rt_shifted <= 1083) {
		values.mag = list.rt_77.nextvalue;
	} else if (values.rt_shifted > 1083 && values.rt_shifted <= 1097) {
		values.mag = list.rt_78.nextvalue;
	} else if (values.rt_shifted > 1097 && values.rt_shifted <= 1111) {
		values.mag = list.rt_79.nextvalue;
	} else if (values.rt_shifted > 1111 && values.rt_shifted <= 1125) {
		values.mag = list.rt_80.nextvalue;
	} else if (values.rt_shifted > 1125 && values.rt_shifted <= 1139) {
		values.mag = list.rt_81.nextvalue;
	} else if (values.rt_shifted > 1139 && values.rt_shifted <= 1153) {
		values.mag = list.rt_82.nextvalue;
	} else if (values.rt_shifted > 1153 && values.rt_shifted <= 1167) {
		values.mag = list.rt_83.nextvalue;
	} else if (values.rt_shifted > 1167 && values.rt_shifted <= 1181) {
		values.mag = list.rt_84.nextvalue;
	} else if (values.rt_shifted > 1181 && values.rt_shifted <= 1194) {
		values.mag = list.rt_85.nextvalue;
	} else if (values.rt_shifted > 1194 && values.rt_shifted <= 1208) {
		values.mag = list.rt_86.nextvalue;
	} else if (values.rt_shifted > 1208 && values.rt_shifted <= 1222) {
		values.mag = list.rt_87.nextvalue;
	} else if (values.rt_shifted > 1222 && values.rt_shifted <= 1236) {
		values.mag = list.rt_88.nextvalue;
	} else if (values.rt_shifted > 1236 && values.rt_shifted <= 1250) {
		values.mag = list.rt_89.nextvalue;
	} else if (values.rt_shifted > 1250 && values.rt_shifted <= 1264) {
		values.mag = list.rt_90.nextvalue;
	} else if (values.rt_shifted > 1264 && values.rt_shifted <= 1278) {
		values.mag = list.rt_91.nextvalue;
	} else if (values.rt_shifted > 1278 && values.rt_shifted <= 1292) {
		values.mag = list.rt_92.nextvalue;
	} else if (values.rt_shifted > 1292 && values.rt_shifted <= 1306) {
		values.mag = list.rt_93.nextvalue;
	} else if (values.rt_shifted > 1306 && values.rt_shifted <= 1319) {
		values.mag = list.rt_94.nextvalue;
	} else if (values.rt_shifted > 1319 && values.rt_shifted <= 1333) {
		values.mag = list.rt_95.nextvalue;
	} else if (values.rt_shifted > 1333 && values.rt_shifted <= 1347) {
		values.mag = list.rt_96.nextvalue;
	} else if (values.rt_shifted > 1347 && values.rt_shifted <= 1361) {
		values.mag = list.rt_97.nextvalue;
	} else if (values.rt_shifted > 1361 && values.rt_shifted <= 1375) {
		values.mag = list.rt_98.nextvalue;
	} else if (values.rt_shifted > 1375 && values.rt_shifted <= 1389) {
		values.mag = list.rt_99.nextvalue;
	} else if (values.rt_shifted > 1389 && values.rt_shifted <= 1403) {
		values.mag = list.rt_100.nextvalue;
	} else if (values.rt_shifted > 1403 && values.rt_shifted <= 1417) {
		values.mag = list.rt_101.nextvalue;
	} else if (values.rt_shifted > 1417 && values.rt_shifted <= 1431) {
		values.mag = list.rt_102.nextvalue;
	} else if (values.rt_shifted > 1431 && values.rt_shifted <= 1444) {
		values.mag = list.rt_103.nextvalue;
	} else if (values.rt_shifted > 1444 && values.rt_shifted <= 1458) {
		values.mag = list.rt_104.nextvalue;
	} else if (values.rt_shifted > 1458 && values.rt_shifted <= 1472) {
		values.mag = list.rt_105.nextvalue;
	} else if (values.rt_shifted > 1472 && values.rt_shifted <= 1486) {
		values.mag = list.rt_106.nextvalue;
	} else if (values.rt_shifted > 1486 && values.rt_shifted <= 1500) {
		values.mag = list.rt_107.nextvalue;
	} else if (values.rt_shifted > 1500 && values.rt_shifted <= 1514) {
		values.mag = list.rt_108.nextvalue;
	} else if (values.rt_shifted > 1514 && values.rt_shifted <= 1528) {
		values.mag = list.rt_109.nextvalue;
	} else if (values.rt_shifted > 1528 && values.rt_shifted <= 1542) {
		values.mag = list.rt_110.nextvalue;
	} else if (values.rt_shifted > 1542 && values.rt_shifted <= 1556) {
		values.mag = list.rt_111.nextvalue;
	} else if (values.rt_shifted > 1556 && values.rt_shifted <= 1569) {
		values.mag = list.rt_112.nextvalue;
	} else if (values.rt_shifted > 1569 && values.rt_shifted <= 1583) {
		values.mag = list.rt_113.nextvalue;
	} else if (values.rt_shifted > 1583 && values.rt_shifted <= 1597) {
		values.mag = list.rt_114.nextvalue;
	} else if (values.rt_shifted > 1597 && values.rt_shifted <= 1611) {
		values.mag = list.rt_115.nextvalue;
	} else if (values.rt_shifted > 1611 && values.rt_shifted <= 1625) {
		values.mag = list.rt_116.nextvalue;
	} else if (values.rt_shifted > 1625 && values.rt_shifted <= 1639) {
		values.mag = list.rt_117.nextvalue;
	} else if (values.rt_shifted > 1639 && values.rt_shifted <= 1653) {
		values.mag = list.rt_118.nextvalue;
	} else if (values.rt_shifted > 1653 && values.rt_shifted <= 1667) {
		values.mag = list.rt_119.nextvalue;
	} else if (values.rt_shifted > 1667 && values.rt_shifted <= 1681) {
		values.mag = list.rt_120.nextvalue;
	} else if (values.rt_shifted > 1681 && values.rt_shifted <= 1694) {
		values.mag = list.rt_121.nextvalue;
	} else if (values.rt_shifted > 1694 && values.rt_shifted <= 1708) {
		values.mag = list.rt_122.nextvalue;
	} else if (values.rt_shifted > 1708 && values.rt_shifted <= 1722) {
		values.mag = list.rt_123.nextvalue;
	} else if (values.rt_shifted > 1722 && values.rt_shifted <= 1736) {
		values.mag = list.rt_124.nextvalue;
	} else if (values.rt_shifted > 1736 && values.rt_shifted <= 1750) {
		values.mag = list.rt_125.nextvalue;
	} else if (values.rt_shifted > 1750 && values.rt_shifted <= 1764) {
		values.mag = list.rt_126.nextvalue;
	} else if (values.rt_shifted > 1764 && values.rt_shifted <= 1778) {
		values.mag = list.rt_127.nextvalue;
	} else if (values.rt_shifted > 1778 && values.rt_shifted <= 1792) {
		values.mag = list.rt_128.nextvalue;
	} else if (values.rt_shifted > 1792 && values.rt_shifted <= 1806) {
		values.mag = list.rt_129.nextvalue;
	} else if (values.rt_shifted > 1806 && values.rt_shifted <= 1819) {
		values.mag = list.rt_130.nextvalue;
	} else if (values.rt_shifted > 1819 && values.rt_shifted <= 1833) {
		values.mag = list.rt_131.nextvalue;
	} else if (values.rt_shifted > 1833 && values.rt_shifted <= 1847) {
		values.mag = list.rt_132.nextvalue;
	} else if (values.rt_shifted > 1847 && values.rt_shifted <= 1861) {
		values.mag = list.rt_133.nextvalue;
	} else if (values.rt_shifted > 1861 && values.rt_shifted <= 1875) {
		values.mag = list.rt_134.nextvalue;
	} else if (values.rt_shifted > 1875 && values.rt_shifted <= 1889) {
		values.mag = list.rt_135.nextvalue;
	} else if (values.rt_shifted > 1889 && values.rt_shifted <= 1903) {
		values.mag = list.rt_136.nextvalue;
	} else if (values.rt_shifted > 1903 && values.rt_shifted <= 1917) {
		values.mag = list.rt_137.nextvalue;
	} else if (values.rt_shifted > 1917 && values.rt_shifted <= 1931) {
		values.mag = list.rt_138.nextvalue;
	} else if (values.rt_shifted > 1931 && values.rt_shifted <= 1944) {
		values.mag = list.rt_139.nextvalue;
	} else if (values.rt_shifted > 1944 && values.rt_shifted <= 1958) {
		values.mag = list.rt_140.nextvalue;
	} else if (values.rt_shifted > 1958 && values.rt_shifted <= 1972) {
		values.mag = list.rt_141.nextvalue;
	} else if (values.rt_shifted > 1972 && values.rt_shifted <= 1986) {
		values.mag = list.rt_142.nextvalue;
	} else if (values.rt_shifted > 1986 && values.rt_shifted <= 2000) {
		values.mag = list.rt_143.nextvalue;
	} else if (values.rt_shifted > 2000 && values.rt_shifted <= 2014) {
		values.mag = list.rt_144.nextvalue;
	} else if (values.rt_shifted > 2014 && values.rt_shifted <= 2028) {
		values.mag = list.rt_145.nextvalue;
	} else if (values.rt_shifted > 2028 && values.rt_shifted <= 2042) {
		values.mag = list.rt_146.nextvalue;
	} else if (values.rt_shifted > 2042 && values.rt_shifted <= 2056) {
		values.mag = list.rt_147.nextvalue;
	} else if (values.rt_shifted > 2056 && values.rt_shifted <= 2069) {
		values.mag = list.rt_148.nextvalue;
	} else if (values.rt_shifted > 2069 && values.rt_shifted <= 2083) {
		values.mag = list.rt_149.nextvalue;
	} else if (values.rt_shifted > 2083 && values.rt_shifted <= 2097) {
		values.mag = list.rt_150.nextvalue;
	} else if (values.rt_shifted > 2097 && values.rt_shifted <= 2111) {
		values.mag = list.rt_151.nextvalue;
	} else if (values.rt_shifted > 2111 && values.rt_shifted <= 2125) {
		values.mag = list.rt_152.nextvalue;
	} else if (values.rt_shifted > 2125 && values.rt_shifted <= 2139) {
		values.mag = list.rt_153.nextvalue;
	} else if (values.rt_shifted > 2139 && values.rt_shifted <= 2153) {
		values.mag = list.rt_154.nextvalue;
	} else if (values.rt_shifted > 2153 && values.rt_shifted <= 2167) {
		values.mag = list.rt_155.nextvalue;
	} else if (values.rt_shifted > 2167 && values.rt_shifted <= 2181) {
		values.mag = list.rt_156.nextvalue;
	} else if (values.rt_shifted > 2181 && values.rt_shifted <= 2194) {
		values.mag = list.rt_157.nextvalue;
	} else if (values.rt_shifted > 2194 && values.rt_shifted <= 2208) {
		values.mag = list.rt_158.nextvalue;
	} else if (values.rt_shifted > 2208 && values.rt_shifted <= 2222) {
		values.mag = list.rt_159.nextvalue;
	} else if (values.rt_shifted > 2222 && values.rt_shifted <= 2236) {
		values.mag = list.rt_160.nextvalue;
	} else if (values.rt_shifted > 2236 && values.rt_shifted <= 2250) {
		values.mag = list.rt_161.nextvalue;
	} else if (values.rt_shifted > 2250 && values.rt_shifted <= 2264) {
		values.mag = list.rt_162.nextvalue;
	} else if (values.rt_shifted > 2264 && values.rt_shifted <= 2278) {
		values.mag = list.rt_163.nextvalue;
	} else if (values.rt_shifted > 2278 && values.rt_shifted <= 2292) {
		values.mag = list.rt_164.nextvalue;
	} else if (values.rt_shifted > 2292 && values.rt_shifted <= 2306) {
		values.mag = list.rt_165.nextvalue;
	} else if (values.rt_shifted > 2306 && values.rt_shifted <= 2319) {
		values.mag = list.rt_166.nextvalue;
	} else if (values.rt_shifted > 2319 && values.rt_shifted <= 2333) {
		values.mag = list.rt_167.nextvalue;
	} else if (values.rt_shifted > 2333 && values.rt_shifted <= 2347) {
		values.mag = list.rt_168.nextvalue;
	} else if (values.rt_shifted > 2347 && values.rt_shifted <= 2361) {
		values.mag = list.rt_169.nextvalue;
	} else if (values.rt_shifted > 2361 && values.rt_shifted <= 2375) {
		values.mag = list.rt_170.nextvalue;
	} else if (values.rt_shifted > 2375 && values.rt_shifted <= 2389) {
		values.mag = list.rt_171.nextvalue;
	} else if (values.rt_shifted > 2389 && values.rt_shifted <= 2403) {
		values.mag = list.rt_172.nextvalue;
	} else if (values.rt_shifted > 2403 && values.rt_shifted <= 2417) {
		values.mag = list.rt_173.nextvalue;
	} else if (values.rt_shifted > 2417 && values.rt_shifted <= 2431) {
		values.mag = list.rt_174.nextvalue;
	} else if (values.rt_shifted > 2431 && values.rt_shifted <= 2444) {
		values.mag = list.rt_175.nextvalue;
	} else if (values.rt_shifted > 2444 && values.rt_shifted <= 2458) {
		values.mag = list.rt_176.nextvalue;
	} else if (values.rt_shifted > 2458 && values.rt_shifted <= 2472) {
		values.mag = list.rt_177.nextvalue;
	} else if (values.rt_shifted > 2472 && values.rt_shifted <= 2486) {
		values.mag = list.rt_178.nextvalue;
	} else if (values.rt_shifted > 2486 && values.rt_shifted <= 2500) {
		values.mag = list.rt_179.nextvalue;
	} else if (values.rt_shifted > 2500 && values.rt_shifted <= 2514) {
		values.mag = list.rt_180.nextvalue;
	} else if (values.rt_shifted > 2514 && values.rt_shifted <= 2528) {
		values.mag = list.rt_181.nextvalue;
	} else if (values.rt_shifted > 2528 && values.rt_shifted <= 2542) {
		values.mag = list.rt_182.nextvalue;
	} else if (values.rt_shifted > 2542 && values.rt_shifted <= 2556) {
		values.mag = list.rt_183.nextvalue;
	} else if (values.rt_shifted > 2556 && values.rt_shifted <= 2569) {
		values.mag = list.rt_184.nextvalue;
	} else if (values.rt_shifted > 2569 && values.rt_shifted <= 2583) {
		values.mag = list.rt_185.nextvalue;
	} else if (values.rt_shifted > 2583 && values.rt_shifted <= 2597) {
		values.mag = list.rt_186.nextvalue;
	} else if (values.rt_shifted > 2597 && values.rt_shifted <= 2611) {
		values.mag = list.rt_187.nextvalue;
	} else if (values.rt_shifted > 2611 && values.rt_shifted <= 2625) {
		values.mag = list.rt_188.nextvalue;
	} else if (values.rt_shifted > 2625 && values.rt_shifted <= 2639) {
		values.mag = list.rt_189.nextvalue;
	} else if (values.rt_shifted > 2639 && values.rt_shifted <= 2653) {
		values.mag = list.rt_190.nextvalue;
	} else if (values.rt_shifted > 2653 && values.rt_shifted <= 2667) {
		values.mag = list.rt_191.nextvalue;
	} else if (values.rt_shifted > 2667 && values.rt_shifted <= 2681) {
		values.mag = list.rt_192.nextvalue;
	} else if (values.rt_shifted > 2681 && values.rt_shifted <= 2694) {
		values.mag = list.rt_193.nextvalue;
	} else if (values.rt_shifted > 2694 && values.rt_shifted <= 2708) {
		values.mag = list.rt_194.nextvalue;
	} else if (values.rt_shifted > 2708 && values.rt_shifted <= 2722) {
		values.mag = list.rt_195.nextvalue;
	} else if (values.rt_shifted > 2722 && values.rt_shifted <= 2736) {
		values.mag = list.rt_196.nextvalue;
	} else if (values.rt_shifted > 2736 && values.rt_shifted <= 2750) {
		values.mag = list.rt_197.nextvalue;
	} else if (values.rt_shifted > 2750 && values.rt_shifted <= 2764) {
		values.mag = list.rt_198.nextvalue;
	} else if (values.rt_shifted > 2764 && values.rt_shifted <= 2778) {
		values.mag = list.rt_199.nextvalue;
	} else if (values.rt_shifted > 2778 && values.rt_shifted <= 2792) {
		values.mag = list.rt_200.nextvalue;
	} else if (values.rt_shifted > 2792 && values.rt_shifted <= 2806) {
		values.mag = list.rt_201.nextvalue;
	} else if (values.rt_shifted > 2806 && values.rt_shifted <= 2819) {
		values.mag = list.rt_202.nextvalue;
	} else if (values.rt_shifted > 2819 && values.rt_shifted <= 2833) {
		values.mag = list.rt_203.nextvalue;
	} else if (values.rt_shifted > 2833 && values.rt_shifted <= 2847) {
		values.mag = list.rt_204.nextvalue;
	} else if (values.rt_shifted > 2847 && values.rt_shifted <= 2861) {
		values.mag = list.rt_205.nextvalue;
	} else if (values.rt_shifted > 2861 && values.rt_shifted <= 2875) {
		values.mag = list.rt_206.nextvalue;
	} else if (values.rt_shifted > 2875 && values.rt_shifted <= 2889) {
		values.mag = list.rt_207.nextvalue;
	} else if (values.rt_shifted > 2889 && values.rt_shifted <= 2903) {
		values.mag = list.rt_208.nextvalue;
	} else if (values.rt_shifted > 2903 && values.rt_shifted <= 2917) {
		values.mag = list.rt_209.nextvalue;
	} else if (values.rt_shifted > 2917 && values.rt_shifted <= 2931) {
		values.mag = list.rt_210.nextvalue;
	} else if (values.rt_shifted > 2931 && values.rt_shifted <= 2944) {
		values.mag = list.rt_211.nextvalue;
	} else if (values.rt_shifted > 2944 && values.rt_shifted <= 2958) {
		values.mag = list.rt_212.nextvalue;
	} else if (values.rt_shifted > 2958 && values.rt_shifted <= 2972) {
		values.mag = list.rt_213.nextvalue;
	} else if (values.rt_shifted > 2972 && values.rt_shifted <= 2986) {
		values.mag = list.rt_214.nextvalue;
	} else if (values.rt_shifted > 2986 && values.rt_shifted <= 3000) {
		values.mag = list.rt_215.nextvalue;
	} else if (values.rt_shifted > 3000 && values.rt_shifted <= 3014) {
		values.mag = list.rt_216.nextvalue;
	} else if (values.rt_shifted > 3014 && values.rt_shifted <= 3028) {
		values.mag = list.rt_217.nextvalue;
	} else if (values.rt_shifted > 3028 && values.rt_shifted <= 3042) {
		values.mag = list.rt_218.nextvalue;
	} else if (values.rt_shifted > 3042 && values.rt_shifted <= 3056) {
		values.mag = list.rt_219.nextvalue;
	} else if (values.rt_shifted > 3056 && values.rt_shifted <= 3069) {
		values.mag = list.rt_220.nextvalue;
	} else if (values.rt_shifted > 3069 && values.rt_shifted <= 3083) {
		values.mag = list.rt_221.nextvalue;
	} else if (values.rt_shifted > 3083 && values.rt_shifted <= 3097) {
		values.mag = list.rt_222.nextvalue;
	} else if (values.rt_shifted > 3097 && values.rt_shifted <= 3111) {
		values.mag = list.rt_223.nextvalue;
	} else if (values.rt_shifted > 3111 && values.rt_shifted <= 3125) {
		values.mag = list.rt_224.nextvalue;
	} else if (values.rt_shifted > 3125 && values.rt_shifted <= 3139) {
		values.mag = list.rt_225.nextvalue;
	} else if (values.rt_shifted > 3139 && values.rt_shifted <= 3153) {
		values.mag = list.rt_226.nextvalue;
	} else if (values.rt_shifted > 3153 && values.rt_shifted <= 3167) {
		values.mag = list.rt_227.nextvalue;
	} else if (values.rt_shifted > 3167 && values.rt_shifted <= 3181) {
		values.mag = list.rt_228.nextvalue;
	} else if (values.rt_shifted > 3181 && values.rt_shifted <= 3194) {
		values.mag = list.rt_229.nextvalue;
	} else if (values.rt_shifted > 3194 && values.rt_shifted <= 3208) {
		values.mag = list.rt_230.nextvalue;
	} else if (values.rt_shifted > 3208 && values.rt_shifted <= 3222) {
		values.mag = list.rt_231.nextvalue;
	} else if (values.rt_shifted > 3222 && values.rt_shifted <= 3236) {
		values.mag = list.rt_232.nextvalue;
	} else if (values.rt_shifted > 3236 && values.rt_shifted <= 3250) {
		values.mag = list.rt_233.nextvalue;
	} else if (values.rt_shifted > 3250 && values.rt_shifted <= 3264) {
		values.mag = list.rt_234.nextvalue;
	} else if (values.rt_shifted > 3264 && values.rt_shifted <= 3278) {
		values.mag = list.rt_235.nextvalue;
	} else if (values.rt_shifted > 3278 && values.rt_shifted <= 3292) {
		values.mag = list.rt_236.nextvalue;
	} else if (values.rt_shifted > 3292 && values.rt_shifted <= 3306) {
		values.mag = list.rt_237.nextvalue;
	} else if (values.rt_shifted > 3306 && values.rt_shifted <= 3319) {
		values.mag = list.rt_238.nextvalue;
	} else if (values.rt_shifted > 3319 && values.rt_shifted <= 3333) {
		values.mag = list.rt_239.nextvalue;
	} else if (values.rt_shifted > 3333 && values.rt_shifted <= 3347) {
		values.mag = list.rt_240.nextvalue;
	} else if (values.rt_shifted > 3347 && values.rt_shifted <= 3361) {
		values.mag = list.rt_241.nextvalue;
	} else if (values.rt_shifted > 3361 && values.rt_shifted <= 3375) {
		values.mag = list.rt_242.nextvalue;
	} else if (values.rt_shifted > 3375 && values.rt_shifted <= 3389) {
		values.mag = list.rt_243.nextvalue;
	} else if (values.rt_shifted > 3389 && values.rt_shifted <= 3403) {
		values.mag = list.rt_244.nextvalue;
	} else if (values.rt_shifted > 3403 && values.rt_shifted <= 3417) {
		values.mag = list.rt_245.nextvalue;
	} else if (values.rt_shifted > 3417 && values.rt_shifted <= 3431) {
		values.mag = list.rt_246.nextvalue;
	} else if (values.rt_shifted > 3431 && values.rt_shifted <= 3444) {
		values.mag = list.rt_247.nextvalue;
	} else if (values.rt_shifted > 3444 && values.rt_shifted <= 3458) {
		values.mag = list.rt_248.nextvalue;
	} else if (values.rt_shifted > 3458 && values.rt_shifted <= 3472) {
		values.mag = list.rt_249.nextvalue;
	} else if (values.rt_shifted > 3472 && values.rt_shifted <= 3486) {
		values.mag = list.rt_250.nextvalue;
	} else if (values.rt_shifted > 3486 && values.rt_shifted <= 3500) {
		values.mag = list.rt_251.nextvalue;
	} else if (values.rt_shifted > 3500 && values.rt_shifted <= 3514) {
		values.mag = list.rt_252.nextvalue;
	} else if (values.rt_shifted > 3514 && values.rt_shifted <= 3528) {
		values.mag = list.rt_253.nextvalue;
	} else if (values.rt_shifted > 3528 && values.rt_shifted <= 3542) {
		values.mag = list.rt_254.nextvalue;
	} else if (values.rt_shifted > 3542 && values.rt_shifted <= 3556) {
		values.mag = list.rt_255.nextvalue;
	} else if (values.rt_shifted > 3556 && values.rt_shifted <= 3569) {
		values.mag = list.rt_256.nextvalue;
	} else if (values.rt_shifted > 3569 && values.rt_shifted <= 3583) {
		values.mag = list.rt_257.nextvalue;
	} else if (values.rt_shifted > 3583 && values.rt_shifted <= 3597) {
		values.mag = list.rt_258.nextvalue;
	} else if (values.rt_shifted > 3597 && values.rt_shifted <= 3611) {
		values.mag = list.rt_259.nextvalue;
	} else if (values.rt_shifted > 3611 && values.rt_shifted <= 3625) {
		values.mag = list.rt_260.nextvalue;
	} else if (values.rt_shifted > 3625 && values.rt_shifted <= 3639) {
		values.mag = list.rt_261.nextvalue;
	} else if (values.rt_shifted > 3639 && values.rt_shifted <= 3653) {
		values.mag = list.rt_262.nextvalue;
	} else if (values.rt_shifted > 3653 && values.rt_shifted <= 3667) {
		values.mag = list.rt_263.nextvalue;
	} else if (values.rt_shifted > 3667 && values.rt_shifted <= 3681) {
		values.mag = list.rt_264.nextvalue;
	} else if (values.rt_shifted > 3681 && values.rt_shifted <= 3694) {
		values.mag = list.rt_265.nextvalue;
	} else if (values.rt_shifted > 3694 && values.rt_shifted <= 3708) {
		values.mag = list.rt_266.nextvalue;
	} else if (values.rt_shifted > 3708 && values.rt_shifted <= 3722) {
		values.mag = list.rt_267.nextvalue;
	} else if (values.rt_shifted > 3722 && values.rt_shifted <= 3736) {
		values.mag = list.rt_268.nextvalue;
	} else if (values.rt_shifted > 3736 && values.rt_shifted <= 3750) {
		values.mag = list.rt_269.nextvalue;
	} else if (values.rt_shifted > 3750 && values.rt_shifted <= 3764) {
		values.mag = list.rt_270.nextvalue;
	} else if (values.rt_shifted > 3764 && values.rt_shifted <= 3778) {
		values.mag = list.rt_271.nextvalue;
	} else if (values.rt_shifted > 3778 && values.rt_shifted <= 3792) {
		values.mag = list.rt_272.nextvalue;
	} else if (values.rt_shifted > 3792 && values.rt_shifted <= 3806) {
		values.mag = list.rt_273.nextvalue;
	} else if (values.rt_shifted > 3806 && values.rt_shifted <= 3819) {
		values.mag = list.rt_274.nextvalue;
	} else if (values.rt_shifted > 3819 && values.rt_shifted <= 3833) {
		values.mag = list.rt_275.nextvalue;
	} else if (values.rt_shifted > 3833 && values.rt_shifted <= 3847) {
		values.mag = list.rt_276.nextvalue;
	} else if (values.rt_shifted > 3847 && values.rt_shifted <= 3861) {
		values.mag = list.rt_277.nextvalue;
	} else if (values.rt_shifted > 3861 && values.rt_shifted <= 3875) {
		values.mag = list.rt_278.nextvalue;
	} else if (values.rt_shifted > 3875 && values.rt_shifted <= 3889) {
		values.mag = list.rt_279.nextvalue;
	} else if (values.rt_shifted > 3889 && values.rt_shifted <= 3903) {
		values.mag = list.rt_280.nextvalue;
	} else if (values.rt_shifted > 3903 && values.rt_shifted <= 3917) {
		values.mag = list.rt_281.nextvalue;
	} else if (values.rt_shifted > 3917 && values.rt_shifted <= 3931) {
		values.mag = list.rt_282.nextvalue;
	} else if (values.rt_shifted > 3931 && values.rt_shifted <= 3944) {
		values.mag = list.rt_283.nextvalue;
	} else if (values.rt_shifted > 3944 && values.rt_shifted <= 3958) {
		values.mag = list.rt_284.nextvalue;
	} else if (values.rt_shifted > 3958 && values.rt_shifted <= 3972) {
		values.mag = list.rt_285.nextvalue;
	} else if (values.rt_shifted > 3972 && values.rt_shifted <= 3986) {
		values.mag = list.rt_286.nextvalue;
	} else if (values.rt_shifted > 3986 && values.rt_shifted <= 4000) {
		values.mag = list.rt_287.nextvalue;
	} else if (values.rt_shifted > 4000 && values.rt_shifted <= 4014) {
		values.mag = list.rt_288.nextvalue;
	} else if (values.rt_shifted > 4014 && values.rt_shifted <= 4028) {
		values.mag = list.rt_289.nextvalue;
	} else if (values.rt_shifted > 4028 && values.rt_shifted <= 4042) {
		values.mag = list.rt_290.nextvalue;
	} else if (values.rt_shifted > 4042 && values.rt_shifted <= 4056) {
		values.mag = list.rt_291.nextvalue;
	} else if (values.rt_shifted > 4056 && values.rt_shifted <= 4069) {
		values.mag = list.rt_292.nextvalue;
	} else if (values.rt_shifted > 4069 && values.rt_shifted <= 4083) {
		values.mag = list.rt_293.nextvalue;
	} else if (values.rt_shifted > 4083 && values.rt_shifted <= 4097) {
		values.mag = list.rt_294.nextvalue;
	} else if (values.rt_shifted > 4097 && values.rt_shifted <= 4111) {
		values.mag = list.rt_295.nextvalue;
	} else if (values.rt_shifted > 4111 && values.rt_shifted <= 4125) {
		values.mag = list.rt_296.nextvalue;
	} else if (values.rt_shifted > 4125 && values.rt_shifted <= 4139) {
		values.mag = list.rt_297.nextvalue;
	} else if (values.rt_shifted > 4139 && values.rt_shifted <= 4153) {
		values.mag = list.rt_298.nextvalue;
	} else if (values.rt_shifted > 4153 && values.rt_shifted <= 4167) {
		values.mag = list.rt_299.nextvalue;
	} else if (values.rt_shifted > 4167 && values.rt_shifted <= 4181) {
		values.mag = list.rt_300.nextvalue;
	} else if (values.rt_shifted > 4181 && values.rt_shifted <= 4194) {
		values.mag = list.rt_301.nextvalue;
	} else if (values.rt_shifted > 4194 && values.rt_shifted <= 4208) {
		values.mag = list.rt_302.nextvalue;
	} else if (values.rt_shifted > 4208 && values.rt_shifted <= 4222) {
		values.mag = list.rt_303.nextvalue;
	} else if (values.rt_shifted > 4222 && values.rt_shifted <= 4236) {
		values.mag = list.rt_304.nextvalue;
	} else if (values.rt_shifted > 4236 && values.rt_shifted <= 4250) {
		values.mag = list.rt_305.nextvalue;
	} else if (values.rt_shifted > 4250 && values.rt_shifted <= 4264) {
		values.mag = list.rt_306.nextvalue;
	} else if (values.rt_shifted > 4264 && values.rt_shifted <= 4278) {
		values.mag = list.rt_307.nextvalue;
	} else if (values.rt_shifted > 4278 && values.rt_shifted <= 4292) {
		values.mag = list.rt_308.nextvalue;
	} else if (values.rt_shifted > 4292 && values.rt_shifted <= 4306) {
		values.mag = list.rt_309.nextvalue;
	} else if (values.rt_shifted > 4306 && values.rt_shifted <= 4319) {
		values.mag = list.rt_310.nextvalue;
	} else if (values.rt_shifted > 4319 && values.rt_shifted <= 4333) {
		values.mag = list.rt_311.nextvalue;
	} else if (values.rt_shifted > 4333 && values.rt_shifted <= 4347) {
		values.mag = list.rt_312.nextvalue;
	} else if (values.rt_shifted > 4347 && values.rt_shifted <= 4361) {
		values.mag = list.rt_313.nextvalue;
	} else if (values.rt_shifted > 4361 && values.rt_shifted <= 4375) {
		values.mag = list.rt_314.nextvalue;
	} else if (values.rt_shifted > 4375 && values.rt_shifted <= 4389) {
		values.mag = list.rt_315.nextvalue;
	} else if (values.rt_shifted > 4389 && values.rt_shifted <= 4403) {
		values.mag = list.rt_316.nextvalue;
	} else if (values.rt_shifted > 4403 && values.rt_shifted <= 4417) {
		values.mag = list.rt_317.nextvalue;
	} else if (values.rt_shifted > 4417 && values.rt_shifted <= 4431) {
		values.mag = list.rt_318.nextvalue;
	} else if (values.rt_shifted > 4431 && values.rt_shifted <= 4444) {
		values.mag = list.rt_319.nextvalue;
	} else if (values.rt_shifted > 4444 && values.rt_shifted <= 4458) {
		values.mag = list.rt_320.nextvalue;
	} else if (values.rt_shifted > 4458 && values.rt_shifted <= 4472) {
		values.mag = list.rt_321.nextvalue;
	} else if (values.rt_shifted > 4472 && values.rt_shifted <= 4486) {
		values.mag = list.rt_322.nextvalue;
	} else if (values.rt_shifted > 4486 && values.rt_shifted <= 4500) {
		values.mag = list.rt_323.nextvalue;
	} else if (values.rt_shifted > 4500 && values.rt_shifted <= 4514) {
		values.mag = list.rt_324.nextvalue;
	} else if (values.rt_shifted > 4514 && values.rt_shifted <= 4528) {
		values.mag = list.rt_325.nextvalue;
	} else if (values.rt_shifted > 4528 && values.rt_shifted <= 4542) {
		values.mag = list.rt_326.nextvalue;
	} else if (values.rt_shifted > 4542 && values.rt_shifted <= 4556) {
		values.mag = list.rt_327.nextvalue;
	} else if (values.rt_shifted > 4556 && values.rt_shifted <= 4569) {
		values.mag = list.rt_328.nextvalue;
	} else if (values.rt_shifted > 4569 && values.rt_shifted <= 4583) {
		values.mag = list.rt_329.nextvalue;
	} else if (values.rt_shifted > 4583 && values.rt_shifted <= 4597) {
		values.mag = list.rt_330.nextvalue;
	} else if (values.rt_shifted > 4597 && values.rt_shifted <= 4611) {
		values.mag = list.rt_331.nextvalue;
	} else if (values.rt_shifted > 4611 && values.rt_shifted <= 4625) {
		values.mag = list.rt_332.nextvalue;
	} else if (values.rt_shifted > 4625 && values.rt_shifted <= 4639) {
		values.mag = list.rt_333.nextvalue;
	} else if (values.rt_shifted > 4639 && values.rt_shifted <= 4653) {
		values.mag = list.rt_334.nextvalue;
	} else if (values.rt_shifted > 4653 && values.rt_shifted <= 4667) {
		values.mag = list.rt_335.nextvalue;
	} else if (values.rt_shifted > 4667 && values.rt_shifted <= 4681) {
		values.mag = list.rt_336.nextvalue;
	} else if (values.rt_shifted > 4681 && values.rt_shifted <= 4694) {
		values.mag = list.rt_337.nextvalue;
	} else if (values.rt_shifted > 4694 && values.rt_shifted <= 4708) {
		values.mag = list.rt_338.nextvalue;
	} else if (values.rt_shifted > 4708 && values.rt_shifted <= 4722) {
		values.mag = list.rt_339.nextvalue;
	} else if (values.rt_shifted > 4722 && values.rt_shifted <= 4736) {
		values.mag = list.rt_340.nextvalue;
	} else if (values.rt_shifted > 4736 && values.rt_shifted <= 4750) {
		values.mag = list.rt_341.nextvalue;
	} else if (values.rt_shifted > 4750 && values.rt_shifted <= 4764) {
		values.mag = list.rt_342.nextvalue;
	} else if (values.rt_shifted > 4764 && values.rt_shifted <= 4778) {
		values.mag = list.rt_343.nextvalue;
	} else if (values.rt_shifted > 4778 && values.rt_shifted <= 4792) {
		values.mag = list.rt_344.nextvalue;
	} else if (values.rt_shifted > 4792 && values.rt_shifted <= 4806) {
		values.mag = list.rt_345.nextvalue;
	} else if (values.rt_shifted > 4806 && values.rt_shifted <= 4819) {
		values.mag = list.rt_346.nextvalue;
	} else if (values.rt_shifted > 4819 && values.rt_shifted <= 4833) {
		values.mag = list.rt_347.nextvalue;
	} else if (values.rt_shifted > 4833 && values.rt_shifted <= 4847) {
		values.mag = list.rt_348.nextvalue;
	} else if (values.rt_shifted > 4847 && values.rt_shifted <= 4861) {
		values.mag = list.rt_349.nextvalue;
	} else if (values.rt_shifted > 4861 && values.rt_shifted <= 4875) {
		values.mag = list.rt_350.nextvalue;
	} else if (values.rt_shifted > 4875 && values.rt_shifted <= 4889) {
		values.mag = list.rt_351.nextvalue;
	} else if (values.rt_shifted > 4889 && values.rt_shifted <= 4903) {
		values.mag = list.rt_352.nextvalue;
	} else if (values.rt_shifted > 4903 && values.rt_shifted <= 4917) {
		values.mag = list.rt_353.nextvalue;
	} else if (values.rt_shifted > 4917 && values.rt_shifted <= 4931) {
		values.mag = list.rt_354.nextvalue;
	} else if (values.rt_shifted > 4931 && values.rt_shifted <= 4944) {
		values.mag = list.rt_355.nextvalue;
	} else if (values.rt_shifted > 4944 && values.rt_shifted <= 4958) {
		values.mag = list.rt_356.nextvalue;
	} else if (values.rt_shifted > 4958 && values.rt_shifted <= 4972) {
		values.mag = list.rt_357.nextvalue;
	} else if (values.rt_shifted > 4972 && values.rt_shifted <= 4986) {
		values.mag = list.rt_358.nextvalue;
	} else if (values.rt_shifted > 4986 && values.rt_shifted <= 5000) {
		values.mag = list.rt_359.nextvalue;
	}
	values.freq = 0.7;
	values.ev = values.mag * values.freq;
	values.rng = rand(0,1);
	if (values.freq >= values.rng) {
		values.inc = values.mag;
	} else {
		values.inc = 10;
	}
	if (parameters.mushrooms==TRUE  && trial.experiment_U.latency < 6500) {
		values.inc_rg = round(randgaussian(values.inc, values.gauss_sd*values.inc));
		if (values.inc_rg < values.inc - 1.5*values.gauss_sd*values.inc) {
			values.inc_rg = round(values.inc - 1.5*values.gauss_sd*values.inc);
		} else if (values.inc_rg > values.inc + 1.5*values.gauss_sd*values.inc) {
			values.inc_rg = round(values.inc + 1.5*values.gauss_sd*values.inc);
		}
		if (values.inc_rg < 10) {
			values.inc_rg = 10;
		}
		if (values.inc_rg > 150) {
			values.inc_rg = 150;
		}
		values.totalPoints = values.totalPoints + values.inc;
		values.Earnings = values.inc_rg*values.conversion;
		values.totalEarnings = values.totalEarnings + values.Earnings;
		picture.feedback.item.1 = "mushrooms1.png"
	} else {
		values.inc = 0;
		values.inc_rg = 0;
		values.Earnings = 0;
		values.totalEarnings = values.totalEarnings + values.Earnings;
		picture.feedback.item.1 = "timeout.png"
	}
	values.chooseAttentionalControl = 0;
	values.chooseUncertainty = 0;

	
	
	
	
]
/ stimulusframes = [
	1 = picture.feedback, text.feedback1, dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8, dot9, dot10,
dot11, dot12, dot13, dot14, dot15, dot16, dot17, dot18, dot19, dot20,
dot21, dot22, dot23, dot24, dot25, dot26, dot27, dot28, dot29, dot30,
dot31, dot32, dot33, dot34, dot35, dot36, dot37, dot38, dot39, dot40,
dot41, dot42, dot43, dot44, dot45, dot46, dot47, dot48, dot49, dot50,
dot51, dot52, dot53, dot54, dot55, dot56, dot57, dot58, dot59, dot60;
]
/ trialduration = 1000
// correctresponse = (next)
/ recorddata = true

</trial>


<block endscreen>
/ trials = [
	1=endscreen;
]
</block>

<trial endscreen>
/ ontrialbegin = [
	values.mag = NULL;
	values.freq = NULL;
	values.ev = NULL;
	values.inc = NULL;
	values.rng = NULL;
	values.Earnings = NULL;
]

/ stimulusframes = [
	1=payment
]
/ timeout = 5000
</trial>


<expt main1>
/ onexptbegin = [
	if (script.groupid < 9) {
		parameters.attentional_control = "cloud";
		parameters.local_uncertainty = "wind";
		text.attentional_control.item.1 = "a cloud";
		text.attentional_control.item.2 = "cloud";
		text.local_uncertainty.item.1 = "wind";
		text.local_uncertainty.item.2 = "wind";
		picture.attention.item.1 = "fog0.png";
		picture.unc_att.item.1 = "wind0.png";
	} else if (script.groupid >= 9) {
		parameters.attentional_control = "wind";
		parameters.local_uncertainty = "cloud";
		text.attentional_control.item.1 = "wind";
		text.attentional_control.item.2 = "wind";
		text.local_uncertainty.item.1 = "a cloud";
		text.local_uncertainty.item.2 = "cloud";
		picture.attention.item.1 = "wind0.png";
		picture.unc_att.item.1 = "fog0.png";
	} else {
		if (rand(0, 1) < 0.5) {
			parameters.attentional_control = "cloud";
			parameters.local_uncertainty = "wind";
			text.attentional_control.item.1 = "a cloud";
			text.attentional_control.item.2 = "cloud";
			text.local_uncertainty.item.1 = "wind";
			text.local_uncertainty.item.2 = "wind";
			picture.attention.item.1 = "fog0.png";
			picture.unc_att.item.1 = "wind0.png";
		} else {
			parameters.attentional_control = "wind";
			parameters.local_uncertainty = "cloud";
			text.attentional_control.item.1 = "wind";
			text.attentional_control.item.2 = "wind";
			text.local_uncertainty.item.1 = "a cloud";
			text.local_uncertainty.item.2 = "cloud";
			picture.attention.item.1 = "wind0.png";
			picture.unc_att.item.1 = "fog0.png";
		}
	}
	if (script.groupid==1) {
		values.index = 0;
	} else if (script.groupid==2) {
		values.index = 50;
	} else if (script.groupid==3) {
		values.index = 87;
	} else if (script.groupid==4) {
		values.index = 123;
	} else if (script.groupid==5) {
		values.index==160;
	} else if (script.groupid==6) {
		values.index = 206;
	} else if (script.groupid==7) {
		values.index = 239;
	} else if (script.groupid==8) {
		values.index = 275;
	} else if (script.groupid==9) {
		values.index = 0;
	} else if (script.groupid==10) {
		values.index = 50;
	} else if (script.groupid==11) {
		values.index = 87;
	} else if (script.groupid==12) {
		values.index = 123;
	} else if (script.groupid==13) {
		values.index==160;
	} else if (script.groupid==14) {
		values.index = 206;
	} else if (script.groupid==15) {
		values.index = 239;
	} else if (script.groupid==16) {
		values.index = 275;
	}
	if (script.groupid <= 4) {
		values.gauss_sd = 0.001;
	} else if (script.groupid >4 && script.groupid<=8) {
		values.gauss_sd = 0.05;
	} else if (script.groupid >8 && script.groupid <=12) {
		values.gauss_sd = 0.10;
	} else if (script.groupid > 12 && script.groupid <=16) {
		values.gauss_sd = 0.15;
	}
	values.meta_trialCount = 0;
]

/ blocks = [
	//1=instructions;  need to fix instructions, trial uncertainty manipulation
	1=experiment;
	//3=experiment;
	//4=experiment;
	//5=break;
	//6=experiment;
	//7=experiment;
	//8=experiment;
	//9=break;
	//10=experiment;
	//11=experiment;
	//12=experiment;
	//13=endscreen;
]
</expt>
